{"version":3.0,"file":"lang_narrow.js","sourceRoot":"","names":["caml_raise_with_arg","tag","arg","caml_global_data","caml_CamlinternalMod_init_mod","loc","shape","undef_module","_x","loop","struct","idx","i","res","caml_update_dummy","x","y","caml_CamlinternalMod_update_mod","real","caml_array_fill","array","ofs","len","v","caml_subarray_to_jsbytes","a","f","String","null","s","Math","caml_convert_bytes_to_array","joo_global_object","Array","b","l","caml_blit_bytes","s1","i1","s2","i2","c1","c2","caml_bytes_of_string","caml_blit_string","c","d","e","caml_str_repeat","n","r","caml_convert_string_to_bytes","jsoo_is_ascii","caml_utf16_of_utf8","t","j","MlBytes","contents","length","this","content","caml_bytes_of_jsbytes","caml_string_of_jsbytes","caml_raise_with_string","msg","caml_invalid_argument","caml_bytes_bound_error","caml_bytes_unsafe_get","caml_bytes_get","caml_bytes_unsafe_set","caml_bytes_set","caml_call_gen","args","argsLen","extra_args","arguments","nargs","caml_classify_float","isFinite","isNaN","caml_jsbytes_of_string","log2_ok","jsoo_floor_log2","Infinity","caml_int32_bits_of_float","float32a","int32a","caml_int64_offset","caml_raise_constant","caml_raise_zero_divide","MlInt64","lo","mi","hi","xhi","h","sign","offset","modulus","divisor","quotient","q","caml_int64_create_lo_mi_hi","caml_int64_bits_of_float","exp","k","r3","r2","r1","caml_int64_to_bytes","caml_ba_serialize","writer","ba","sz","complex","caml_ba_get_size_per_element","kind","caml_ba_create_buffer","size","g","view","data","caml_int32_float_of_bits","caml_int64_of_bytes","caml_int64_float_of_bits","NaN","caml_ba_get_size","dims","n_dims","caml_int64_create_lo_hi","caml_int64_hi32","caml_int64_lo32","caml_array_bound_error","Ml_Bigarray","layout","buffer","im","re","total","k1","k2","Ml_Bigarray_c_1_1","caml_ba_create_unsafe","size_per_element","caml_failwith","caml_ba_deserialize","reader","num_dims","sixty","int64","caml_ba_compare","caml_mul","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_float","v0","caml_ba_hash","num_elts","w","caml_int32_unmarshal","caml_nativeint_unmarshal","caml_int64_unmarshal","caml_int64_marshal","sizes","caml_int64_compare","caml_int64_hash","caml_custom_ops","caml_compare_val_get_custom","caml_compare_val_number_custom","num","custom","swap","comp","caml_is_ml_bytes","caml_is_ml_string","caml_compare_val_tag","Number","caml_int_compare","caml_bytes_compare","caml_string_compare","caml_compare_val","stack","tag_a","tag_b","caml_compare","caml_create_bytes","caml_fill_bytes","caml_float_of_string","m","m3","mantissa","parseInt","exponent","caml_parse_format","fmt","caml_finish_formatting","rawbuffer","caml_format_float","toFixed","dp","prec","p","caml_format_int","caml_oo_last_id","caml_fresh_oo_id","caml_jsstring_of_string","caml_current_dir","caml_make_path","name","ncomp","caml_bytes_of_array","caml_utf8_of_utf16","caml_bytes_of_utf16_jsstring","caml_string_of_jsstring","caml_raise_sys_error","caml_raise_no_such_file","caml_ml_bytes_length","MlFile","MlFakeFile","old","buf","pos","clen","new_str","old_data","MlFakeDevice","root","name_slash","RegExp","seen","ok","file","bytes","caml_ml_string_length","caml_string_unsafe_get","caml_array_of_string","caml_array_of_bytes","MlNodeFile","fd","require","err","buf_offset","MlNodeDevice","consts","key","o","caml_root","fs_node_supported","jsoo_mount_point","resolve_fs_device","path","caml_create_file","caml_fs_init","tmp","caml_greaterequal","caml_hexstring_of_float","style","exp_sign","sign_str","cst","x_str","caml_int64_is_zero","caml_int64_of_int32","caml_int64_to_int32","caml_int64_is_negative","caml_int64_neg","caml_int64_format","wbase","cvtbl","caml_int64_add","caml_int64_mul","caml_int64_ult","caml_parse_sign_and_base","base","caml_parse_digit","caml_int64_of_string","base64","threshold","caml_int_of_string","caml_js_export_var","module","caml_js_wrap_callback","undefined","caml_js_wrap_meth_callback","caml_lessequal","caml_lex_array","caml_lex_engine","tbl","start_state","lexbuf","lex_buffer","lex_buffer_len","lex_start_pos","lex_curr_pos","lex_last_pos","lex_last_action","lex_eof_reached","lex_base","lex_backtrk","lex_default","lex_trans","lex_check","state","backtrk","caml_make_vect","init","caml_ml_channels","caml_ml_flush","chanid","chan","output","caml_ml_refill_input","str","str_len","caml_ml_input","l2","caml_std_output","slen","js_print_stderr","js_print_stdout","caml_sys_open_internal","flags","info","caml_sys_open","_perms","caml_ml_open_descriptor_in","channel","caml_ml_open_descriptor_out","caml_ml_out_channels_list","caml_string_of_bytes","caml_ml_output_bytes","string","jsstring","id","caml_ml_output","caml_ml_output_char","caml_notequal","caml_obj_tag","Function","caml_register_global","name_opt","caml_named_values","caml_register_named_value","nm","caml_bytes_equal","caml_string_equal","caml_string_bound_error","caml_string_get","caml_string_notequal","caml_sys_const_backend_type","caml_sys_const_max_wosize","caml_trampoline","caml_trampoline_return","caml_return_exn_constant","caml_named_value","caml_wrap_exception","dummy_pos","zero_pos","sub_format","formatting_lit","opt","fmt$0","v$0","v$1","v$2","v$3","ocaml_lex_tables","mainN","footer","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","pad$6","chr","fmtty","pad$7","fmtty$0","pad$8","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","arity","failwith","invalid_arg","min","abs","max_int","symbol","l1","char_of_int","string_of_bool","append","tl","hd","ic","oc","output_string","param$0","rev_append","l1$0","l2$0","l1$1","l2$1","rev","map","fold_left","accu","accu$0","l$0","l$1","accu$1","fold_right","map2","a2","a1","for_all","for_all2","assoc","assoc_opt","mem_assoc","filter_map","of_seq","seq","direct","depth","seq$0","acc$1","acc","next","acc$0","next$0","x$0","make","copy","sub","sub_string","blit","ofs1","ofs2","blit$0","make$0","sub$0","concat","sep","seplen","dst","tl$0","iter$0","escaped","s$0","n$0","i$1","s$1","i$0","i$2","index_from","lim","compare","engine","result","from_string","sth","with_positions","sub_lexeme","sub_lexeme_char","eRR","env","clear_parser","create$1","n$1","resize","more","old_pos","old_len","new_len","new_buffer","add_char","add_string","new_position","create_char_set","add_in_char_set","str_ind","mask","pad_of_pad_opt","pad_opt","width","param_format_of_ignored_format","pad_opt$0","pad_opt$1","pad_opt$2","pad_opt$3","pad_opt$4","prec_opt","pad_opt$5","ndec","pad_opt$6","pad_opt$7","pad_opt$8","default_float_precision","buffer_create","init_size","buffer_check_size","overhead","buffer_add_char","buffer_add_string","buffer_contents","char_of_iconv","string_of_formatting_lit","str$0","bprint_fmtty","sub_fmtty","sub_fmtty$0","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","match","rest2","rest2$0","rest2$1","rest2$2","rest2$3","rest2$4","rest2$5","rest2$6","rest2$7","rest2$8","ty22","ty21","f4","f2","rest2$9","rest2$10","rest2$11","rest2$12","rest2$13","fmtty_of_padding_fmtty","fmtty_of_custom","arity$0","fmtty_of_fmt","ty_rest","prec_ty","fmtty_of_precision_fmtty","ty_rest$0","prec_ty$0","ty_rest$1","prec_ty$1","ty_rest$2","prec_ty$2","ty_rest$3","prec_ty$3","fmtty$1","fmtty$2","fmtty$3","ty$0","fmtty$4","fmtty$5","type_padding","padty","padty$0","type_padprec","type_format","type_format_gen","type_ignored_param_one","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmt$1","fmt_rest$1","fmtty_rest$1","fmt$2","fmt_rest$2","fmtty_rest$2","fmt$3","fmt_rest$3","fmtty_rest$3","fmt$4","fmt_rest$4","fmtty_rest$4","fmt$5","fmt_rest$5","fmtty_rest$5","prec$4","fmtty$6","fmt$6","fmt_rest$6","prec$5","fmtty_rest$6","prec$6","fmtty$7","fmt$7","fmt_rest$7","prec$7","fmtty_rest$7","prec$8","fmtty$8","fmt$8","fmt_rest$8","fmtty_rest$8","fmtty$9","fmt$9","fmt_rest$9","fmtty$10","fmt$10","fmt_rest$10","fmtty$11","fmt$11","fmt_rest$11","fmtty$12","fmt$12","fmtty_rest$9","fmt_rest$12","fmtty$13","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","fmtty$14","fmt$14","fmtty_rest$11","fmt_rest$14","fmtty$15","fmt$15","fmtty_rest$12","fmt_rest$15","fmtty$16","fmt$16","fmt_rest$16","fmtty$17","fmt$17","fmt_rest$17","formatting_gen","fmtty3","fmt3","str$1","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$18","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$19","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$20","fmt$20","fmtty_rest$16","fmtty$21","fmt$21","sub_fmtty$2","sub_fmtty$3","type_ignored_format_substituti","fmtty$22","fmt$22","sub_fmtty$4","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","fix_padding","width$0","fix_int_precision","res$1","res$0","string_to_caml_string","format_of_fconv","cF","symb","transform_int_alt","digits","put","left","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","hex","caml_special_val","string_of_fmtty","make_int_padding_precision","make_printf","p$0","p$1","make_padding","new_acc","make_printf$0","k$0","acc$2","acc$3","acc$4","k$3","kacc","k$1","k$4","k$2","make_invalid_arg","make_from_fmtty$0","make_custom$0","make_from_fmtty","make_custom","output_acc","p$2","p$3","p$4","strput_acc","failwith_message","make_padding_fmt_ebb","make_padprec_fmt_ebb","fmt_ebb_of_string","legacy_behavior","flag","legacy_behavior$0","invalid_format_message","unexpected_end_of_format","end_ind","invalid_format_without","expected_character","expected","read","add_literal","lit_start","parse","str_ind$2","parse_flags","str_ind$0","parse_tag","parse_good_break","parse_magic_size","str_ind$1","parse_conversion","pct_ind","plus","hash","space","padprec","plus_used","hash_used","space_used","ign_used","pad_used","prec_used","get_plus","get_hash","get_space","get_ign","get_pad","get_prec","get_padprec","get_int_pad","incompatible_flag","check_no_0","opt_of_pad","width$1","get_pad_opt","get_padprec_opt","fmt_result","sub_end","search_subformat_end","sub_fmt","ignored$2","counter$0","ignored$6","ignored$7","char_set$1","add_range","c$0","fail_single_percent","parse_char_set_content","parse_char_set_after_char$0","c$1","c$2","c$3","parse_char_set_after_char","reverse","next_ind","char_set$0","char_set$2","ignored$9","char_format","fmt_rest$21","fmt_rest$22","pad$9","fmt_rest$23","ignored$10","fmt_rest$24","pad$10","fmt_rest$25","sub_end$0","sub_fmt$0","fmt_rest$26","ignored$11","ignored$3","symb$0","ignored$5","compute_int_conv","ignored$8","space$1","hash$1","plus$2","ignored$4","ignored","ignored$0","ignored$1","plus$0","hash$0","space$0","plus$1","ign$0","parse_after_precision","minus","parse_conv","parse_after_padding","parse_literal","parse_positive","new_ind","minus$0","zero","set_flag","str_ind$3","str_ind$4","str_ind$5","is_open_tag","ind","sub_str","sub_format$0","formatting$0","formatting","str_ind_1","parse_spaces","parse_integer","str_ind_2","str_ind_3","formatting_lit$0","str_ind_4","str_ind_5","sub_end$1","sub_end$2","str_ind$6","str_ind$7","option","subfmt","sprintf","printers","register_printer","fn","null_char","next_char","ib","peek_char","checked_peek_char","end_of_input","char_count","reset_token","invalidate_current_char","token_string","token_buffer","tok","skip_char","ignore_char","store_char","default_token_buffer_size","create$2","iname","eof","bad_input","bad_input_escape","bad_token_length","message","bad_float","bad_hex_float","character_mismatch","ci","check_this_char","check_char","token_char","token_bool","integer_conversion_of_char","token_int_literal","conv","token_float","scan_decimal_digit_star","width$2","scan_unsigned_decimal_int","scan_digit_plus","basis","digitp","width$3","is_binary_digit","scan_binary_int","is_octal_digit","scan_octal_int","is_hexa_digit","scan_hexadecimal_int","scan_sign","scan_optionally_signed_decimal","scan_int_conversion","scan_fractional_part","scan_exponent_part","scan_float","precision","precision$0","check_case_insensitive_string","error","lowercase","scan_hex_float","width$4","width$5","width$6","width$10","width$7","width$8","width$9","scan_caml_float_rest","width_precision","frac_width","scan_caml_float","scan_string","stp","scan_char","hexadecimal_value_of_char","check_next_char","check_next_char_for_char","check_next_char_for_string","scan_backslash_char","c0","get_digit","get_digit$0","c1$0","c2$0","scan_caml_char","find_stop","scan_caml_string","find_stop$0","skip_spaces","scan_chars_in_char_set","scan_indic","scan_chars","ef","get_counter","width_of_pad_opt","stopper_of_formatting_lit","fmting","take_format_readers$0","take_fmtty_format_readers$0","new_k","readers_rest","take_format_readers","fmt$23","fmt$24","fmt$25","take_fmtty_format_readers","pad_prec_scanf","readers","scan","token","make_scanf","x$1","x$2","scan$0","str_rest","scan$1","scan$2","scan$3","scan$4","conv$0","scan$5","conv$1","scan$6","conv$2","scan$7","scan$8","msg$0","fmting_lit$0","str$2","stp$0","str_rest$0","rest$24","count","rest$25","rest$26","arg_rest","height","create","hl","h$0","hr","bal","lr","lv","ll","lrr","lrv","lrl","rr","rv","rl","rlr","rlv","rll","add","singleton","add_min_element","add_max_element","join","rh","lh","min_elt","remove_min_elt","r$0","concat$0","split","pres","pres$0","union","t1","h2","v2","h1","v1","r2$0","r1$0","cons_enum","e$0","e$1","for_all$0","exists","filter","pv","partition","lf","lt","rf","rt","cardinal","map$0","seq_of_enum","to_seq","height$0","create$0","bal$0","ld","lrd","rd","rld","ctx","param$1","add_var","var$0","string_of_ty","fields","fields$0","tyR","tyL","string_of_expr","recv","rcd","field","fail_proj_non_record","simplifyUnion","tys","tyeq","t2","t1$0","t2$0","p2","f2$0","n1","is_subtype","tyS","tyT","tyS$0","tyT$0","rT","pT","pS","fieldsS","fieldsT","join$0","ty1$0","ty2$0","joinParams","meet","joinRet","allFields","singleTy","uTy","joinedFields","ty2$1","sort","x2","x1","tl$1","x3","x2$0","x1$0","c$4","c$5","c$6","n2","rev_sort","accu$2","l$3","x0","l$4","x0$0","l$5","x0$1","nl","mid","l$2","right","x4","meetParams","meetRet","common","metFields","exclude","tyB","tyE","tyB$0","tyE$0","rE","pE","excParams","excRet","fE","filtered","tyE$1","fE$0","wittled","tB","tE","tWittle","tyB$1","typecheck","expr","ret","params","argTys","ty$1","expr$0","tyExpr","tyLeft","tyRight","cond","tyLeft$0","tyRight$0","tyRight$1","tyLeft$1","ctxLeft","tyLeft$2","ctxRight","tyRight$2","fieldTys","t$0","combinedProjTypes","rcdFields","fields$1","ty$2","rcd$0","field$0","ty$3","fields$2","variantTy","right$0","left$0","fields$3","is","menhir_fail","menhir_errorcase","menhir_env","menhir_stack","menhir_s","menhir_stack$0","menhir_s$0","menhir_s$1","menhir_stack$1","menhir_s$2","menhir_stack$2","menhir_s$3","menhir_stack$3","menhir_s$4","menhir_stack$4","menhir_s$5","menhir_stack$5","menhir_s$6","menhir_stack$6","menhir_s$7","menhir_stack$7","menhir_s$8","menhir_stack$8","menhir_s$9","menhir_stack$9","menhir_s$10","menhir_stack$10","menhir_s$11","menhir_stack$11","menhir_s$12","menhir_stack$12","menhir_s$13","menhir_stack$13","menhir_s$14","menhir_stack$14","menhir_s$15","menhir_stack$15","menhir_s$16","menhir_stack$16","menhir_s$17","menhir_stack$17","menhir_s$18","menhir_stack$18","menhir_s$19","menhir_stack$19","menhir_s$20","menhir_stack$20","menhir_s$21","menhir_stack$21","menhir_s$22","menhir_stack$22","menhir_s$23","menhir_stack$23","menhir_s$24","menhir_stack$24","menhir_goto_program","menhir_run71","menhir_reduce34","_2","_3","_1","menhir_goto_Type","menhir_run33","menhir_env$0","menhir_discard","menhir_run20","menhir_run21","menhir_run22","menhir_run23","menhir_run24","tok$0","menhir_run3$0","menhir_run4$0","menhir_run7$0","menhir_run1$0","menhir_run2$0","menhir_run8$0","menhir_run10$0","tok$1","v$4","menhir_goto_Params","menhir_env$1","tok$2","menhir_reduce23","v$5","menhir_run59","tok$3","v$6","menhir_goto_RcdType","menhir_env$2","tok$4","menhir_reduce29","v$7","menhir_run25","tok$5","menhir_env$3","menhir_goto_AtomicType","_3$0","_1$0","v$8","menhir_goto_AtomicExpr","menhir_goto_RcdList","menhir_goto_ArgList","menhir_run14","menhir_reduce26","menhir_run5","menhir_reduce2","menhir_env$4","v$19","menhir_env$5","v$20","tok$10","menhir_env$6","tok$11","v$21","v$22","v$23","v$24","tok$9","menhir_run56$0","_6","_4","v$9","v$10","tok$6","v$16","tok$7","v$17","tok$8","v$18","v$11","v$12","v$13","v$14","v$15","menhir_run1","menhir_run2","menhir_run3","menhir_run4","menhir_run7","menhir_run8","menhir_run56","menhir_run10","lexer","program","next_line","read$0","ocaml_lex_state$3","ocaml_lex_state$4","strbuf","ocaml_lex_state$1","ocaml_lex_state$2","apply","f$0","args$0","f$1","exc","lcp","param","ocaml_lex_state","ocaml_lex_state$0","bod","key$0","is_val","small_step","body","lower_single","eval$0","emit_cTy","emit_cExpr","emit_cDecl","emit_cStmt","indent","indentS","emitS","e2","e1","bLeft","bRight","parts","emit_cFn","block","block$0","params$0","header","genCIdent","originalId","codegen_expr","call","stmts","cArgs","cA","stmts1","stmts$0","e$2","e$3","stmts$1","tyTagMacro","outV","cCond","stmtsCond","cLeft","stmtsL","outLeft","blockLeft","cRight","stmtsR","outRight","blockRight","cIfSeq","numFields","value","cField","cValue","mkRcdArgs","stmts$2","args$1","cRcd","stmts$3","cRcd$0","stmts$4","codegen_fn","bodyExpr","body$0","codegen_c","fns","cFns","cExpr","exprVar","stmts2","cMain","topLevels","global","object_constructor","array_length","error_constr","exn","slot","raise_js_error","string_of_position","pr_binding","what","process_fn","name$1","bindings","ctx$0","retTy","name$0","bodyTy","paramTys","bind","program$0","program$1","ety","evaled","ebind","expr$1","bindings$0","codegen","bindings$1","obj","keys","iter"],"sources":["/builtin/+fail.js","/builtin/+stdlib.js","/builtin/+internalMod.js","/builtin/+obj.js","/builtin/+array.js","/builtin/+mlBytes.js","/builtin/+ieee_754.js","/builtin/+int64.js","/builtin/+bigarray.js","/builtin/+ints.js","/builtin/+hash.js","/builtin/+marshal.js","/builtin/+compare.js","/builtin/+format.js","/builtin/+fs.js","/builtin/+sys.js","/builtin/+fs_fake.js","/builtin/+fs_node.js","/builtin/+jslib_js_of_ocaml.js","/builtin/+lexing.js","/builtin/+io.js","/builtin/+jslib.js","/home/opam/.opam/4.10/lib/ocaml/lexing.ml","/home/opam/.opam/4.10/lib/ocaml/camlinternalFormat.ml","/home/opam/.opam/4.10/lib/ocaml/scanf.ml","/home/opam/.opam/4.10/lib/ocaml/printf.ml","/home/opam/project/_build/default/src/parser.ml","/home/opam/project/_build/default/src/lexer.ml","/home/opam/project/_build/default/src/codegenC.ml","/home/opam/.opam/4.10/lib/ocaml/camlinternalFormatBasics.ml","/home/opam/.opam/4.10/lib/ocaml/stdlib.ml","/home/opam/.opam/4.10/lib/ocaml/list.ml","/home/opam/.opam/4.10/lib/ocaml/seq.ml","/home/opam/.opam/4.10/lib/ocaml/bytes.ml","/home/opam/.opam/4.10/lib/ocaml/string.ml","/home/opam/.opam/4.10/lib/ocaml/parsing.ml","/home/opam/.opam/4.10/lib/ocaml/array.ml","/home/opam/.opam/4.10/lib/ocaml/buffer.ml","/home/opam/.opam/4.10/lib/ocaml/char.ml","/home/opam/.opam/4.10/lib/ocaml/printexc.ml","/home/opam/.opam/4.10/lib/ocaml/set.ml","/home/opam/.opam/4.10/lib/ocaml/map.ml","/home/opam/project/_build/default/src/js.ml","/home/opam/project/_build/default/src/language.ml","/home/opam/project/_build/default/src/typecheck.ml","/home/opam/.opam/4.10/lib/ocaml/option.ml","/home/opam/project/_build/default/src/parser.mly","/home/opam/project/_build/default/src/lexer.mll","/home/opam/project/_build/default/src/eval.ml","/home/opam/.opam/4.10/lib/js_of_ocaml/js.ml","","/home/opam/.opam/4.10/lib/ocaml/callback.ml"],"mappings":"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","sourcesContent":["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Raise exception\n\n//Provides: caml_raise_constant (const)\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_return_exn_constant (const)\nfunction caml_return_exn_constant (tag) { return tag; }\n\n//Provides: caml_raise_with_arg (const, const)\nfunction caml_raise_with_arg (tag, arg) { throw [0, tag, arg]; }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg, caml_string_of_jsbytes\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_string_of_jsbytes(msg));\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_failwith (msg) {\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_call_gen (const, shallow)\n//Weakdef\nfunction caml_call_gen(f, args) {\n  if(f.fun)\n    return caml_call_gen(f.fun, args);\n  //FIXME, can happen with too many arguments\n  if(typeof f !== \"function\") return f;\n  var n = f.length | 0;\n  if(n === 0) return f.apply(null,args);\n  var argsLen = args.length | 0;\n  var d = n - argsLen | 0;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0) {\n    return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));\n  }\n  else {\n    return function (){\n      var extra_args = (arguments.length == 0)?1:arguments.length;\n      var nargs = new Array(args.length+extra_args);\n      for(var i = 0; i < args.length; i++ ) nargs[i] = args[i];\n      for(var i = 0; i < arguments.length; i++ ) nargs[args.length+i] = arguments[i];\n      return caml_call_gen(f, nargs)\n    }\n  }\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,const)\n//Requires: caml_named_values, caml_jsbytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_jsbytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data\nfunction caml_register_global (n, v, name_opt) {\n  if(name_opt && joo_global_object.toplevelReloc)\n    n = joo_global_object.toplevelReloc(name_opt);\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_CamlinternalMod_init_mod\n//Requires: caml_raise_with_arg, caml_global_data\nfunction caml_CamlinternalMod_init_mod(loc,shape) {\n  function undef_module (_x) {\n    caml_raise_with_arg(caml_global_data.Undefined_recursive_module, loc);\n  }\n  function loop (shape,struct,idx){\n    if(typeof shape === \"number\")\n      switch(shape){\n      case 0://function\n        struct[idx]={fun:undef_module};\n        break;\n      case 1://lazy\n        struct[idx]=[246, undef_module];\n        break;\n      default://case 2://class\n        struct[idx]=[];\n      }\n    else\n      switch(shape[0]){\n      case 0://module\n        struct[idx] = [0];\n        for(var i=1;i<shape[1].length;i++)\n          loop(shape[1][i],struct[idx],i);\n        break;\n      default://case 1://Value\n        struct[idx] = shape[1];\n      }\n  }\n  var res = [];\n  loop(shape,res,0);\n  return res[0]\n}\n//Provides: caml_CamlinternalMod_update_mod\n//Requires: caml_update_dummy\nfunction caml_CamlinternalMod_update_mod(shape,real,x) {\n  if(typeof shape === \"number\")\n    switch(shape){\n    case 0://function\n    case 1://lazy\n    case 2://class\n    default:\n      caml_update_dummy(real,x);\n    }\n  else\n    switch(shape[0]){\n    case 0://module\n      for(var i=1;i<shape[1].length;i++)\n        caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);\n      break;\n      //case 1://Value\n    default:\n    };\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n\n\n//Provides: caml_obj_tag\n//Requires: caml_is_ml_bytes, caml_is_ml_string\nfunction caml_obj_tag (x) {\n  if ((x instanceof Array) && x[0] == (x[0] >>> 0))\n    return x[0]\n  else if (caml_is_ml_bytes(x))\n    return 252\n  else if (caml_is_ml_string(x))\n    return 252\n  else if ((x instanceof Function) || typeof x == \"function\")\n    return 247\n  else if (x && x.caml_custom)\n    return 255\n  else\n    return 1000\n}\n\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n\n//Provides: caml_obj_with_tag\nfunction caml_obj_with_tag(tag,x) {\n  var l = x.length;\n  var a = new Array(l);\n  a[0] = tag;\n  for(var i = 1; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_dup mutable (const)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_obj_make_forward\nfunction caml_obj_make_forward (b,v) {\n  b[0]=250;\n  b[1]=v;\n  return 0\n}\n\n//Provides: caml_lazy_make_forward const (const)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === null) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n    return meths[ofs - 1];\n  }\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Array\n\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_array_fill\nfunction caml_array_fill(array, ofs, len, v){\n  for(var i = 0; i < len; i++){\n    array[ofs+i+1] = v;\n  }\n  return 0;\n}\n\n//Provides: caml_check_bound (const, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, const)\n//Requires: caml_array_bound_error\nfunction caml_make_vect (len, init) {\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\n//Requires: caml_array_bound_error\nfunction caml_make_float_vect(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n//Provides: caml_floatarray_create const (const)\n//Requires: caml_array_bound_error\nfunction caml_floatarray_create(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if(n == 0) return \"\";\n  if (s.repeat) {return s.repeat(n);} // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_jsbytes\n//Weakdef\n// Pre ECMAScript 5, [apply] would not support array-like object.\n// In such setup, Typed_array would be implemented as polyfill, and [f.apply] would\n// fail here. Mark the primitive as Weakdef, so that people can override it easily.\nfunction caml_subarray_to_jsbytes (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, a.slice(i,i + Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n            v = 3;\n            if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                (c1 < 0xf5)) {\n              v = c2 - 0x3c82080 + (c << 6);\n              if (v < 0x10000 || v > 0x10ffff) v = 3;\n            }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: jsoo_is_ascii\nfunction jsoo_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_bytes_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_bytes_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_bytes_bound_error\n//Requires: caml_invalid_argument\nfunction caml_bytes_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\n//Requires: caml_ml_string_length\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get16\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get16(s,i) {\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get32\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get32(s,i) {\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1),\n      b3 = caml_bytes_unsafe_get (s, i + 2),\n      b4 = caml_bytes_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\n//Requires: caml_ml_string_length\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get64\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_bytes_get64(s,i) {\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_bytes_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set (s, i, c) {\n  caml_failwith(\"caml_string_set\");\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_unsafe_set, caml_string_bound_error\n//If: !js-string\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_set16\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set16(s,i,i16){\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set16\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set16(s,i,i16){\n    caml_failwith(\"caml_string_set16\");\n}\n\n//Provides: caml_string_set16\n//Requires: caml_bytes_set16\n//If: !js-string\nfunction caml_string_set16(s,i,i16){\n  return caml_bytes_set16(s,i,i16);\n}\n\n//Provides: caml_bytes_set32\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set32(s,i,i32){\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  caml_bytes_unsafe_set (s, i + 2, b3);\n  caml_bytes_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set32(s,i,i32){\n    caml_failwith(\"caml_string_set32\");\n}\n\n//Provides: caml_string_set32\n//Requires: caml_bytes_set32\n//If: !js-string\nfunction caml_string_set32(s,i,i32){\n  return caml_bytes_set32(s,i,i32);\n}\n\n//Provides: caml_bytes_set64\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_bytes_set64(s,i,i64){\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_bytes_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set64(s,i,i64){\n    caml_failwith(\"caml_string_set64\");\n}\n\n//Provides: caml_string_set64\n//Requires: caml_bytes_set64\n//If: !js-string\nfunction caml_string_set64(s,i,i64){\n  return caml_bytes_set64(s,i,i64);\n}\n\n//Provides: caml_bytes_set\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_of_utf16_jsstring\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, MlBytes\nfunction caml_bytes_of_utf16_jsstring (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!jsoo_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlBytes(tag, s, s.length);\n}\n\n\n//Provides: MlBytes\n//Requires: caml_convert_string_to_bytes, jsoo_is_ascii, caml_utf16_of_utf8\nfunction MlBytes (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlBytes.prototype.toString = function(){\n  switch (this.t) {\n  case 9: /*BYTES | ASCII*/\n    return this.c;\n  default:\n    caml_convert_string_to_bytes(this);\n  case 0: /*BYTES | UNKOWN*/\n    if (jsoo_is_ascii(this.c)) {\n      this.t = 9; /*BYTES | ASCII*/\n      return this.c;\n    }\n    this.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return caml_utf16_of_utf8(this.c);\n  }\n};\nMlBytes.prototype.slice = function (){\n  var content = this.t == 4 ? this.c.slice() : this.c;\n  return new MlBytes(this.t,content,this.l);\n}\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_jsbytes\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_jsbytes (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_bytes_to_array\nfunction caml_convert_bytes_to_array (s) {\n  /* Assumes not ARRAY */\n  if(joo_global_object.Uint8Array) {\n    var a = new joo_global_object.Uint8Array(s.l);\n  } else {\n    var a = new Array(s.l);\n  }\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_array_of_bytes mutable\n//Requires: caml_convert_bytes_to_array\nfunction caml_array_of_bytes (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_array_of_string mutable\n//Requires: caml_convert_bytes_to_array\n//Requires: caml_ml_string_length, caml_string_unsafe_get\nfunction caml_array_of_string (s) {\n  var l = caml_ml_string_length(s);\n  var a = new Array(l);\n  var i = 0;\n  for (; i < l; i++) a[i] = caml_string_unsafe_get(s,i);\n  return a;\n}\n\n//Provides: caml_create_string const\n//Requires: MlBytes, caml_invalid_argument\n//If: !js-string\nfunction caml_create_string(len) {\n  if(len < 0) caml_invalid_argument(\"String.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_create_string const\n//Requires: caml_invalid_argument\n//If: js-string\nfunction caml_create_string(len) {\n  caml_invalid_argument(\"String.create\");\n}\n\n//Provides: caml_create_bytes const\n//Requires: MlBytes,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_string_of_array\n//Requires: caml_subarray_to_jsbytes, caml_string_of_jsbytes\nfunction caml_string_of_array (a) {\n  return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length));\n}\n\n//Provides: caml_bytes_of_array\n//Requires: MlBytes\nfunction caml_bytes_of_array (a) {\n  return new MlBytes(4,a,a.length);\n}\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_str_repeat, caml_convert_bytes_to_array\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_fill_string\n//Requires: caml_fill_bytes\nvar caml_fill_string = caml_fill_bytes\n\n//Provides: caml_blit_bytes\n//Requires: caml_subarray_to_jsbytes, caml_convert_bytes_to_array\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n      if (i2 <= i1) {\n        for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n      } else {\n        for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n      }\n    } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_string\n//Requires: caml_blit_bytes, caml_bytes_of_string\nfunction caml_blit_string(a,b,c,d,e) {\n    caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);\n    return 0\n}\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n\n//Provides: caml_string_unsafe_get const\n//If: js-string\nfunction caml_string_unsafe_get (s, i) {\n  return s.charCodeAt(i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_unsafe_set (s, i, c) {\n    caml_failwith(\"caml_string_unsafe_set\");\n}\n\n//Provides: caml_ml_string_length const\n//If: js-string\nfunction caml_ml_string_length(s) {\n  return s.length\n}\n\n//Provides: caml_string_compare const\n//If: js-string\nfunction caml_string_compare(s1, s2) {\n  return (s1 < s2)?-1:(s1 > s2)?1:0;\n}\n\n//Provides: caml_string_equal const\n//If: js-string\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  return 0;\n}\n\n//Provides: caml_string_lessequal const\n//If: js-string\nfunction caml_string_lessequal(s1, s2) {\n  return (s1 <= s2)?1:0;\n}\n\n//Provides: caml_string_lessthan const\n//If: js-string\nfunction caml_string_lessthan(s1, s2) {\n  return (s1 < s2)?1:0;\n}\n\n//Provides: caml_string_of_bytes\n//Requires: caml_convert_string_to_bytes, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_bytes(s) {\n    (s.t & 6) && caml_convert_string_to_bytes(s);\n  return caml_string_of_jsbytes(s.c);\n}\n\n//Provides: caml_bytes_of_string const\n//Requires: caml_bytes_of_jsbytes, caml_jsbytes_of_string\n//If: js-string\nfunction caml_bytes_of_string(s) {\n  return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));\n}\n\n//Provides: caml_string_of_jsbytes const\n//If: js-string\nfunction caml_string_of_jsbytes(x) { return x }\n\n//Provides: caml_jsbytes_of_string const\n//If: js-string\nfunction caml_jsbytes_of_string(x) { return x }\n\n//Provides: caml_jsstring_of_string const\n//Requires: jsoo_is_ascii, caml_utf16_of_utf8\n//If: js-string\nfunction caml_jsstring_of_string(s) {\n  if(jsoo_is_ascii(s))\n    return s;\n  return caml_utf16_of_utf8(s); }\n\n//Provides: caml_string_of_jsstring const\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_jsstring (s) {\n  if (jsoo_is_ascii(s))\n    return caml_string_of_jsbytes(s)\n  else return caml_string_of_jsbytes(caml_utf8_of_utf16(s));\n}\n\n//Provides: caml_bytes_of_jsbytes const\n//Requires: MlBytes\nfunction caml_bytes_of_jsbytes(s) { return new MlBytes(0,s,s.length); }\n\n\n// The section below should be used when use-js-string=false\n\n//Provides: caml_string_unsafe_get const\n//Requires: caml_bytes_unsafe_get\n//If: !js-string\nfunction caml_string_unsafe_get (s, i) {\n  return caml_bytes_unsafe_get(s,i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_bytes_unsafe_set\n//If: !js-string\nfunction caml_string_unsafe_set (s, i, c) {\n  return caml_bytes_unsafe_set(s,i,c);\n}\n\n//Provides: caml_ml_string_length const\n//Requires: caml_ml_bytes_length\n//If: !js-string\nfunction caml_ml_string_length(s) {\n  return caml_ml_bytes_length(s)\n}\n\n//Provides: caml_string_compare\n//Requires: caml_bytes_compare\n//If: !js-string\nfunction caml_string_compare(s1, s2) {\n  return caml_bytes_compare(s1,s2)\n}\n\n//Provides: caml_string_equal\n//Requires: caml_bytes_equal\n//If: !js-string\nfunction caml_string_equal(s1, s2) {\n  return caml_bytes_equal(s1,s2)\n}\n\n//Provides: caml_string_lessequal\n//Requires: caml_bytes_lessequal\n//If: !js-string\nfunction caml_string_lessequal(s1, s2) {\n  return caml_bytes_lessequal(s1,s2)\n}\n\n//Provides: caml_string_lessthan\n//Requires: caml_bytes_lessthan\n//If: !js-string\nfunction caml_string_lessthan(s1, s2) {\n  return caml_bytes_lessthan(s1,s2)\n}\n\n//Provides: caml_string_of_bytes\n//If: !js-string\nfunction caml_string_of_bytes(s) { return s }\n\n//Provides: caml_bytes_of_string const\n//If: !js-string\nfunction caml_bytes_of_string(s) { return s }\n\n//Provides: caml_string_of_jsbytes const\n//Requires: caml_bytes_of_jsbytes\n//If: !js-string\nfunction caml_string_of_jsbytes(s) { return caml_bytes_of_jsbytes(s); }\n\n//Provides: caml_jsbytes_of_string const\n//Requires: caml_convert_string_to_bytes\n//If: !js-string\nfunction caml_jsbytes_of_string(s) {\n  if ((s.t & 6) != 0 /* BYTES */) caml_convert_string_to_bytes(s);\n  return s.c }\n\n//Provides: caml_jsstring_of_string mutable (const)\n//If: !js-string\nfunction caml_jsstring_of_string(s){\n  return s.toString()\n}\n\n//Provides: caml_string_of_jsstring\n//Requires: caml_bytes_of_utf16_jsstring\n//If: !js-string\nfunction caml_string_of_jsstring (s) {\n  return caml_bytes_of_utf16_jsstring(s);\n}\n\n//Provides: caml_is_ml_bytes\n//Requires: MlBytes\nfunction caml_is_ml_bytes(s) {\n  return (s instanceof MlBytes);\n}\n\n//Provides: caml_is_ml_string\n//Requires: jsoo_is_ascii\n//If: js-string\nfunction caml_is_ml_string(s) {\n  return (typeof s === \"string\" && !/[^\\x00-\\xff]/.test(s));\n}\n\n//Provides: caml_is_ml_string\n//Requires: caml_is_ml_bytes\n//If: !js-string\nfunction caml_is_ml_string(s) {\n  return caml_is_ml_bytes(s);\n}\n\n// The functions below are deprecated\n\n//Provides: caml_js_to_byte_string const\n//Requires: caml_string_of_jsbytes\nfunction caml_js_to_byte_string(s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_new_string\n//Requires: caml_string_of_jsbytes\nfunction caml_new_string (s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_js_from_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_from_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_to_js_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_to_js_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_string_of_jsstring\nfunction caml_js_to_string (s) {\n  return caml_string_of_jsstring(s);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n  if(log2_ok) return Math.floor(Math.log2(x))\n  var i = 0;\n  if (x == 0) return -Infinity;\n  if(x>=1) {while (x>=2) {x/=2; i++} }\n  else {while (x < 1) {x*=2; i--} };\n  return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2, caml_int64_create_lo_mi_hi\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x))\n      return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);\n    if (x > 0)\n      return caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)\n    else\n      return caml_int64_create_lo_mi_hi(0, 0, 0xfff0)\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return caml_int64_create_lo_mi_hi(r1, r2, r3);\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new joo_global_object.Float32Array(1);\n  float32a[0] = x;\n  var int32a = new joo_global_object.Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_string_of_jsstring, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_string_of_jsstring(\"nan\");\n    return caml_string_of_jsstring ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2,prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n    var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_string_of_jsstring (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var lo = x.lo;\n  var mi = x.mi;\n  var hi = x.hi;\n  var exp = (hi & 0x7fff) >> 4;\n  if (exp == 2047) {\n    if ((lo|mi|(hi&0xf)) == 0)\n      return (hi & 0x8000)?(-Infinity):Infinity;\n    else\n      return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (lo*k+mi)*k+(hi&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (hi & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_nextafter_float const\n//Requires: caml_int64_float_of_bits, caml_int64_bits_of_float, caml_int64_add, caml_int64_sub,caml_int64_of_int32\nfunction caml_nextafter_float (x,y) {\n  if(isNaN(x) || isNaN(y)) return NaN;\n  if(x==y) return y;\n  if(x==0){\n    if(y < 0)\n      return -Math.pow(2, -1074)\n    else\n      return Math.pow(2, -1074)\n  }\n  var bits = caml_int64_bits_of_float(x);\n  var one = caml_int64_of_int32(1);\n  if ((x<y) == (x>0))\n    bits = caml_int64_add(bits, one)\n  else\n    bits = caml_int64_sub(bits, one)\n  return caml_int64_float_of_bits(bits);\n}\n\n//Provides: caml_trunc_float\nfunction caml_trunc_float(x){\n  return Math.trunc(x);\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new joo_global_object.Int32Array(1);\n  int32a[0] = x;\n  var float32a = new joo_global_object.Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = Math.max(-1023, jsoo_floor_log2(x) + 1);\n  x *= Math.pow(2,-exp);\n  while (x < 0.5) {\n    x *= 2;\n    exp--;\n  }\n  while (x >= 1) {\n    x *= 0.5;\n    exp++;\n  }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_signbit_float const\nfunction caml_signbit_float(x) {\n  if (x == 0) x = 1 / x;\n  return (x < 0)?1:0;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) {\n  var y = Math.exp(x), z = y - 1;\n  return (Math.abs(x)>1?z:(z==0?x:x*z/Math.log(y)));\n}\n\n//Provides: caml_log1p_float const\nfunction caml_log1p_float (x) {\n  var y = 1 + x, z = y - 1;\n  return (z==0?x:x*Math.log(y)/z);\n}\n\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) {\n  var x = Math.abs(x), y = Math.abs(y);\n  var a = Math.max(x, y), b = Math.min(x,y) / (a?a:1);\n  return (a * Math.sqrt(1 + b*b));\n}\n\n// FIX: these five functions only give approximate results.\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.LOG10E * Math.log(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return (Math.exp(x) + Math.exp(-x)) / 2; }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return (Math.exp(x) - Math.exp(-x)) / 2; }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) {\n  var y = Math.exp(x), z = Math.exp(-x);\n  return (y - z) / (y + z);\n}\n\n//Provides: caml_round_float\nfunction caml_round_float (x) { return Math.round(x); }\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  function toFixed(x,dp) {\n    if (Math.abs(x) < 1.0) {\n      return x.toFixed(dp);\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10,e);\n        x += (new Array(e+1)).join('0');\n        if(dp > 0) {\n          x = x + '.' + (new Array(dp+1)).join('0');\n        }\n        return x;\n      }\n      else return x.toFixed(dp)\n    }\n  }\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = toFixed(x, prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_jsbytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_jsbytes_of_string(s)\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n  //          1        2             3           4\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: MlInt64\n//Requires: caml_int64_offset, caml_raise_zero_divide\nfunction MlInt64 (lo,mi,hi) {\n  this.lo = lo & 0xffffff;\n  this.mi = mi & 0xffffff;\n  this.hi = hi & 0xffff;\n}\nMlInt64.prototype.caml_custom = \"_j\"\nMlInt64.prototype.copy = function () {\n  return new MlInt64(this.lo,this.mi,this.hi);\n}\n\nMlInt64.prototype.ucompare = function (x) {\n  if (this.hi > x.hi) return 1;\n  if (this.hi < x.hi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.compare = function (x) {\n  var hi = this.hi << 16;\n  var xhi = x.hi << 16;\n  if (hi > xhi) return 1;\n  if (hi < xhi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.neg = function () {\n  var lo = - this.lo;\n  var mi = - this.mi + (lo >> 24);\n  var hi = - this.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.add = function (x) {\n  var lo = this.lo + x.lo;\n  var mi = this.mi + x.mi + (lo >> 24);\n  var hi = this.hi + x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.sub = function (x) {\n  var lo = this.lo - x.lo;\n  var mi = this.mi - x.mi + (lo >> 24);\n  var hi = this.hi - x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.mul = function (x) {\n  var lo = this.lo * x.lo;\n  var mi = ((lo * caml_int64_offset) | 0) + this.mi * x.lo + this.lo * x.mi;\n  var hi = ((mi * caml_int64_offset) | 0) + this.hi * x.lo + this.mi * x.mi + this.lo * x.hi;\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.isZero = function () {\n  return (this.lo|this.mi|this.hi) == 0;\n}\nMlInt64.prototype.isNeg = function () {\n  return (this.hi << 16) < 0;\n}\nMlInt64.prototype.and = function (x) {\n  return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);\n}\nMlInt64.prototype.or = function (x) {\n  return new MlInt64(this.lo|x.lo, this.mi|x.mi, this.hi|x.hi);\n}\nMlInt64.prototype.xor = function (x) {\n  return new MlInt64(this.lo^x.lo, this.mi^x.mi, this.hi^x.hi);\n}\nMlInt64.prototype.shift_left = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24) {\n    return new MlInt64 (this.lo << s,\n                        (this.mi << s) | (this.lo >> (24 - s)),\n                        (this.hi << s) | (this.mi >> (24 - s)));\n  }\n  if (s < 48)\n    return new MlInt64 (0,\n                        this.lo << (s - 24),\n                        (this.mi << (s - 24)) | (this.lo >> (48 - s)));\n  return new MlInt64(0, 0, this.lo << (s - 48))\n}\nMlInt64.prototype.shift_right_unsigned = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (this.hi << (24 - s)),\n      (this.hi >> s));\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi >> (s - 24)),\n      0);\n  return new MlInt64 (this.hi >> (s - 48), 0, 0);\n}\nMlInt64.prototype.shift_right = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  var h = (this.hi << 16) >> 16;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (h << (24 - s)),\n      ((this.hi << 16) >> s) >>> 16);\n  var sign = (this.hi << 16) >> 31;\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi << 16) >> (s - 24) >> 16,\n      sign & 0xffff);\n  return new MlInt64 ((this.hi << 16) >> (s - 32), sign, sign);\n}\nMlInt64.prototype.lsl1 = function () {\n  this.hi = (this.hi << 1) | (this.mi >> 23);\n  this.mi = ((this.mi << 1) | (this.lo >> 23)) & 0xffffff;\n  this.lo = (this.lo << 1) & 0xffffff;\n}\nMlInt64.prototype.lsr1 = function () {\n  this.lo = ((this.lo >>> 1) | (this.mi << 23)) & 0xffffff;\n  this.mi = ((this.mi >>> 1) | (this.hi << 23)) & 0xffffff;\n  this.hi = this.hi >>> 1;\n}\nMlInt64.prototype.udivmod = function (x) {\n  var offset = 0;\n  var modulus = this.copy();\n  var divisor = x.copy();\n  var quotient = new MlInt64(0,0,0);\n  while (modulus.ucompare(divisor) > 0) {\n    offset++;\n    divisor.lsl1();\n  }\n  while (offset >= 0) {\n    offset --;\n    quotient.lsl1();\n    if (modulus.ucompare(divisor) >= 0) {\n      quotient.lo ++;\n      modulus = modulus.sub(divisor);\n    }\n    divisor.lsr1();\n  }\n  return { quotient : quotient, modulus : modulus };\n}\nMlInt64.prototype.div = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi ^ y.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var q = x.udivmod(y).quotient;\n  if (sign & 0x8000) q = q.neg();\n  return q;\n}\nMlInt64.prototype.mod = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var r = x.udivmod(y).modulus;\n  if (sign & 0x8000) r = r.neg();\n  return r;\n}\nMlInt64.prototype.toInt = function () {\n  return this.lo | (this.mi << 24);\n}\nMlInt64.prototype.toFloat = function () {\n  return ((this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)) + this.lo;\n}\nMlInt64.prototype.toArray = function () {\n  return [this.hi >> 8,\n          this.hi & 0xff,\n          this.mi >> 16,\n          (this.mi >> 8) & 0xff,\n          this.mi & 0xff,\n          this.lo >> 16,\n          (this.lo >> 8) & 0xff,\n          this.lo & 0xff];\n}\nMlInt64.prototype.lo32 = function () {\n  return this.lo | ((this.mi & 0xff) << 24);\n}\nMlInt64.prototype.hi32 = function () {\n  return ((this.mi >>> 8) & 0xffff) | (this.hi << 16);\n}\n\n//Provides: caml_int64_ult const\nfunction caml_int64_ult(x,y) { return x.ucompare(y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y, total) { return x.compare(y) }\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) { return x.neg() }\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) { return x.add(y) }\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) { return x.sub(y) }\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) { return x.mul(y) }\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) { return +x.isZero(); }\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) { return +x.isNeg(); }\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) { return x.and(y); }\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) { return x.or(y); }\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) { return x.xor(y) }\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) { return x.shift_left(s) }\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) { return x.shift_right_unsigned(s) }\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) { return x.shift_right(s) }\n\n//Provides: caml_int64_div const\nfunction caml_int64_div (x, y) { return x.div(y) }\n\n//Provides: caml_int64_mod const\nfunction caml_int64_mod (x, y) { return x.mod(y) }\n\n//Provides: caml_int64_of_int32 const\n//Requires: MlInt64\nfunction caml_int64_of_int32 (x) {\n  return new MlInt64(x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff)\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) { return x.toInt() }\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) { return x.toFloat () }\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset, MlInt64\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return new MlInt64(\n    x & 0xffffff,\n    Math.floor(x * caml_int64_offset) & 0xffffff,\n    Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = x.udivmod(wbase);\n    x = p.quotient;\n    buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit\n//Requires: caml_int64_of_int32, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get, MlInt64\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n      new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient;\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_create_lo_mi_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_mi_hi(lo, mi, hi){\n  return new MlInt64(lo, mi, hi)\n}\n//Provides: caml_int64_create_lo_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_hi(lo, hi){\n  return new MlInt64 (\n    lo & 0xffffff,\n    ((lo >>> 24) & 0xff) | ((hi & 0xffff) << 8),\n    (hi >>> 16) & 0xffff);\n}\n//Provides: caml_int64_lo32 const\nfunction caml_int64_lo32(v){ return v.lo32() }\n\n//Provides: caml_int64_hi32 const\nfunction caml_int64_hi32(v){ return v.hi32() }\n\n//Provides: caml_int64_of_bytes const\n//Requires: MlInt64\nfunction caml_int64_of_bytes(a) {\n  return new MlInt64(a[7] << 0 | (a[6] << 8) | (a[5] << 16),\n                     a[4] << 0 | (a[3] << 8) | (a[2] << 16),\n                     a[1] << 0 | (a[0] << 8));\n}\n//Provides: caml_int64_to_bytes const\nfunction caml_int64_to_bytes(x) { return x.toArray() }\n\n//Provides: caml_int64_hash const\nfunction caml_int64_hash(v){\n  return (v.lo32()) ^ (v.hi32())\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard, Andy Ray\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n//\n// Bigarray.\n//\n// - all bigarray types including Int64 and Complex.\n// - fortran + c layouts\n// - sub/slice/reshape\n// - retain fast path for 1d array access\n\n//Provides: caml_ba_init const\nfunction caml_ba_init() {\n  return 0;\n}\n\n//Provides: caml_ba_get_size\n//Requires: caml_invalid_argument\nfunction caml_ba_get_size(dims) {\n  var n_dims = dims.length;\n  var size = 1;\n  for (var i = 0; i < n_dims; i++) {\n    if (dims[i] < 0)\n      caml_invalid_argument(\"Bigarray.create: negative dimension\");\n    size = size * dims[i];\n  }\n  return size;\n}\n\n//Provides: caml_ba_get_size_per_element\nfunction caml_ba_get_size_per_element(kind){\n  switch(kind){\n  case 7: case 10: case 11: return 2;\n  default: return 1;\n  }\n}\n\n//Provides: caml_ba_create_buffer\n//Requires: caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_buffer(kind, size){\n  var g = joo_global_object;\n  var view;\n  switch(kind){\n  case 0:  view = g.Float32Array; break;\n  case 1:  view = g.Float64Array; break;\n  case 2:  view = g.Int8Array; break;\n  case 3:  view = g.Uint8Array; break;\n  case 4:  view = g.Int16Array; break;\n  case 5:  view = g.Uint16Array; break;\n  case 6:  view = g.Int32Array; break;\n  case 7:  view = g.Int32Array; break;\n  case 8:  view = g.Int32Array; break;\n  case 9:  view = g.Int32Array; break;\n  case 10: view = g.Float32Array; break;\n  case 11: view = g.Float64Array; break;\n  case 12: view = g.Uint8Array; break;\n  }\n  if (!view) caml_invalid_argument(\"Bigarray.create: unsupported kind\");\n  var data = new view(size * caml_ba_get_size_per_element(kind));\n  return data;\n}\n\n//Provides: Ml_Bigarray\n//Requires: caml_array_bound_error, caml_invalid_argument\n//Requires: caml_int64_create_lo_hi, caml_int64_hi32, caml_int64_lo32\nfunction Ml_Bigarray (kind, layout, dims, buffer) {\n\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data = buffer;\n}\n\nMl_Bigarray.prototype.caml_custom = \"_bigarray\";\n\nMl_Bigarray.prototype.offset = function (arg) {\n  var ofs = 0;\n  if(typeof arg === \"number\") arg = [arg];\n  if (! (arg instanceof Array)) caml_invalid_argument(\"bigarray.js: invalid offset\");\n  if (this.dims.length != arg.length)\n    caml_invalid_argument(\"Bigarray.get/set: bad number of dimensions\");\n  if(this.layout == 0 /* c_layout */) {\n    for (var i = 0; i < this.dims.length; i++) {\n      if (arg[i] < 0 || arg[i] >= this.dims[i])\n        caml_array_bound_error();\n      ofs = (ofs * this.dims[i]) + arg[i];\n    }\n  } else {\n    for (var i = this.dims.length - 1; i >= 0; i--) {\n      if (arg[i] < 1 || arg[i] > this.dims[i]){\n        caml_array_bound_error();\n      }\n      ofs = (ofs * this.dims[i]) + (arg[i] - 1);\n    }\n  }\n  return ofs;\n}\n\nMl_Bigarray.prototype.get = function (ofs) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var l = this.data[ofs * 2 + 0];\n    var h = this.data[ofs * 2 + 1];\n    return caml_int64_create_lo_hi(l,h);\n  case 10: case 11:\n    // Complex32, Complex64\n    var r = this.data[ofs * 2 + 0];\n    var i = this.data[ofs * 2 + 1];\n    return [254, r, i];\n  default:\n    return this.data[ofs]\n  }\n}\n\nMl_Bigarray.prototype.set = function (ofs,v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    this.data[ofs * 2 + 0] = caml_int64_lo32(v);\n    this.data[ofs * 2 + 1] = caml_int64_hi32(v);\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    this.data[ofs * 2 + 0] = v[1];\n    this.data[ofs * 2 + 1] = v[2];\n    break;\n  default:\n    this.data[ofs] = v;\n    break;\n  }\n  return 0\n}\n\n\nMl_Bigarray.prototype.fill = function (v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var a = caml_int64_lo32(v);\n    var b = caml_int64_hi32(v);\n    if(a == b){\n      this.data.fill(a);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? a : b;\n      }\n    }\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    var im = v[1];\n    var re = v[2];\n    if(im == re){\n      this.data.fill(im);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? im : re;\n      }\n    }\n    break;\n  default:\n    this.data.fill(v);\n    break;\n  }\n}\n\n\nMl_Bigarray.prototype.compare = function (b, total) {\n  if (this.layout != b.layout || this.kind != b.kind) {\n    var k1 = this.kind | (this.layout << 8);\n    var k2 =    b.kind | (b.layout << 8);\n    return k2 - k1;\n  }\n  if (this.dims.length != b.dims.length) {\n    return b.dims.length - this.dims.length;\n  }\n  for (var i = 0; i < this.dims.length; i++)\n    if (this.dims[i] != b.dims[i])\n      return (this.dims[i] < b.dims[i]) ? -1 : 1;\n  switch (this.kind) {\n  case 0:\n  case 1:\n  case 10:\n  case 11:\n    // Floats\n    var x, y;\n    for (var i = 0; i < this.data.length; i++) {\n      x = this.data[i];\n      y = b.data[i];\n      if (x < y)\n        return -1;\n      if (x > y)\n        return 1;\n      if (x != y) {\n        if (!total) return NaN;\n        if (x == x) return 1;\n        if (y == y) return -1;\n      }\n    }\n    break;\n  case 7:\n    // Int64\n    for (var i = 0; i < this.data.length; i+=2) {\n      // Check highest bits first\n      if (this.data[i+1] < b.data[i+1])\n        return -1;\n      if (this.data[i+1] > b.data[i+1])\n        return 1;\n      if ((this.data[i] >>> 0) < (b.data[i] >>> 0))\n        return -1;\n      if ((this.data[i] >>> 0) > (b.data[i] >>> 0))\n        return 1;\n    }\n    break;\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n  case 6:\n  case 8:\n  case 9:\n  case 12:\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i] < b.data[i])\n        return -1;\n      if (this.data[i] > b.data[i])\n        return 1;\n    }\n    break;\n  }\n  return 0;\n}\n\n//Provides: Ml_Bigarray_c_1_1\n//Requires: Ml_Bigarray, caml_array_bound_error, caml_invalid_argument\nfunction Ml_Bigarray_c_1_1(kind, layout, dims, buffer) {\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data   = buffer;\n}\n\nMl_Bigarray_c_1_1.prototype = new Ml_Bigarray()\nMl_Bigarray_c_1_1.prototype.offset = function (arg) {\n  if(typeof arg !== \"number\"){\n    if((arg instanceof Array) && arg.length == 1)\n      arg = arg[0];\n    else caml_invalid_argument(\"Ml_Bigarray_c_1_1.offset\");\n  }\n  if (arg < 0 || arg >= this.dims[0])\n    caml_array_bound_error();\n  return arg;\n}\n\nMl_Bigarray_c_1_1.prototype.get = function (ofs) {\n  return this.data[ofs];\n}\n\nMl_Bigarray_c_1_1.prototype.set = function (ofs,v) {\n  this.data[ofs] = v;\n  return 0\n}\n\nMl_Bigarray_c_1_1.prototype.fill = function (v) {\n  this.data.fill(v);\n  return 0\n}\n\n//Provides: caml_ba_compare\nfunction caml_ba_compare(a,b,total){\n  return a.compare(b,total)\n}\n\n//Provides: caml_ba_create_unsafe\n//Requires: Ml_Bigarray, Ml_Bigarray_c_1_1, caml_ba_get_size, caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_unsafe(kind, layout, dims, data){\n  var size_per_element = caml_ba_get_size_per_element(kind);\n  if(caml_ba_get_size(dims) * size_per_element != data.length) {\n    caml_invalid_argument(\"length doesn't match dims\");\n  }\n  if(layout == 0 && // c_layout\n     dims.length == 1 && // Array1\n     size_per_element == 1) // 1-to-1 mapping\n    return new Ml_Bigarray_c_1_1(kind, layout, dims, data);\n  return new Ml_Bigarray(kind, layout, dims, data);\n\n}\n\n\n//Provides: caml_ba_create\n//Requires: caml_js_from_array\n//Requires: caml_ba_get_size, caml_ba_create_unsafe\n//Requires: caml_ba_create_buffer\nfunction caml_ba_create(kind, layout, dims_ml) {\n  var dims = caml_js_from_array(dims_ml);\n  var data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Provides: caml_ba_change_layout\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_change_layout(ba, layout) {\n  if(ba.layout == layout) return ba;\n  var new_dims = []\n  for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[ba.dims.length - i - 1];\n  return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);\n}\n\n//Provides: caml_ba_kind\nfunction caml_ba_kind(ba) {\n  return ba.kind;\n}\n\n//Provides: caml_ba_layout\nfunction caml_ba_layout(ba) {\n  return ba.layout;\n}\n\n//Provides: caml_ba_num_dims\nfunction caml_ba_num_dims(ba) {\n  return ba.dims.length;\n}\n\n//Provides: caml_ba_dim\n//Requires: caml_invalid_argument\nfunction caml_ba_dim(ba, i) {\n  if (i < 0 || i >= ba.dims.length)\n    caml_invalid_argument(\"Bigarray.dim\");\n  return ba.dims[i];\n}\n\n//Provides: caml_ba_dim_1\n//Requires: caml_ba_dim\nfunction caml_ba_dim_1(ba) {\n  return caml_ba_dim(ba, 0);\n}\n\n//Provides: caml_ba_dim_2\n//Requires: caml_ba_dim\nfunction caml_ba_dim_2(ba) {\n  return caml_ba_dim(ba, 1);\n}\n\n//Provides: caml_ba_dim_3\n//Requires: caml_ba_dim\nfunction caml_ba_dim_3(ba) {\n  return caml_ba_dim(ba, 2);\n}\n\n//Provides: caml_ba_get_generic\n//Requires: caml_js_from_array\nfunction caml_ba_get_generic(ba, i) {\n  var ofs = ba.offset(caml_js_from_array(i));\n  return ba.get(ofs);\n}\n\n//Provides: caml_ba_uint8_get16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get16(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs);\n  var b2 = ba.get(ofs + 1);\n  return (b1 | (b2 << 8));\n}\n\n//Provides: caml_ba_uint8_get32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get32(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  return ( (b1 << 0)  |\n           (b2 << 8)  |\n           (b3 << 16) |\n           (b4 << 24) );\n}\n\n//Provides: caml_ba_uint8_get64\n//Requires: caml_array_bound_error, caml_int64_of_bytes\nfunction caml_ba_uint8_get64(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  var b5 = ba.get(ofs+4);\n  var b6 = ba.get(ofs+5);\n  var b7 = ba.get(ofs+6);\n  var b8 = ba.get(ofs+7);\n  return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1]);\n}\n\n//Provides: caml_ba_get_1\nfunction caml_ba_get_1(ba, i0) {\n  return ba.get(ba.offset(i0));\n}\n\n//Provides: caml_ba_get_2\nfunction caml_ba_get_2(ba, i0, i1) {\n  return ba.get(ba.offset([i0,i1]));\n}\n\n//Provides: caml_ba_get_3\nfunction caml_ba_get_3(ba, i0, i1, i2) {\n  return ba.get(ba.offset([i0,i1,i2]));\n}\n\n//Provides: caml_ba_set_generic\n//Requires: caml_js_from_array\nfunction caml_ba_set_generic(ba, i, v) {\n  ba.set(ba.offset(caml_js_from_array(i)), v);\n  return 0\n}\n\n//Provides: caml_ba_uint8_set16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set16(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v        & 0xff);\n  ba.set(ofs+1, (v >>> 8) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set32(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v         & 0xff);\n  ba.set(ofs+1, (v >>> 8)  & 0xff);\n  ba.set(ofs+2, (v >>> 16) & 0xff);\n  ba.set(ofs+3, (v >>> 24) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set64\n//Requires: caml_array_bound_error, caml_int64_to_bytes\nfunction caml_ba_uint8_set64(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var v = caml_int64_to_bytes(v);\n  for(var i = 0; i < 8; i++) ba.set(ofs+i, v[7-i])\n  return 0;\n}\n\n//Provides: caml_ba_set_1\nfunction caml_ba_set_1(ba, i0, v) {\n  ba.set(ba.offset(i0), v);\n  return 0\n}\n\n//Provides: caml_ba_set_2\nfunction caml_ba_set_2(ba, i0, i1, v) {\n  ba.set(ba.offset([i0,i1]), v);\n  return 0;\n}\n\n//Provides: caml_ba_set_3\nfunction caml_ba_set_3(ba, i0, i1, i2, v) {\n  ba.set(ba.offset([i0,i1,i2]), v);\n  return 0;\n}\n\n//Provides: caml_ba_fill\nfunction caml_ba_fill(ba, v) {\n  ba.fill(v);\n  return 0;\n}\n\n//Provides: caml_ba_blit\n//Requires: caml_invalid_argument\nfunction caml_ba_blit(src, dst) {\n  if (dst.dims.length != src.dims.length)\n    caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  for (var i = 0; i < dst.dims.length; i++)\n    if (dst.dims[i] != src.dims[i])\n      caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  dst.data.set(src.data);\n  return 0;\n}\n\n//Provides: caml_ba_sub\n//Requires: caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_sub(ba, ofs, len) {\n  var changed_dim;\n  var mul = 1;\n  if (ba.layout == 0) {\n    for (var i = 1; i < ba.dims.length; i++)\n      mul = mul * ba.dims[i];\n    changed_dim = 0;\n  } else {\n    for (var i = 0; i < (ba.dims.length - 1); i++)\n      mul = mul * ba.dims[i];\n    changed_dim = ba.dims.length - 1;\n    ofs = ofs - 1;\n  }\n  if (ofs < 0 || len < 0 || (ofs + len) > ba.dims[changed_dim]){\n    caml_invalid_argument(\"Bigarray.sub: bad sub-array\");\n  }\n  var new_dims = [];\n  for (var i = 0; i < ba.dims.length; i++)\n    new_dims[i] = ba.dims[i];\n  new_dims[changed_dim] = len;\n  mul *= caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);\n}\n\n//Provides: caml_ba_slice\n//Requires: caml_js_from_array, caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_slice(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var num_inds = vind.length;\n  var index = [];\n  var sub_dims = [];\n  var ofs;\n\n  if (num_inds > ba.dims.length)\n    caml_invalid_argument(\"Bigarray.slice: too many indices\");\n\n  // Compute offset and check bounds\n  if (ba.layout == 0) {\n    for (var i = 0; i < num_inds; i++)\n      index[i] = vind[i];\n    for (; i < ba.dims.length; i++)\n      index[i] = 0;\n    sub_dims = ba.dims.slice(num_inds);\n  } else {\n    for (var i = 0; i < num_inds; i++)\n      index[ba.dims.length - num_inds + i] = vind[i];\n    for (var i = 0; i < ba.dims.length - num_inds; i++)\n      index[i] = 1;\n    sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);\n  }\n  ofs = ba.offset(index);\n  var size = caml_ba_get_size(sub_dims);\n  var size_per_element = caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * size_per_element, (ofs + size) * size_per_element);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);\n}\n\n//Provides: caml_ba_reshape\n//Requires: caml_js_from_array, caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\nfunction caml_ba_reshape(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var new_dim = [];\n  var num_dims = vind.length;\n\n  if (num_dims < 0 || num_dims > 16){\n    caml_invalid_argument(\"Bigarray.reshape: bad number of dimensions\");\n  }\n  var num_elts = 1;\n  for (var i = 0; i < num_dims; i++) {\n    new_dim[i] = vind[i];\n    if (new_dim[i] < 0)\n      caml_invalid_argument(\"Bigarray.reshape: negative dimension\");\n    num_elts = num_elts * new_dim[i];\n  }\n\n  var size = caml_ba_get_size(ba.dims);\n  // Check that sizes agree\n  if (num_elts != size)\n    caml_invalid_argument(\"Bigarray.reshape: size mismatch\");\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);\n}\n\n//Provides: caml_ba_serialize\n//Requires: caml_int64_bits_of_float, caml_int64_to_bytes\n//Requires: caml_int32_bits_of_float\nfunction caml_ba_serialize(writer, ba, sz) {\n  writer.write(32, ba.dims.length);\n  writer.write(32, (ba.kind | (ba.layout << 8)));\n  for(var i = 0; i < ba.dims.length; i++) writer.write(32,ba.dims[i]);\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(8, ba.data[i]);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(16, ba.data[i]);\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    writer.write(8,0);\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 7:  // Int32Array (int64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var b = caml_int64_to_bytes(ba.get(i));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 1:  // Float64Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int32_bits_of_float(ba.get(i));\n      writer.write(32, b);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var j = ba.get(i);\n      writer.write(32, caml_int32_bits_of_float(j[1]));\n      writer.write(32, caml_int32_bits_of_float(j[2]));\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var complex = ba.get(i);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  }\n  sz[0] = (4 + ba.dims.length) * 4;\n  sz[1] = (4 + ba.dims.length) * 8;\n}\n\n//Provides: caml_ba_deserialize\n//Requires: caml_ba_create_unsafe, caml_failwith\n//Requires: caml_ba_get_size\n//Requires: caml_int64_of_bytes, caml_int64_float_of_bits\n//Requires: caml_int32_float_of_bits\n//Requires: caml_ba_create_buffer\nfunction caml_ba_deserialize(reader, sz){\n  var num_dims = reader.read32s();\n  if (num_dims < 0 || num_dims > 16)\n    caml_failwith(\"input_value: wrong number of bigarray dimensions\");\n  var tag = reader.read32s();\n  var kind = tag & 0xff\n  var layout = (tag >> 8) & 1;\n  var dims = []\n  for (var i = 0; i < num_dims; i++) dims.push(reader.read32u());\n  var size = caml_ba_get_size(dims);\n  var data = caml_ba_create_buffer(kind, size);\n  var ba = caml_ba_create_unsafe(kind, layout, dims, data);\n  switch(kind){\n  case 2:  //Int8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8s();\n    }\n    break;\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8u();\n    }\n    break;\n  case 4:  // Int16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16s();\n    }\n    break;\n  case 5:  // Uint16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16u();\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    var sixty = reader.read8u();\n    if(sixty) caml_failwith(\"input_value: cannot read bigarray with 64-bit OCaml ints\");\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 7: // (int64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var int64 = caml_int64_of_bytes(t);\n      ba.set(i,int64);\n    }\n    break;\n  case 1:  // Float64Array\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,f);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < size; i++){\n      var f = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,f);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < size; i++){\n      var re = caml_int32_float_of_bits(reader.read32s());\n      var im = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,[254,re,im]);\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,[254,re,im]);\n    }\n    break\n  }\n  sz[0] = (4 + num_dims) * 4;\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Deprecated\n//Provides: caml_ba_create_from\n//Requires: caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size_per_element\nfunction caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){\n  if(data2 || caml_ba_get_size_per_element(kind) == 2){\n    caml_invalid_argument(\"caml_ba_create_from: use return caml_ba_create_unsafe\");\n  }\n  return caml_ba_create_unsafe(kind, layout, dims, data1);\n}\n\n//Provides: caml_ba_hash const\n//Requires: caml_ba_get_size, caml_hash_mix_int, caml_hash_mix_float\nfunction caml_ba_hash(ba){\n  var num_elts = caml_ba_get_size(ba.dims);\n  var h = 0;\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    if(num_elts > 256) num_elts = 256;\n    var w = 0, i =0;\n    for(i = 0; i + 4 <= ba.data.length; i+=4){\n      w = ba.data[i+0] | (ba.data[i+1] << 8) | (ba.data[i+2] << 16) | (ba.data[i+3] << 24);\n      h = caml_hash_mix_int(h,w);\n    }\n    w = 0;\n    switch (num_elts & 3) {\n    case 3: w  = ba.data[i+2] << 16;    /* fallthrough */\n    case 2: w |= ba.data[i+1] << 8;     /* fallthrough */\n    case 1: w |= ba.data[i+0];\n      h = caml_hash_mix_int(h, w);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    if(num_elts > 128) num_elts = 128;\n    var w = 0, i =0;\n    for(i = 0; i + 2 <= ba.data.length; i+=2){\n      w = ba.data[i+0] | (ba.data[i+1] << 16);\n      h = caml_hash_mix_int(h,w);\n    }\n    if ((num_elts & 1) != 0)\n      h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 6:  // Int32Array (int32)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 7:  // Int32Array (int64)\n    if (num_elts > 32) num_elts = 32;\n    num_elts *= 2\n    for (var i = 0; i < num_elts; i++) {\n      h = caml_hash_mix_int(h, ba.data[i]);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    num_elts *=2; /* fallthrough */\n  case 0:  // Float32Array\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  case 11: // Float64Array (complex64)\n    num_elts *=2; /* fallthrough */\n  case 1:  // Float64Array\n    if (num_elts > 32) num_elts = 32;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  }\n  return h;\n}\n\n//Provides: caml_ba_to_typed_array mutable\nfunction caml_ba_to_typed_array(ba){\n  return ba.data;\n}\n\n//Provides: caml_ba_kind_of_typed_array mutable\n//Requires: caml_invalid_argument\nfunction caml_ba_kind_of_typed_array(ta){\n  var g = joo_global_object;\n  var kind;\n  if (ta instanceof g.Float32Array) kind = 0;\n  else if (ta instanceof g.Float64Array) kind = 1;\n  else if (ta instanceof g.Int8Array) kind = 2;\n  else if (ta instanceof g.Uint8Array) kind = 3;\n  else if (ta instanceof g.Int16Array) kind = 4;\n  else if (ta instanceof g.Uint16Array) kind = 5;\n  else if (ta instanceof g.Int32Array) kind = 6;\n  else if (ta instanceof g.Uint32Array) kind = 6;\n  else caml_invalid_argument(\"caml_ba_kind_of_typed_array: unsupported kind\");\n  return kind;\n}\n\n//Provides: caml_ba_from_typed_array mutable\n//Requires: caml_ba_kind_of_typed_array\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_from_typed_array(ta){\n  var kind = caml_ba_kind_of_typed_array(ta);\n  return caml_ba_create_unsafe(kind, 0, [ta.length], ta);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_jsbytes_of_string(fmt) == \"%d\") return caml_string_of_jsbytes(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;\n  if (len > 0) {\n    switch (caml_string_unsafe_get(s,i)) {\n    case 45: i++; sign = -1; break;\n    case 43: i++; sign = 1; break;\n    }\n  }\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    case 117: case 85: i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_mul const\nfunction caml_mul(a,b){\n  return Math.imul(a,b);\n}\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\n//Requires: caml_int64_to_bytes, caml_int64_of_bytes\nfunction caml_int64_bswap(x) {\n  var y = caml_int64_to_bytes(x);\n  return caml_int64_of_bytes([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Hashtbl\n\n//Provides: caml_hash_univ_param mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_convert_string_to_bytes\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float, caml_custom_ops\n//Requires: caml_ml_bytes_length, caml_jsbytes_of_string\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (caml_is_ml_bytes(obj)) {\n      count --;\n      switch (obj.t & 6) {\n      default: /* PARTIAL */\n        caml_convert_string_to_bytes(obj);\n      case 0: /* BYTES */\n        for (var b = obj.c, l = caml_ml_bytes_length(obj), i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n        break;\n      case 2: /* ARRAY */\n        for (var a = obj.c, l = caml_ml_bytes_length(obj), i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (caml_is_ml_string(obj)) {\n        var jsbytes = caml_jsbytes_of_string(obj);\n        for (var b = jsbytes, l = jsbytes.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (typeof obj === \"string\") {\n        for (var b = obj, l = obj.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    } else if(obj && obj.caml_custom) {\n      if(caml_custom_ops[obj.caml_custom] && caml_custom_ops[obj.caml_custom].hash) {\n        var h = caml_custom_ops[obj.caml_custom].hash(obj) | 0;\n        hash_accu = (hash_accu * 65599 + h) | 0;\n      }\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int64\nfunction caml_hash_mix_float (h, v0) {\n  return caml_hash_mix_int64(h, caml_int64_bits_of_float (v0));\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\n//Requires: caml_int64_lo32, caml_int64_hi32\nfunction caml_hash_mix_int64 (h, v) {\n  h = caml_hash_mix_int(h, caml_int64_lo32(v));\n  h = caml_hash_mix_int(h, caml_int64_hi32(v));\n  return h;\n}\n\n//Provides: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_jsbytes(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n      | (s.charCodeAt(i+1) << 8)\n      | (s.charCodeAt(i+2) << 16)\n      | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1:\n    w |= s.charCodeAt(i);\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_bytes_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes\n//Requires: caml_convert_string_to_bytes\n//Requires: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_bytes_arr\nfunction caml_hash_mix_bytes(h, v) {\n  switch (v.t & 6) {\n  default:\n    caml_convert_string_to_bytes (v);\n  case 0: /* BYTES */\n    h = caml_hash_mix_jsbytes(h, v.c);\n    break;\n  case 2: /* ARRAY */\n    h = caml_hash_mix_bytes_arr(h, v.c);\n  }\n  return h\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_hash_mix_jsbytes, caml_jsbytes_of_string\nfunction caml_hash_mix_string(h, v) {\n  return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));\n}\n\n\n//Provides: caml_hash mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_float, caml_hash_mix_string, caml_hash_mix_bytes, caml_custom_ops\n//Requires: caml_hash_mix_jsbytes\nfunction caml_hash (count, limit, seed, obj) {\n  var queue, rd, wr, sz, num, h, v, i, len;\n  sz = limit;\n  if (sz < 0 || sz > 256) sz = 256;\n  num = count;\n  h = seed;\n  queue = [obj]; rd = 0; wr = 1;\n  while (rd < wr && num > 0) {\n    v = queue[rd++];\n    if (v && v.caml_custom){\n      if(caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash) {\n        var hh = caml_custom_ops[v.caml_custom].hash(v);\n        h = caml_hash_mix_int (h, hh);\n        num --;\n      }\n    }\n    else if (v instanceof Array && v[0] === (v[0]|0)) {\n      switch (v[0]) {\n      case 248:\n        // Object\n        h = caml_hash_mix_int(h, v[2]);\n        num--;\n        break;\n      case 250:\n        // Forward\n        queue[--rd] = v[1];\n        break;\n      default:\n        var tag = ((v.length - 1) << 10) | v[0];\n        h = caml_hash_mix_int(h, tag);\n        for (i = 1, len = v.length; i < len; i++) {\n          if (wr >= sz) break;\n          queue[wr++] = v[i];\n        }\n        break;\n      }\n    } else if (caml_is_ml_bytes(v)) {\n      h = caml_hash_mix_bytes(h,v)\n      num--;\n    } else if (caml_is_ml_string(v)) {\n      h = caml_hash_mix_string(h,v)\n      num--;\n    } else if (typeof v === \"string\") {\n      h = caml_hash_mix_jsbytes(h,v)\n      num--;\n    } else if (v === (v|0)) {\n      // Integer\n      h = caml_hash_mix_int(h, v+v+1);\n      num--;\n    } else if (v === +v) {\n      // Float\n      h = caml_hash_mix_float(h,v);\n      num--;\n    }\n  }\n  h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_marshal_constants\nvar caml_marshal_constants = {\n  PREFIX_SMALL_BLOCK:         0x80,\n  PREFIX_SMALL_INT:           0x40,\n  PREFIX_SMALL_STRING:        0x20,\n  CODE_INT8:                  0x00,\n  CODE_INT16:                 0x01,\n  CODE_INT32:                 0x02,\n  CODE_INT64:                 0x03,\n  CODE_SHARED8:               0x04,\n  CODE_SHARED16:              0x05,\n  CODE_SHARED32:              0x06,\n  CODE_BLOCK32:               0x08,\n  CODE_BLOCK64:               0x13,\n  CODE_STRING8:               0x09,\n  CODE_STRING32:              0x0A,\n  CODE_DOUBLE_BIG:            0x0B,\n  CODE_DOUBLE_LITTLE:         0x0C,\n  CODE_DOUBLE_ARRAY8_BIG:     0x0D,\n  CODE_DOUBLE_ARRAY8_LITTLE:  0x0E,\n  CODE_DOUBLE_ARRAY32_BIG:    0x0F,\n  CODE_DOUBLE_ARRAY32_LITTLE: 0x07,\n  CODE_CODEPOINTER:           0x10,\n  CODE_INFIXPOINTER:          0x11,\n  CODE_CUSTOM:                0x12,\n  CODE_CUSTOM_LEN:            0x18,\n  CODE_CUSTOM_FIXED:          0x19\n}\n\n\n//Provides: MlStringReader\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction MlStringReader (s, i) { this.s = caml_jsbytes_of_string(s); this.i = i; }\nMlStringReader.prototype = {\n  read8u:function () { return this.s.charCodeAt(this.i++); },\n  read8s:function () { return this.s.charCodeAt(this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 8) | s.charCodeAt(i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 24 >> 16) | s.charCodeAt(i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n            (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3)) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n      (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_string_of_jsbytes(this.s.substring(i, i + len));\n  }\n}\n\n//Provides: BigStringReader\n//Requires: caml_string_of_array, caml_ba_get_1\nfunction BigStringReader (bs, i) { this.s = bs; this.i = i; }\nBigStringReader.prototype = {\n  read8u:function () { return caml_ba_get_1(this.s,this.i++); },\n  read8s:function () { return caml_ba_get_1(this.s,this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 8) | caml_ba_get_1(s,i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 24 >> 16) | caml_ba_get_1(s,i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n            (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3)         ) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n      (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    var arr = new Array(len)\n    for(var j = 0; j < len; j++){\n      arr[j] = caml_ba_get_1(this.s, i+j);\n    }\n    this.i = i + len;\n    return caml_string_of_array(arr);\n  }\n}\n\n\n\n//Provides: caml_float_of_bytes\n//Requires: caml_int64_float_of_bits, caml_int64_of_bytes\nfunction caml_float_of_bytes (a) {\n  return caml_int64_float_of_bits (caml_int64_of_bytes (a));\n}\n\n//Provides: caml_input_value_from_string mutable\n//Requires: MlStringReader, caml_input_value_from_reader\nfunction caml_input_value_from_string(s,ofs) {\n  var reader = new MlStringReader (s, typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_input_value_from_bytes mutable\n//Requires: MlStringReader, caml_input_value_from_reader, caml_string_of_bytes\nfunction caml_input_value_from_bytes(s,ofs) {\n  var reader = new MlStringReader (caml_string_of_bytes(s), typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_int64_unmarshal\n//Requires: caml_int64_of_bytes\nfunction caml_int64_unmarshal(reader, size){\n  var t = new Array(8);;\n  for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n  size[0] = 8;\n  return caml_int64_of_bytes (t);\n}\n\n//Provides: caml_int64_marshal\n//Requires: caml_int64_to_bytes\nfunction caml_int64_marshal(writer, v, sizes) {\n  var b = caml_int64_to_bytes (v);\n  for (var i = 0; i < 8; i++) writer.write (8, b[i]);\n  sizes[0] = 8; sizes[1] = 8;\n}\n\n//Provides: caml_int32_unmarshal\nfunction caml_int32_unmarshal(reader, size){\n  size[0] = 4;\n  return reader.read32s ();\n}\n\n//Provides: caml_nativeint_unmarshal\n//Requires: caml_failwith\nfunction caml_nativeint_unmarshal(reader, size){\n  switch (reader.read8u ()) {\n  case 1:\n    size[0] = 4;\n    return reader.read32s ();\n  case 2:\n    caml_failwith(\"input_value: native integer value too large\");\n  default: caml_failwith(\"input_value: ill-formed native integer\");\n  }\n}\n\n//Provides: caml_custom_ops\n//Requires: caml_int64_unmarshal, caml_int64_marshal, caml_int64_compare, caml_int64_hash\n//Requires: caml_int32_unmarshal, caml_nativeint_unmarshal\n//Requires: caml_ba_serialize, caml_ba_deserialize, caml_ba_compare, caml_ba_hash\nvar caml_custom_ops =\n    {\"_j\": {\n      deserialize : caml_int64_unmarshal,\n      serialize  : caml_int64_marshal,\n      fixed_length : 8,\n      compare : caml_int64_compare,\n      hash : caml_int64_hash\n    },\n     \"_i\": {\n       deserialize : caml_int32_unmarshal,\n       fixed_length : 4,\n     },\n     \"_n\": {\n       deserialize : caml_nativeint_unmarshal,\n       fixed_length : 4,\n     },\n     \"_bigarray\":{\n       deserialize : caml_ba_deserialize,\n       serialize : caml_ba_serialize,\n       compare : caml_ba_compare,\n       hash: caml_ba_hash,\n     }\n    }\n\n//Provides: caml_input_value_from_reader mutable\n//Requires: caml_failwith\n//Requires: caml_float_of_bytes, caml_custom_ops\n\nfunction caml_input_value_from_reader(reader, ofs) {\n  var _magic = reader.read32u ()\n  var _block_len = reader.read32u ();\n  var num_objects = reader.read32u ();\n  var _size_32 = reader.read32u ();\n  var _size_64 = reader.read32u ();\n  var stack = [];\n  var intern_obj_table = (num_objects > 0)?[]:null;\n  var obj_counter = 0;\n  function intern_rec () {\n    var code = reader.read8u ();\n    if (code >= 0x40 /*cst.PREFIX_SMALL_INT*/) {\n      if (code >= 0x80 /*cst.PREFIX_SMALL_BLOCK*/) {\n        var tag = code & 0xF;\n        var size = (code >> 4) & 0x7;\n        var v = [tag];\n        if (size == 0) return v;\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        stack.push(v, size);\n        return v;\n      } else\n        return (code & 0x3F);\n    } else {\n      if (code >= 0x20/*cst.PREFIX_SMALL_STRING */) {\n        var len = code & 0x1F;\n        var v = reader.readstr (len);\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        return v;\n      } else {\n        switch(code) {\n        case 0x00: //cst.CODE_INT8:\n          return reader.read8s ();\n        case 0x01: //cst.CODE_INT16:\n          return reader.read16s ();\n        case 0x02: //cst.CODE_INT32:\n          return reader.read32s ();\n        case 0x03: //cst.CODE_INT64:\n          caml_failwith(\"input_value: integer too large\");\n          break;\n        case 0x04: //cst.CODE_SHARED8:\n          var offset = reader.read8u ();\n          return intern_obj_table[obj_counter - offset];\n        case 0x05: //cst.CODE_SHARED16:\n          var offset = reader.read16u ();\n          return intern_obj_table[obj_counter - offset];\n        case 0x06: //cst.CODE_SHARED32:\n          var offset = reader.read32u ();\n          return intern_obj_table[obj_counter - offset];\n        case 0x08: //cst.CODE_BLOCK32:\n          var header = reader.read32u ();\n          var tag = header & 0xFF;\n          var size = header >> 10;\n          var v = [tag];\n          if (size == 0) return v;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          stack.push(v, size);\n          return v;\n        case 0x13: //cst.CODE_BLOCK64:\n          caml_failwith (\"input_value: data block too large\");\n          break;\n        case 0x09: //cst.CODE_STRING8:\n          var len = reader.read8u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0A: //cst.CODE_STRING32:\n          var len = reader.read32u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0C: //cst.CODE_DOUBLE_LITTLE:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[7 - i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0B: //cst.CODE_DOUBLE_BIG:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0E: //cst.CODE_DOUBLE_ARRAY8_LITTLE:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0D: //cst.CODE_DOUBLE_ARRAY8_BIG:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x07: //cst.CODE_DOUBLE_ARRAY32_LITTLE:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0F: //cst.CODE_DOUBLE_ARRAY32_BIG:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x10: //cst.CODE_CODEPOINTER:\n        case 0x11: //cst.CODE_INFIXPOINTER:\n          caml_failwith (\"input_value: code pointer\");\n          break;\n        case 0x12: //cst.CODE_CUSTOM:\n        case 0x18: //cst.CODE_CUSTOM_LEN:\n        case 0x19: //cst.CODE_CUSTOM_FIXED:\n          var c, s = \"\";\n          while ((c = reader.read8u ()) != 0) s += String.fromCharCode (c);\n          var ops = caml_custom_ops[s];\n          var expected_size;\n          if(!ops)\n            caml_failwith(\"input_value: unknown custom block identifier\");\n          switch(code){\n          case 0x12: // cst.CODE_CUSTOM (deprecated)\n            break;\n          case 0x19: // cst.CODE_CUSTOM_FIXED\n            if(!ops.fixed_length)\n              caml_failwith(\"input_value: expected a fixed-size custom block\");\n            expected_size = ops.fixed_length;\n            break;\n          case 0x18: // cst.CODE_CUSTOM_LEN\n            expected_size = reader.read32u ();\n            // Skip size64\n            reader.read32s(); reader.read32s();\n            break;\n          }\n          var old_pos = reader.i;\n          var size = [0];\n          var v = ops.deserialize(reader, size);\n          if(expected_size != undefined){\n            if(expected_size != size[0])\n              caml_failwith(\"input_value: incorrect length of serialized custom block\");\n          }\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        default:\n          caml_failwith (\"input_value: ill-formed message\");\n        }\n      }\n    }\n  }\n  var res = intern_rec ();\n  while (stack.length > 0) {\n    var size = stack.pop();\n    var v = stack.pop();\n    var d = v.length;\n    if (d < size) stack.push(v, size);\n    v[d] = intern_rec ();\n  }\n  if (typeof ofs!=\"number\") ofs[0] = reader.i;\n  return res;\n}\n\n//Provides: caml_marshal_data_size mutable\n//Requires: caml_failwith, caml_bytes_unsafe_get\nfunction caml_marshal_data_size (s, ofs) {\n  function get32(s,i) {\n    return (caml_bytes_unsafe_get(s, i) << 24) |\n      (caml_bytes_unsafe_get(s, i + 1) << 16) |\n      (caml_bytes_unsafe_get(s, i + 2) << 8) |\n      caml_bytes_unsafe_get(s, i + 3);\n  }\n  if (get32(s, ofs) != (0x8495A6BE|0))\n    caml_failwith(\"Marshal.data_size: bad object\");\n  return (get32(s, ofs + 4));\n}\n\n//Provides: MlObjectTable\nvar MlObjectTable;\nif (typeof joo_global_object.WeakMap === 'undefined') {\n  MlObjectTable = function() {\n    /* polyfill (using linear search) */\n    function NaiveLookup(objs) { this.objs = objs; }\n    NaiveLookup.prototype.get = function(v) {\n      for (var i = 0; i < this.objs.length; i++) {\n        if (this.objs[i] === v) return i;\n      }\n    };\n    NaiveLookup.prototype.set = function() {\n      // Do nothing here. [MlObjectTable.store] will push to [this.objs] directly.\n    };\n\n    return function MlObjectTable() {\n      this.objs = []; this.lookup = new NaiveLookup(this.objs);\n    };\n  }();\n}\nelse {\n  MlObjectTable = function MlObjectTable() {\n    this.objs = []; this.lookup = new joo_global_object.WeakMap();\n  };\n}\n\nMlObjectTable.prototype.store = function(v) {\n  this.lookup.set(v, this.objs.length);\n  this.objs.push(v);\n}\n\nMlObjectTable.prototype.recall = function(v) {\n  var i = this.lookup.get(v);\n  return (i === undefined)\n    ? undefined : this.objs.length - i;   /* index is relative */\n}\n\n//Provides: caml_legacy_custom_code\n//Version: >= 4.08\nvar caml_legacy_custom_code = false\n\n//Provides: caml_legacy_custom_code\n//Version: < 4.08\nvar caml_legacy_custom_code = true\n\n//Provides: caml_output_val\n//Requires: caml_int64_to_bytes, caml_failwith\n//Requires: caml_int64_bits_of_float\n//Requires: caml_is_ml_bytes, caml_ml_bytes_length, caml_bytes_unsafe_get\n//Requires: caml_is_ml_string, caml_ml_string_length, caml_string_unsafe_get\n//Requires: MlObjectTable, caml_list_to_js_array, caml_legacy_custom_code, caml_custom_ops\n//Requires: caml_invalid_argument,caml_string_of_jsbytes\nvar caml_output_val = function (){\n  function Writer () { this.chunk = []; }\n  Writer.prototype = {\n    chunk_idx:20, block_len:0, obj_counter:0, size_32:0, size_64:0,\n    write:function (size, value) {\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_at:function (pos, size, value) {\n      var pos = pos;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[pos++] = (value >> i) & 0xFF;\n    },\n    write_code:function (size, code, value) {\n      this.chunk[this.chunk_idx++] = code;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_shared:function (offset) {\n      if (offset < (1 << 8)) this.write_code(8, 0x04 /*cst.CODE_SHARED8*/, offset);\n      else if (offset < (1 << 16)) this.write_code(16, 0x05 /*cst.CODE_SHARED16*/, offset);\n      else this.write_code(32, 0x06 /*cst.CODE_SHARED32*/, offset);\n    },\n    pos:function () { return this.chunk_idx },\n    finalize:function () {\n      this.block_len = this.chunk_idx - 20;\n      this.chunk_idx = 0;\n      this.write (32, 0x8495A6BE);\n      this.write (32, this.block_len);\n      this.write (32, this.obj_counter);\n      this.write (32, this.size_32);\n      this.write (32, this.size_64);\n      return this.chunk;\n    }\n  }\n  return function (v, flags) {\n    flags = caml_list_to_js_array(flags);\n\n    var no_sharing = (flags.indexOf(0 /*Marshal.No_sharing*/) !== -1),\n        closures =  (flags.indexOf(1 /*Marshal.Closures*/) !== -1);\n        /* Marshal.Compat_32 is redundant since integers are 32-bit anyway */\n\n    if (closures)\n      joo_global_object.console.warn(\"in caml_output_val: flag Marshal.Closures is not supported.\");\n\n    var writer = new Writer ();\n    var stack = [];\n    var intern_obj_table = no_sharing ? null : new MlObjectTable();\n\n    function memo(v) {\n      if (no_sharing) return false;\n      var existing_offset = intern_obj_table.recall(v);\n      if (existing_offset) { writer.write_shared(existing_offset); return true; }\n      else { intern_obj_table.store(v); return false; }\n    }\n\n    function extern_rec (v) {\n      if (v.caml_custom) {\n        if (memo(v)) return;\n        var name = v.caml_custom;\n        var ops = caml_custom_ops[name];\n        var sz_32_64 = [0,0];\n        if(!ops.serialize)\n          caml_invalid_argument(\"output_value: abstract value (Custom)\");\n        if(caml_legacy_custom_code) {\n          writer.write (8, 0x12 /*cst.CODE_CUSTOM*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          ops.serialize(writer, v, sz_32_64);\n        } else if(ops.fixed_length == undefined){\n          writer.write (8, 0x18 /*cst.CODE_CUSTOM_LEN*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var header_pos = writer.pos ();\n          for(var i = 0; i < 12; i++) {\n            writer.write(8, 0);\n          }\n          ops.serialize(writer, v, sz_32_64);\n          writer.write_at(header_pos, 32, sz_32_64[0]);\n          writer.write_at(header_pos + 4, 32, 0); // zero\n          writer.write_at(header_pos + 8, 32, sz_32_64[1]);\n        } else {\n          writer.write (8, 0x19 /*cst.CODE_CUSTOM_FIXED*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var old_pos = writer.pos();\n          ops.serialize(writer, v, sz_32_64);\n          if (ops.fixed_length != writer.pos() - old_pos)\n            caml_failwith(\"output_value: incorrect fixed sizes specified by \" + name);\n        }\n        writer.size_32 += 2 + ((sz_32_64[0] + 3) >> 2);\n        writer.size_64 += 2 + ((sz_32_64[1] + 7) >> 3);\n      }\n      else if (v instanceof Array && v[0] === (v[0]|0)) {\n        if (v[0] == 251) {\n          caml_failwith(\"output_value: abstract value (Abstract)\");\n        }\n        if (v.length > 1 && memo(v)) return;\n        if (v[0] < 16 && v.length - 1 < 8)\n          writer.write (8, 0x80 /*cst.PREFIX_SMALL_BLOCK*/ + v[0] + ((v.length - 1)<<4));\n        else\n          writer.write_code(32, 0x08 /*cst.CODE_BLOCK32*/, ((v.length-1) << 10) | v[0]);\n        writer.size_32 += v.length;\n        writer.size_64 += v.length;\n        if (v.length > 1) stack.push (v, 1);\n      } else if (caml_is_ml_bytes(v)) {\n        if(!(caml_is_ml_bytes(caml_string_of_jsbytes(\"\")))) {\n          caml_failwith(\"output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]\");\n        }\n        if (memo(v)) return;\n        var len = caml_ml_bytes_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_bytes_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else if (caml_is_ml_string(v)) {\n        var len = caml_ml_string_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_string_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else {\n        if (v != (v|0)){\n          var type_of_v = typeof v;\n          //\n          // If a float happens to be an integer it is serialized as an integer\n          // (Js_of_ocaml cannot tell whether the type of an integer number is\n          // float or integer.) This can result in unexpected crashes when\n          // unmarshalling using the standard runtime. It seems better to\n          // systematically fail on marshalling.\n          //\n          //          if(type_of_v != \"number\")\n          caml_failwith(\"output_value: abstract value (\"+type_of_v+\")\");\n          //          var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));\n          //          writer.write (8, 0x0B /*cst.CODE_DOUBLE_BIG*/);\n          //          for(var i = 0; i<8; i++){writer.write(8,t[i])}\n        }\n        else if (v >= 0 && v < 0x40) {\n          writer.write (8, 0X40 /*cst.PREFIX_SMALL_INT*/ + v);\n        } else {\n          if (v >= -(1 << 7) && v < (1 << 7))\n            writer.write_code(8, 0x00 /*cst.CODE_INT8*/, v);\n          else if (v >= -(1 << 15) && v < (1 << 15))\n            writer.write_code(16, 0x01 /*cst.CODE_INT16*/, v);\n          else\n            writer.write_code(32, 0x02 /*cst.CODE_INT32*/, v);\n        }\n      }\n    }\n    extern_rec (v);\n    while (stack.length > 0) {\n      var i = stack.pop ();\n      var v = stack.pop ();\n      if (i + 1 < v.length) stack.push (v, i + 1);\n      extern_rec (v[i]);\n    }\n    if (intern_obj_table) writer.obj_counter = intern_obj_table.objs.length;\n    writer.finalize();\n    return writer.chunk;\n  }\n} ();\n\n//Provides: caml_output_value_to_string mutable\n//Requires: caml_output_val, caml_string_of_array\nfunction caml_output_value_to_string (v, flags) {\n  return caml_string_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_bytes mutable\n//Requires: caml_output_val, caml_bytes_of_array\nfunction caml_output_value_to_bytes (v, flags) {\n  return caml_bytes_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_buffer\n//Requires: caml_output_val, caml_failwith, caml_blit_bytes\nfunction caml_output_value_to_buffer (s, ofs, len, v, flags) {\n  var t = caml_output_val (v, flags);\n  if (t.length > len) caml_failwith (\"Marshal.to_buffer: buffer overflow\");\n  caml_blit_bytes(t, 0, s, ofs, t.length);\n  return 0;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_compare_val_tag\n//Requires: caml_is_ml_string, caml_is_ml_bytes\nfunction caml_compare_val_tag(a){\n  if (typeof a === \"number\") return 1000; // int_tag (we use it for all numbers)\n  else if (caml_is_ml_bytes(a)) return 252; // string_tag\n  else if (caml_is_ml_string(a)) return 1252; // ocaml string (if different from bytes)\n  else if (a instanceof Array && a[0] === (a[0]>>>0) && a[0] <= 255) {\n    // Look like an ocaml block\n    var tag = a[0] | 0;\n    // ignore double_array_tag because we cannot accurately set\n    // this tag when we create an array of float.\n    return (tag == 254)?0:tag\n  }\n  else if (a instanceof String) return 12520; // javascript string, like string_tag (252)\n  else if (typeof a == \"string\") return 12520; // javascript string, like string_tag (252)\n  else if (a instanceof Number) return 1000; // int_tag (we use it for all numbers)\n  else if (a && a.caml_custom) return 1255; // like custom_tag (255)\n  else if (a && a.compare) return 1256; // like custom_tag (255)\n  else if (typeof a == \"function\") return 1247; // like closure_tag (247)\n  else if (typeof a == \"symbol\") return 1251;\n  return 1001; //out_of_heap_tag\n}\n\n//Provides: caml_compare_val_get_custom\n//Requires: caml_custom_ops\nfunction caml_compare_val_get_custom(a){\n  return caml_custom_ops[a.caml_custom] && caml_custom_ops[a.caml_custom].compare;\n}\n\n//Provides: caml_compare_val_number_custom\n//Requires: caml_compare_val_get_custom\nfunction caml_compare_val_number_custom(num, custom, swap, total) {\n  var comp = caml_compare_val_get_custom(custom);\n  if(comp) {\n    var x = (swap > 0)?comp(custom,num,total):comp(num,custom,total);\n    if(total && x != x) return swap; // total && nan\n    if(+x != +x) return +x; // nan\n    if((x | 0) != 0) return (x | 0); // !nan\n  }\n  return swap\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: caml_int_compare, caml_string_compare, caml_bytes_compare\n//Requires: caml_invalid_argument, caml_compare_val_get_custom, caml_compare_val_tag\n//Requires: caml_compare_val_number_custom\n//Requires: caml_jsbytes_of_string\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      var tag_a = caml_compare_val_tag(a);\n      // forward_tag ?\n      if(tag_a == 250) { a = a[1]; continue }\n\n      var tag_b = caml_compare_val_tag(b);\n      // forward_tag ?\n      if(tag_b == 250) { b = b[1]; continue }\n\n      // tags are different\n      if(tag_a !== tag_b) {\n        if(tag_a == 1000) {\n          if(tag_b == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(a, b, -1, total);\n          }\n          return -1\n        }\n        if(tag_b == 1000) {\n          if(tag_a == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(b, a, 1, total);\n          }\n          return 1\n        }\n        return (tag_a < tag_b)?-1:1;\n      }\n      switch(tag_a){\n        // 246: Lazy_tag handled bellow\n      case 247: // Closure_tag\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 248: // Object\n        var x = caml_int_compare(a[2], b[2]);\n        if (x != 0) return (x | 0);\n        break;\n      case 249: // Infix\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 250: // Forward tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Forward_tag, should not happen\");\n        break;\n      case 251: //Abstract\n        caml_invalid_argument(\"equal: abstract value\");\n        break;\n      case 252: // OCaml bytes\n        if (a !== b) {\n          var x = caml_bytes_compare(a, b);\n          if (x != 0) return (x | 0);\n        };\n        break;\n      case 253: // Double_tag\n        // Cannot happen\n        caml_invalid_argument(\"equal: got Double_tag, should not happen\");\n        break;\n      case 254: // Double_array_tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Double_array_tag, should not happen\");\n        break\n      case 255: // Custom_tag\n        caml_invalid_argument(\"equal: got Custom_tag, should not happen\");\n        break;\n      case 1247: // Function\n        caml_invalid_argument(\"compare: functional value\");\n        break;\n      case 1255: // Custom\n        var comp = caml_compare_val_get_custom(a);\n        if(comp != caml_compare_val_get_custom(b)){\n          return (a.caml_custom<b.caml_custom)?-1:1;\n        }\n        if(!comp)\n          caml_invalid_argument(\"compare: abstract value\");\n        var x = comp(a,b,total);\n        if(x != x){ // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1256: // compare function\n        var x = a.compare(b,total);\n        if(x != x) { // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1000: // Number\n        a = +a;\n        b = +b;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1001: // The rest\n        // Here we can be in the following cases:\n        // 1. JavaScript primitive types\n        // 2. JavaScript object that can be coerced to primitive types\n        // 3. JavaScript object than cannot be coerced to primitive types\n        //\n        // (3) will raise a [TypeError]\n        // (2) will coerce to primitive types using [valueOf] or [toString]\n        // (2) and (3), after eventual coercion\n        // - if a and b are strings, apply lexicographic comparison\n        // - if a or b are not strings, convert a and b to number\n        //   and apply standard comparison\n        //\n        // Exception: `!=` will not coerce/convert if both a and b are objects\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1251: // JavaScript Symbol, no ordering.\n        if(a !== b) {\n          if (!total) return NaN;\n          return 1;\n        }\n        break;\n      case 1252: // ocaml strings\n        var a = caml_jsbytes_of_string(a);\n        var b = caml_jsbytes_of_string(b);\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 12520: // javascript strings\n        var a = a.toString();\n        var b = b.toString();\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 246: // Lazy_tag\n      case 254: // Double_array\n      default: // Block with other tag\n        if (a.length != b.length) return (a.length < b.length)?-1:1;\n        if (a.length > 1) stack.push(a, b, 1);\n        break;\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Format\n\n//Provides: caml_parse_format\n//Requires: caml_jsbytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_jsbytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n      { justify:'+', signstyle:'-', filler:' ', alternate:false,\n        base:0, signedconv:false, width:0, uppercase:false,\n        sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n      break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_string_of_jsbytes\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += \"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_string_of_jsbytes(buffer);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_current_dir\nif(joo_global_object.process && joo_global_object.process.cwd)\n  var caml_current_dir = joo_global_object.process.cwd().replace(/\\\\/g,'/');\nelse\n  var caml_current_dir =  \"/static\";\nif(caml_current_dir.slice(-1) !== \"/\") caml_current_dir += \"/\"\n\n//Provides: caml_root\n//Requires: caml_current_dir\nvar caml_root = caml_current_dir.match(/[^\\/]*\\//)[0];\n\n\n//Provides: MlFile\nfunction MlFile(){  }\n\n//Provides: caml_make_path\n//Requires: caml_current_dir\n//Requires: caml_jsstring_of_string\nfunction caml_make_path (name) {\n  name=caml_jsstring_of_string(name);\n  if(name.charCodeAt(0) != 47)\n    name = caml_current_dir + name;\n  var comp = name.split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": if(ncomp.length == 0) ncomp.push(\"\"); break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.orig = name;\n  return ncomp;\n}\n\n//Provides:jsoo_mount_point\n//Requires: MlFakeDevice, MlNodeDevice, caml_root, fs_node_supported\nvar jsoo_mount_point = []\nif (fs_node_supported()) {\n  jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});\n} else {\n  jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});\n}\njsoo_mount_point.push({path:caml_root+\"static/\", device:new MlFakeDevice(caml_root+\"static/\")});\n\n//Provides:caml_list_mount_point\n//Requires: jsoo_mount_point, caml_string_of_jsbytes\nfunction caml_list_mount_point(){\n  var prev = 0\n  for(var i = 0; i < jsoo_mount_point.length; i++){\n    var old = prev;\n    prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old]\n  }\n  return prev;\n}\n\n//Provides: resolve_fs_device\n//Requires: caml_make_path, jsoo_mount_point\nfunction resolve_fs_device(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\");\n  var name_slash = name + \"/\";\n  var res;\n  for(var i = 0; i < jsoo_mount_point.length; i++) {\n    var m = jsoo_mount_point[i];\n    if(name_slash.search(m.path) == 0\n       && (!res || res.path.length < m.path.length))\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n  }\n  return res;\n}\n\n//Provides: caml_mount_autoload\n//Requires: MlFakeDevice, caml_make_path, jsoo_mount_point\nfunction caml_mount_autoload(name,f){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)})\n  return 0;\n}\n\n//Provides: caml_unmount\n//Requires: jsoo_mount_point, caml_make_path\nfunction caml_unmount(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\") + \"/\";\n  var idx = -1;\n  for(var i = 0; i < jsoo_mount_point.length; i++)\n    if(jsoo_mount_point[i].path == name) idx = i;\n  if(idx > -1) jsoo_mount_point.splice(idx,1);\n  return 0\n}\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_string_of_jsbytes\nfunction caml_sys_getcwd() {\n  return caml_string_of_jsbytes(caml_current_dir);\n}\n\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_chdir(dir) {\n  var root = resolve_fs_device(dir);\n  if(root.device.exists(root.rest)) {\n    if(root.rest) caml_current_dir = root.path + root.rest + \"/\";\n    else caml_current_dir = root.path;\n    return 0;\n  }\n  else {\n    caml_raise_no_such_file(dir);\n  }\n}\n\n//Provides: caml_raise_no_such_file\n//Requires: caml_raise_sys_error\n//Requires: caml_jsbytes_of_string\nfunction caml_raise_no_such_file(name){\n  name = caml_jsbytes_of_string(name);\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: caml_raise_sys_error\n//Requires: caml_jsbytes_of_string\nfunction caml_raise_not_a_dir(name){\n  name = caml_jsbytes_of_string(name);\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_sys_file_exists\n//Requires: resolve_fs_device\nfunction caml_sys_file_exists (name) {\n  var root = resolve_fs_device(name);\n  return root.device.exists(root.rest);\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_string_of_jsbytes\n//Requires: caml_raise_not_a_dir, resolve_fs_device\nfunction caml_sys_read_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.readdir(root.rest);\n  var l = new Array(a.length + 1);\n  l[0] = 0;\n  for(var i=0;i<a.length;i++)\n    l[i+1] = caml_string_of_jsbytes(a[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_raise_no_such_file, resolve_fs_device\nfunction caml_sys_remove(name){\n  var root = resolve_fs_device(name);\n  var ok = root.device.unlink(root.rest);\n  if(ok == 0) caml_raise_no_such_file(name);\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: resolve_fs_device\nfunction caml_sys_is_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.is_dir(root.rest);\n  return a?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_sys_rename(o,n){\n  var o_root = resolve_fs_device(o);\n  var n_root = resolve_fs_device(n);\n  if(o_root.device != n_root.device)\n    caml_failwith(\"caml_sys_rename: cannot move file between two filesystem\");\n  if(!o_root.device.rename)\n    caml_failwith(\"caml_sys_rename: no implemented\");\n  o_root.device.rename(o_root.rest, n_root.rest);\n}\n\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n  // var data = caml_global_data.fds[vfd];\n  caml_failwith(\"caml_ba_map_file not implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n//Provides: caml_create_file_extern\nfunction caml_create_file_extern(name,content){\n  if(joo_global_object.caml_create_file)\n    joo_global_object.caml_create_file(name,content);\n  else {\n    if(!joo_global_object.caml_fs_tmp) joo_global_object.caml_fs_tmp = [];\n    joo_global_object.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: caml_create_file\nfunction caml_fs_init (){\n  var tmp=joo_global_object.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      caml_create_file(tmp[i].name,tmp[i].content);\n    }\n  }\n  joo_global_object.caml_create_file = caml_create_file;\n  joo_global_object.caml_fs_tmp = [];\n  return 0;\n}\n\n//Provides: caml_create_file\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_create_file(name,content) {\n  var root = resolve_fs_device(name);\n  if(! root.device.register) caml_failwith(\"cannot register file\");\n  root.device.register(root.rest,content);\n  return 0;\n}\n\n//Provides: caml_read_file_content\n//Requires: resolve_fs_device, caml_raise_no_such_file, caml_create_bytes, caml_string_of_bytes\nfunction caml_read_file_content (name) {\n  var root = resolve_fs_device(name);\n  if(root.device.exists(root.rest)) {\n    var file = root.device.open(root.rest,{rdonly:1});\n    var len  = file.length();\n    var buf  = caml_create_bytes(len);\n    file.read(0,buf,0,len);\n    return caml_string_of_bytes(buf)\n  }\n  caml_raise_no_such_file(name);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Sys\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  var g = joo_global_object;\n  if(g.quit) g.quit(code);\n  //nodejs\n  if(g.process && g.process.exit)\n    g.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_set_static_env\nfunction caml_set_static_env(k,v){\n  if(!joo_global_object.jsoo_static_env)\n    joo_global_object.jsoo_static_env = {}\n  joo_global_object.jsoo_static_env[k] = v;\n  return 0;\n}\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_string_of_jsstring\n//Requires: caml_jsstring_of_string\nfunction caml_sys_getenv (name) {\n  var g = joo_global_object;\n  var n = caml_jsstring_of_string(name);\n  //nodejs env\n  if(g.process\n     && g.process.env\n     && g.process.env[n] != undefined)\n    return caml_string_of_jsstring(g.process.env[n]);\n  if(joo_global_object.jsoo_static_env\n     && joo_global_object.jsoo_static_env[n])\n    return caml_string_of_jsstring(joo_global_object.jsoo_static_env[n])\n  caml_raise_not_found ();\n}\n\n//Provides: caml_argv\n//Requires: caml_string_of_jsstring\nvar caml_argv = ((function () {\n  var g = joo_global_object;\n  var main = \"a.out\";\n  var args = []\n\n  if(g.process\n     && g.process.argv\n     && g.process.argv.length > 1) {\n    var argv = g.process.argv\n    //nodejs\n    main = argv[1];\n    args = argv.slice(2);\n  }\n\n  var p = caml_string_of_jsstring(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_string_of_jsstring(args[i]));\n  return args2;\n})())\n\n//Provides: caml_executable_name\n//Requires: caml_argv\nvar caml_executable_name = caml_argv[1]\n\n//Provides: caml_sys_get_argv\n//Requires: caml_argv\nfunction caml_sys_get_argv (a) {\n  return [0, caml_argv[1], caml_argv];\n}\n\n//Provides: caml_sys_argv\n//Requires: caml_argv\nfunction caml_sys_argv (a) {\n  return caml_argv;\n}\n\n//Provides: caml_sys_modify_argv\n//Requires: caml_argv\nfunction caml_sys_modify_argv(arg){\n  caml_argv = arg;\n  return 0;\n}\n\n//Provides: caml_sys_executable_name const\n//Requires: caml_executable_name\nfunction caml_sys_executable_name(a){\n  return caml_executable_name\n}\n\n//Provides: caml_sys_system_command\n//Requires: caml_jsstring_of_string\nfunction caml_sys_system_command(cmd){\n  var cmd = caml_jsstring_of_string(cmd);\n  if (typeof require != \"undefined\"\n      && require('child_process')\n      && require('child_process').execSync) {\n    try {require('child_process').execSync(cmd,{stdio: 'inherit'}); return 0}\n    catch (e) {return 1}\n  }\n  else return 127;\n}\n\n//Provides: caml_sys_time mutable\nvar caml_initial_time = (new Date()).getTime() * 0.001;\nfunction caml_sys_time () {\n  var now = (new Date()).getTime();\n  return now * 0.001 - caml_initial_time;\n}\n\n//Provides: caml_sys_random_seed mutable\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var now = (new Date()).getTime();\n  var x = now^0xffffffff*Math.random();\n  return [0,x];\n}\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_unix const\nfunction caml_sys_const_ostype_unix () { return 1; }\n//Provides: caml_sys_const_ostype_win32 const\nfunction caml_sys_const_ostype_win32 () { return 0; }\n//Provides: caml_sys_const_ostype_cygwin const\nfunction caml_sys_const_ostype_cygwin () { return 0; }\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_string_of_jsbytes\nfunction caml_sys_const_backend_type () {\n  return [0, caml_string_of_jsbytes(\"js_of_ocaml\")];\n}\n\n//Provides: caml_sys_get_config const\n//Requires: caml_string_of_jsbytes\nfunction caml_sys_get_config () {\n  return [0, caml_string_of_jsbytes(\"Unix\"), 32, 0];\n}\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_runtime_variant\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_variant(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n//Provides: caml_runtime_parameters\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_parameters(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n//Provides: unix_inet_addr_of_string\nfunction unix_inet_addr_of_string () {return 0;}\n\n\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlFakeDevice\n//Requires: MlFakeFile, caml_create_bytes\n//Requires: caml_raise_sys_error, caml_raise_no_such_file\n//Requires: caml_string_of_jsbytes, caml_string_of_jsstring\n//Requires: caml_bytes_of_array, caml_bytes_of_string, caml_bytes_of_jsbytes\n//Requires: caml_is_ml_bytes, caml_is_ml_string\nfunction MlFakeDevice (root, f) {\n  this.content={};\n  this.root = root;\n  this.lookupFun = f;\n}\nMlFakeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlFakeDevice.prototype.lookup = function(name) {\n  if(!this.content[name] && this.lookupFun) {\n    var res = this.lookupFun(caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));\n    if(res !== 0) this.content[name]=new MlFakeFile(caml_bytes_of_string(res[1]));\n  }\n}\nMlFakeDevice.prototype.exists = function(name) {\n  // The root of the device exists\n  if(name == \"\") return 1;\n  // Check if a directory exists\n  var name_slash = (name + \"/\");\n  var r = new RegExp(\"^\" + name_slash);\n  for(var n in this.content) {\n    if (n.match(r)) return 1\n  }\n  // Check if a file exists\n  this.lookup(name);\n  return this.content[name]?1:0;\n}\nMlFakeDevice.prototype.readdir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var seen = {}\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m && !seen[m[1]]) {seen[m[1]] = true; a.push(m[1])}\n  }\n  return a;\n}\nMlFakeDevice.prototype.is_dir = function(name) {\n  var name_slash = (name == \"\")?\"\":(name + \"/\");\n  var r = new RegExp(\"^\" + name_slash + \"([^/]*)\");\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m) return 1\n  }\n  return 0\n}\nMlFakeDevice.prototype.unlink = function(name) {\n  var ok = this.content[name]?true:false;\n  delete this.content[name];\n  return ok;\n}\nMlFakeDevice.prototype.open = function(name, f) {\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    var file = this.content[name];\n    if(f.truncate) file.truncate();\n    return file;\n  } else if (f.create) {\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    return this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n}\n\nMlFakeDevice.prototype.register= function (name,content){\n  if(this.content[name]) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n  if(caml_is_ml_bytes(content))\n    this.content[name] = new MlFakeFile(content);\n  if(caml_is_ml_string(content))\n    this.content[name] = new MlFakeFile(caml_bytes_of_string(content));\n  else if(content instanceof Array)\n    this.content[name] = new MlFakeFile(caml_bytes_of_array(content));\n  else if(typeof content === \"string\")\n    this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));\n  else if(content.toString) {\n    var bytes = caml_bytes_of_string(caml_string_of_jsstring(content.toString()));\n    this.content[name] = new MlFakeFile(bytes);\n  }\n  else caml_raise_sys_error(this.nm(name) + \" : registering file with invalid content type\");\n}\n\nMlFakeDevice.prototype.constructor = MlFakeDevice\n\n//Provides: MlFakeFile\n//Requires: MlFile\n//Requires: caml_create_bytes, caml_ml_bytes_length, caml_blit_bytes, caml_blit_string\n//Requires: caml_bytes_get\nfunction MlFakeFile(content){\n  this.data = content;\n}\nMlFakeFile.prototype = new MlFile ();\nMlFakeFile.prototype.truncate = function(len){\n  var old = this.data;\n  this.data = caml_create_bytes(len|0);\n  caml_blit_bytes(old, 0, this.data, 0, len);\n}\nMlFakeFile.prototype.length = function () {\n  return caml_ml_bytes_length(this.data);\n}\nMlFakeFile.prototype.write = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    var new_str = caml_create_bytes(offset + len);\n    var old_data = this.data;\n    this.data = new_str;\n    caml_blit_bytes(old_data, 0, this.data, 0, clen);\n  }\n  caml_blit_string(buf, pos, this.data, offset, len);\n  return 0\n}\nMlFakeFile.prototype.read = function(offset,buf,pos,len){\n  var clen = this.length();\n  caml_blit_bytes(this.data, offset, buf, pos, len);\n  return 0\n}\nMlFakeFile.prototype.read_one = function(offset){\n  return caml_bytes_get(this.data, offset);\n}\nMlFakeFile.prototype.close = function(){\n\n}\nMlFakeFile.prototype.constructor = MlFakeFile\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: fs_node_supported\nfunction fs_node_supported () {\n  return (\n    typeof joo_global_object.process !== 'undefined'\n      && typeof joo_global_object.process.versions !== 'undefined'\n      && typeof joo_global_object.process.versions.node !== 'undefined'\n      && joo_global_object.process.platform !== \"browser\")\n}\n\n\n//Provides: MlNodeDevice\n//Requires: MlNodeFile, caml_raise_sys_error\nfunction MlNodeDevice(root) {\n  this.fs = require('fs');\n  this.root = root;\n}\nMlNodeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlNodeDevice.prototype.exists = function(name) {\n  try {\n    return this.fs.existsSync(this.nm(name))?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.readdir = function(name) {\n  try {\n    return this.fs.readdirSync(this.nm(name));\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.is_dir = function(name) {\n  try {\n    return this.fs.statSync(this.nm(name)).isDirectory()?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.unlink = function(name) {\n  try {\n    var b = this.fs.existsSync(this.nm(name))?1:0;\n    this.fs.unlinkSync(this.nm(name));\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  return b\n}\nMlNodeDevice.prototype.open = function(name, f) {\n  var consts = require('constants');\n  var res = 0;\n  for(var key in f){\n    switch(key){\n    case \"rdonly\"  : res |= consts.O_RDONLY; break;\n    case \"wronly\"  : res |= consts.O_WRONLY; break;\n    case \"append\"  :\n      res |= consts.O_WRONLY | consts.O_APPEND;\n      break;\n    case \"create\"   : res |= consts.O_CREAT;    break;\n    case \"truncate\" : res |= consts.O_TRUNC;    break;\n    case \"excl\"     : res |= consts.O_EXCL;     break;\n    case \"binary\"   : res |= consts.O_BINARY;   break;\n    case \"text\"     : res |= consts.O_TEXT;     break;\n    case \"nonblock\" : res |= consts.O_NONBLOCK; break;\n    }\n  }\n  try {\n    var fd = this.fs.openSync(this.nm(name), res);\n    return new MlNodeFile(fd);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\n\nMlNodeDevice.prototype.rename = function(o,n) {\n  try {\n    this.fs.renameSync(this.nm(o), this.nm(n));\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\n\nMlNodeDevice.prototype.constructor = MlNodeDevice\n\n//Provides: MlNodeFile\n//Requires: MlFile, caml_array_of_string, caml_array_of_bytes, caml_bytes_set, caml_raise_sys_error\nfunction MlNodeFile(fd){\n  this.fs = require('fs');\n  this.fd = fd;\n}\nMlNodeFile.prototype = new MlFile ();\n\nMlNodeFile.prototype.truncate = function(len){\n  try {\n    this.fs.ftruncateSync(this.fd,len|0)\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFile.prototype.length = function () {\n  try {\n    return this.fs.fstatSync(this.fd).size;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFile.prototype.write = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_string(buf);\n  if(! (a instanceof joo_global_object.Uint8Array))\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = joo_global_object.Buffer.from(a);\n  try {\n    this.fs.writeSync(this.fd, buffer, buf_offset, len, offset);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  return 0;\n}\nMlNodeFile.prototype.read = function(offset,buf,buf_offset,len){\n  var a = caml_array_of_bytes(buf);\n  if(! (a instanceof joo_global_object.Uint8Array))\n    a = new joo_global_object.Uint8Array(a);\n  var buffer = joo_global_object.Buffer.from(a);\n  try {\n    this.fs.readSync(this.fd, buffer, buf_offset, len, offset);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  for(var i = 0; i < len; i++){\n    caml_bytes_set(buf,buf_offset + i,buffer[buf_offset+i]);\n  }\n  return 0\n}\nMlNodeFile.prototype.read_one = function(offset){\n  var a = new joo_global_object.Uint8Array(1);\n  var buffer = joo_global_object.Buffer.from(a);\n  try {\n    this.fs.readSync(this.fd, buffer, 0, 1, offset);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  return buffer[0];\n}\nMlNodeFile.prototype.close = function(){\n  try {\n    this.fs.closeSync(this.fd);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\n\nMlNodeFile.prototype.constructor = MlNodeFile;\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n\n//Provides: caml_js_from_array mutable (shallow)\nfunction caml_js_from_array(a) {\n  return a.slice(1);\n}\n//Provides: caml_js_to_array mutable (shallow)\nfunction caml_js_to_array(a) {\n  var len = a.length;\n  var b = new Array(len+1);\n  b[0] = 0;\n  for(var i=0;i<len;i++) b[i+1] = a[i];\n  return b;\n}\n\n//Provides: caml_list_of_js_array const (const)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_list_to_js_array const (const)\nfunction caml_list_to_js_array(l){\n  var a = [];\n  for(; l !== 0; l = l[2]) {\n    a.push(l[1]);\n  }\n  return a;\n}\n\n//Provides: caml_js_var mutable (const)\n//Requires: js_print_stderr\n//Requires: caml_jsstring_of_string\nfunction caml_js_var(x) {\n  var x = caml_jsstring_of_string(x);\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    js_print_stderr(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //joo_global_object.console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, a) {\n  switch (a.length) {\n  case 1: return f();\n  case 2: return f (a[1]);\n  case 3: return f (a[1],a[2]);\n  case 4: return f (a[1],a[2],a[3]);\n  case 5: return f (a[1],a[2],a[3],a[4]);\n  case 6: return f (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return f (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return f (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  return f.apply(null, caml_js_from_array(a));\n}\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: caml_jsstring_of_string\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_ojs_new_arr (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_ojs_new_arr(c, a) {\n  switch (a.length) {\n  case 0: return new c;\n  case 1: return new c (a[0]);\n  case 2: return new c (a[0],a[1]);\n  case 3: return new c (a[0],a[1],a[2]);\n  case 4: return new c (a[0],a[1],a[2],a[3]);\n  case 5: return new c (a[0],a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[0],a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n  }\n  function F() { return c.apply(this, a); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    var len = arguments.length;\n    if(len > 0){\n      var args = new Array(len);\n      for (var i = 0; i < len; i++) args[i] = arguments[i];\n      return caml_call_gen(f, args);\n    } else {\n      return caml_call_gen(f, [undefined]);\n    }\n  }\n}\n\n//Provides: caml_js_wrap_callback_arguments\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback_arguments(f) {\n  return function() {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_call_gen(f, [args]);\n  }\n}\n//Provides: caml_js_wrap_callback_strict const\n//Requires: caml_call_gen\nfunction caml_js_wrap_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    if(n == arity && f.length == arity) return f.apply(null, arguments);\n    var args = new Array(arity);\n    var len = Math.min(arguments.length, arity)\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_call_gen(f,args);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_arguments const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_meth_callback_arguments(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_call_gen(f,[this,args]);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_strict const\n//Requires: caml_call_gen\nfunction caml_js_wrap_meth_callback_strict(arity, f) {\n  return function () {\n    var args = new Array(arity + 1);\n    var len = Math.min(arguments.length, arity)\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_call_gen(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_call_gen\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return f.apply(null, args); }\n}\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n\n//Provides: caml_js_eval_string (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_eval_string (s) {return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_expr (const)\n//Requires: js_print_stderr\n//Requires: caml_jsstring_of_string\nfunction caml_js_expr(s) {\n  js_print_stderr(\"caml_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: js_print_stderr\n//Requires: caml_jsstring_of_string\nfunction caml_pure_js_expr (s){\n  js_print_stderr(\"caml_pure_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_object (object_literal)\n//Requires: caml_jsstring_of_string\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[caml_jsstring_of_string(p[1])] = p[2];\n  }\n  return o;\n}\n\n\n//Provides: caml_js_export_var\nfunction caml_js_export_var (){\n  if(typeof module !== 'undefined' && module && module.exports)\n    return module.exports\n  else\n    return joo_global_object;\n}\n","/***********************************************************************/\n/*                                                                     */\n/*                           Objective Caml                            */\n/*                                                                     */\n/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */\n/*                                                                     */\n/*  Copyright 1996 Institut National de Recherche en Informatique et   */\n/*  en Automatique.  All rights reserved.  This file is distributed    */\n/*  under the terms of the GNU Lesser General Public License, with     */\n/*  the special exception on linking described in file ../LICENSE.     */\n/*                                                                     */\n/***********************************************************************/\n\n/* $Id: lexing.c 6045 2004-01-01 16:42:43Z doligez $ */\n\n/* The table-driven automaton for lexers generated by camllex. */\n\n//Provides: caml_lex_array\n//Requires: caml_jsbytes_of_string\nfunction caml_lex_array(s) {\n  s = caml_jsbytes_of_string(s);\n  var l = s.length / 2;\n  var a = new Array(l);\n  for (var i = 0; i < l; i++)\n    a[i] = (s.charCodeAt(2 * i) | (s.charCodeAt(2 * i + 1) << 8)) << 16 >> 16;\n  return a;\n}\n\n//Provides: caml_lex_engine\n//Requires: caml_failwith, caml_lex_array, caml_array_of_bytes\nfunction caml_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n\n  var c, state = start_state;\n\n  var buffer = caml_array_of_bytes(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) return -base-1;\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n      */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n\n/***********************************************/\n/* New lexer engine, with memory of positions  */\n/***********************************************/\n\n//Provides: caml_new_lex_engine\n//Requires: caml_failwith, caml_lex_array\n//Requires: caml_jsbytes_of_string, caml_array_of_bytes\nfunction caml_lex_run_mem(s, i, mem, curr_pos) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = curr_pos;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_lex_run_tag(s, i, mem) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return ;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = -1;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_new_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_mem = 10;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n  var lex_base_code = 6;\n  var lex_backtrk_code = 7;\n  var lex_default_code = 8;\n  var lex_trans_code = 9;\n  var lex_check_code = 10;\n  var lex_code = 11;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n  if (!tbl.lex_default_code) {\n    tbl.lex_base_code =    caml_lex_array (tbl[lex_base_code]);\n    tbl.lex_backtrk_code = caml_lex_array (tbl[lex_backtrk_code]);\n    tbl.lex_check_code =   caml_lex_array (tbl[lex_check_code]);\n    tbl.lex_trans_code =   caml_lex_array (tbl[lex_trans_code]);\n    tbl.lex_default_code = caml_lex_array (tbl[lex_default_code]);\n  }\n  if (tbl.lex_code == null) tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);\n\n  var c, state = start_state;\n\n  var buffer = caml_array_of_bytes(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) {\n      var pc_off = tbl.lex_base_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      return -base-1;\n    }\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      var pc_off = tbl.lex_backtrk_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    var pstate = state ;\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* If some transition, get and perform memory moves */\n      var base_code = tbl.lex_base_code[pstate], pc_off;\n      if (tbl.lex_check_code[base_code + c] == pstate)\n        pc_off = tbl.lex_trans_code[base_code + c];\n      else\n        pc_off = tbl.lex_default_code[pstate];\n      if (pc_off > 0)\n        caml_lex_run_mem\n      (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n      */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_close\n//Requires: caml_global_data\nfunction caml_sys_close(fd) {\n  delete caml_global_data.fds[fd];\n  return 0;\n}\n\n//Provides: caml_std_output\n//Requires: caml_string_of_jsbytes, caml_ml_string_length, caml_ml_channels\nfunction caml_std_output(chanid,s){\n  var chan = caml_ml_channels[chanid];\n  var str = caml_string_of_jsbytes(s);\n  var slen = caml_ml_string_length(str);\n  chan.file.write(chan.offset, str, 0, slen);\n  chan.offset += slen;\n  return 0;\n}\n\n//Provides: caml_sys_open\n//Requires: caml_raise_sys_error, caml_global_data\n//Requires: caml_create_bytes,MlFakeFile\n//Requires: js_print_stderr, js_print_stdout\n//Requires: caml_std_output\n//Requires: resolve_fs_device\n//Requires: caml_jsbytes_of_string\nfunction caml_sys_open_internal(idx,output,file,flags) {\n  if(caml_global_data.fds === undefined) caml_global_data.fds = new Array();\n  flags=flags?flags:{};\n  var info = {};\n  info.file = file;\n  info.offset = flags.append?file.length():0;\n  info.flags = flags;\n  info.output = output;\n  caml_global_data.fds[idx] = info;\n  if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)\n    caml_global_data.fd_last_idx = idx;\n  return idx;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_text and Open_binary are not compatible\");\n  var root = resolve_fs_device(name);\n  var file = root.device.open(root.rest,f);\n  var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n  return caml_sys_open_internal (idx+1,caml_std_output,file,f);\n}\ncaml_sys_open_internal(0,caml_std_output, new MlFakeFile(caml_create_bytes(0))); //stdin\ncaml_sys_open_internal(1,js_print_stdout, new MlFakeFile(caml_create_bytes(0))); //stdout\ncaml_sys_open_internal(2,js_print_stderr, new MlFakeFile(caml_create_bytes(0))); //stderr\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\nfunction caml_ml_set_channel_name() {\n  return 0\n}\n\n//Provides: caml_ml_channels\nvar caml_ml_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_channels.length; c++){\n    if(caml_ml_channels[c] && caml_ml_channels[c].opened && caml_ml_channels[c].out)\n      l=[0,caml_ml_channels[c].fd,l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: caml_ml_channels, caml_global_data\n//Requires: caml_raise_sys_error\nfunction caml_ml_open_descriptor_out (fd) {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out:true,\n    buffer:\"\"\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_global_data,caml_sys_open,caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_open_descriptor_in (fd)  {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    out: false,\n    refill:null\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_global_data, caml_ml_channels\nfunction caml_ml_set_binary_mode(chanid,mode){\n  var chan = caml_ml_channels[chanid];\n  var data = caml_global_data.fds[chan.fd];\n  data.flags.text = !mode\n  data.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_flush(chanid);\n  chan.opened = false;\n  chan.file.close();\n  caml_sys_close(chan.fd)\n  return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_channels\nfunction caml_ml_channel_size(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return chan.file.length();\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_int64_of_float,caml_ml_channels\nfunction caml_ml_channel_size_64(chanid) {\n  var chan = caml_ml_channels[chanid];\n  return caml_int64_of_float(chan.file.length ());\n}\n\n//Provides: caml_ml_set_channel_output\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_output(chanid,f) {\n  var chan = caml_ml_channels[chanid];\n  caml_global_data.fds[chan.fd].output = f;\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\n//Requires: caml_ml_channels, caml_global_data\nfunction caml_ml_set_channel_refill(chanid,f) {\n  caml_ml_channels[chanid].refill = f;\n  return 0;\n}\n\n//Provides: caml_ml_refill_input\n//Requires: caml_ml_string_length\nfunction caml_ml_refill_input (chan) {\n  var str = chan.refill();\n  var str_len = caml_ml_string_length(str);\n  if (str_len == 0) chan.refill = null;\n  chan.file.write(chan.file.length(), str, 0, str_len);\n  return str_len;\n}\n\n//Provides: caml_ml_may_refill_input\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_may_refill_input (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill == null) return;\n  if (chan.file.length() != chan.offset) return;\n  caml_ml_refill_input (chan);\n}\n\n//Provides: caml_ml_input\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_input (chanid, s, i, l) {\n  var chan = caml_ml_channels[chanid];\n  var l2 = chan.file.length() - chan.offset;\n  if (l2 == 0 && chan.refill != null) l2 = caml_ml_refill_input(chan);\n  if (l2 < l) l = l2;\n  chan.file.read(chan.offset, s, i, l);\n  chan.offset += l;\n  return l;\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_bytes, caml_create_bytes, caml_ml_channels\nfunction caml_input_value (chanid) {\n  var chan = caml_ml_channels[chanid];\n\n  var buf = caml_create_bytes(8);\n  chan.file.read(chan.offset,buf,0,8);\n\n  // Header is 20 bytes\n  var len = caml_marshal_data_size (buf, 0) + 20;\n\n  var buf = caml_create_bytes(len);\n  chan.file.read(chan.offset,buf,0,len);\n\n  var offset = [0];\n  var res = caml_input_value_from_bytes(buf, offset);\n  chan.offset = chan.offset + offset[0];\n  return res;\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_may_refill_input, caml_ml_channels\nfunction caml_ml_input_char (chanid) {\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  if (chan.offset >= chan.file.length())\n    caml_raise_end_of_file();\n  var res = chan.file.read_one(chan.offset);\n  chan.offset++;\n  return res;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_refill_input, caml_ml_channels\nfunction caml_ml_input_int (chanid) {\n  var chan = caml_ml_channels[chanid];\n  var file = chan.file;\n  while ((chan.offset + 3) >= file.length()) {\n    var l = caml_ml_refill_input(chan);\n    if (l == 0) caml_raise_end_of_file();\n  }\n  var o = chan.offset;\n  var r =(file.read_one(o  ) << 24)\n      |  (file.read_one(o+1) << 16)\n      |  (file.read_one(o+2) << 8)\n      |  (file.read_one(o+3));\n  chan.offset+=4;\n  return r;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_raise_sys_error, caml_ml_channels\nfunction caml_ml_seek_in_64(chanid,pos){\n  var chan = caml_ml_channels[chanid];\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_in\n//Requires: caml_ml_channels\nfunction caml_ml_pos_in(chanid) {return caml_ml_channels[chanid].offset}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float, caml_ml_channels\nfunction caml_ml_pos_in_64(chanid) {return caml_int64_of_float(caml_ml_channels[chanid].offset)}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error\n//Requires: caml_ml_may_refill_input, caml_ml_channels\nfunction caml_ml_input_scan_line(chanid){\n  var chan = caml_ml_channels[chanid];\n  caml_ml_may_refill_input(chanid);\n  var p = chan.offset;\n  var len = chan.file.length();\n  if(p >= len) { return 0;}\n  while(true) {\n    if(p >= len) return - (p - chan.offset);\n    if(chan.file.read_one(p) == 10) return p - chan.offset + 1;\n    p++;\n  }\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error, caml_global_data, caml_ml_channels\nfunction caml_ml_flush (chanid) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n  if(!chan.buffer || chan.buffer == \"\") return 0;\n  if(chan.fd\n     && caml_global_data.fds[chan.fd]\n     && caml_global_data.fds[chan.fd].output) {\n    var output = caml_global_data.fds[chan.fd].output;\n    switch(output.length){\n    case 2: output(chanid,chan.buffer);break;\n    default: output(chan.buffer)\n    };\n  }\n  chan.buffer = \"\";\n  return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_ml_flush,caml_ml_bytes_length\n//Requires: caml_create_bytes, caml_blit_bytes, caml_raise_sys_error, caml_ml_channels, caml_string_of_bytes\n//Requires: caml_jsbytes_of_string\nfunction caml_ml_output_bytes(chanid,buffer,offset,len) {\n  var chan = caml_ml_channels[chanid];\n  if(! chan.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n  var bytes;\n  if(offset == 0 && caml_ml_bytes_length(buffer) == len)\n    bytes = buffer;\n  else {\n    bytes = caml_create_bytes(len);\n    caml_blit_bytes(buffer,offset,bytes,0,len);\n  }\n  var string = caml_string_of_bytes(bytes);\n  var jsstring = caml_jsbytes_of_string(string);\n  var id = jsstring.lastIndexOf(\"\\n\");\n  if(id < 0)\n    chan.buffer+=jsstring;\n  else {\n    chan.buffer+=jsstring.substr(0,id+1);\n    caml_ml_flush (chanid);\n    chan.buffer += jsstring.substr(id+1);\n  }\n  return 0;\n}\n\n//Provides: caml_ml_output\n//Requires: caml_ml_output_bytes, caml_bytes_of_string\nfunction caml_ml_output(chanid,buffer,offset,len){\n  return caml_ml_output_bytes(chanid,caml_bytes_of_string(buffer),offset,len);\n}\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_string_of_jsbytes\nfunction caml_ml_output_char (chanid,c) {\n  var s = caml_string_of_jsbytes(String.fromCharCode(c));\n  caml_ml_output(chanid,s,0,1);\n  return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chanid,v,flags) {\n  var s = caml_output_value_to_string(v, flags);\n  caml_ml_output(chanid,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_ml_seek_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_ml_seek_out(chanid,pos){\n  caml_ml_flush(chanid);\n  caml_ml_channels[chanid].offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float, caml_ml_channels, caml_ml_flush\nfunction caml_ml_seek_out_64(chanid,pos){\n  caml_ml_flush(chanid);\n  caml_ml_channels[chanid].offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_out\n//Requires: caml_ml_channels, caml_ml_flush\nfunction caml_ml_pos_out(chanid) {\n  caml_ml_flush(chanid);\n  return caml_ml_channels[chanid].offset\n}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float, caml_ml_channels, caml_ml_flush\nfunction caml_ml_pos_out_64(chanid) {\n  caml_ml_flush(chanid);\n  return caml_int64_of_float (caml_ml_channels[chanid].offset);\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (chanid,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(chanid,s,0,4);\n  return 0\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\nfunction caml_js_pure_expr (f) { return f(); }\n\n//Provides: caml_js_set (mutable, const, const)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get mutable (const, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return o instanceof c; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n      joo_global_object.navigator?joo_global_object.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n    .replace(caml_js_regexps.lt, \"&lt;\")\n    .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities\n//Requires: caml_failwith\nfunction caml_js_html_entities(s) {\n  var entity = /^&#?[0-9a-zA-Z]+;$/\n  if(s.match(entity))\n  {\n    var str, temp = document.createElement('p');\n    temp.innerHTML= s;\n    str= temp.textContent || temp.innerText;\n    temp=null;\n    return str;\n  }\n  else {\n    caml_failwith(\"Invalid entity \" + s);\n  }\n}\n\n/////////// Debugging console\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = joo_global_object.console?joo_global_object.console:{};\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides: js_print_stdout (const)\n//Requires: caml_utf16_of_utf8\nfunction js_print_stdout(s) {\n  var s = caml_utf16_of_utf8(s);\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stdout.write(s)\n  } else {\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    if(s.charCodeAt(s.length - 1) == 10)\n      s = s.substr(0,s.length - 1 );\n    var v = g.console;\n    v  && v.log && v.log(s);\n  }\n}\n//Provides: js_print_stderr (const)\n//Requires: caml_utf16_of_utf8\nfunction js_print_stderr(s) {\n  var s = caml_utf16_of_utf8(s);\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stderr.write(s)\n  } else {\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    if(s.charCodeAt(s.length - 1) == 10)\n      s = s.substr(0,s.length - 1 );\n    var v = g.console;\n    v && v.error && v.error(s);\n  }\n}\n\n\n//Provides: caml_is_js\nfunction caml_is_js() {\n  return 1;\n}\n\n\n\n//Provides: caml_wrap_exception const (const)\n//Requires: caml_global_data,caml_string_of_jsstring,caml_named_value\n//Requires: caml_return_exn_constant\nfunction caml_wrap_exception(e) {\n  if(e instanceof Array) return e;\n  //Stack_overflow: chrome, safari\n  if(joo_global_object.RangeError\n     && e instanceof joo_global_object.RangeError\n     && e.message\n     && e.message.match(/maximum call stack/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Stack_overflow: firefox\n  if(joo_global_object.InternalError\n     && e instanceof joo_global_object.InternalError\n     && e.message\n     && e.message.match(/too much recursion/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Wrap Error in Js.Error exception\n  if(e instanceof joo_global_object.Error && caml_named_value(\"jsError\"))\n    return [0,caml_named_value(\"jsError\"),e];\n  //fallback: wrapped in Failure\n  return [0,caml_global_data.Failure,caml_string_of_jsstring (String(e))];\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  //never reraise for constant exn\n  if(!exn.js_error || force || exn[0] == 248) exn.js_error = new joo_global_object.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n\n//Provides: caml_js_error_of_exception\nfunction caml_js_error_of_exception(exn) {\n  if(exn.js_error) { return exn.js_error; }\n  return null;\n}\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* The run-time library for lexers generated by camllex *)\n\ntype position = {\n  pos_fname : string;\n  pos_lnum : int;\n  pos_bol : int;\n  pos_cnum : int;\n}\n\nlet dummy_pos = {\n  pos_fname = \"\";\n  pos_lnum = 0;\n  pos_bol = 0;\n  pos_cnum = -1;\n}\n\ntype lexbuf =\n  { refill_buff : lexbuf -> unit;\n    mutable lex_buffer : bytes;\n    mutable lex_buffer_len : int;\n    mutable lex_abs_pos : int;\n    mutable lex_start_pos : int;\n    mutable lex_curr_pos : int;\n    mutable lex_last_pos : int;\n    mutable lex_last_action : int;\n    mutable lex_eof_reached : bool;\n    mutable lex_mem : int array;\n    mutable lex_start_p : position;\n    mutable lex_curr_p : position;\n  }\n\ntype lex_tables =\n  { lex_base: string;\n    lex_backtrk: string;\n    lex_default: string;\n    lex_trans: string;\n    lex_check: string;\n    lex_base_code : string;\n    lex_backtrk_code : string;\n    lex_default_code : string;\n    lex_trans_code : string;\n    lex_check_code : string;\n    lex_code: string;}\n\nexternal c_engine : lex_tables -> int -> lexbuf -> int = \"caml_lex_engine\"\nexternal c_new_engine : lex_tables -> int -> lexbuf -> int\n                      = \"caml_new_lex_engine\"\n\nlet engine tbl state buf =\n  let result = c_engine tbl state buf in\n  if result >= 0 && buf.lex_curr_p != dummy_pos then begin\n    buf.lex_start_p <- buf.lex_curr_p;\n    buf.lex_curr_p <- {buf.lex_curr_p\n                       with pos_cnum = buf.lex_abs_pos + buf.lex_curr_pos};\n  end;\n  result\n\n\nlet new_engine tbl state buf =\n  let result = c_new_engine tbl state buf in\n  if result >= 0 && buf.lex_curr_p != dummy_pos then begin\n    buf.lex_start_p <- buf.lex_curr_p;\n    buf.lex_curr_p <- {buf.lex_curr_p\n                       with pos_cnum = buf.lex_abs_pos + buf.lex_curr_pos};\n  end;\n  result\n\n\nlet lex_refill read_fun aux_buffer lexbuf =\n  let read =\n    read_fun aux_buffer (Bytes.length aux_buffer) in\n  let n =\n    if read > 0\n    then read\n    else (lexbuf.lex_eof_reached <- true; 0) in\n  (* Current state of the buffer:\n        <-------|---------------------|----------->\n        |  junk |      valid data     |   junk    |\n        ^       ^                     ^           ^\n        0    start_pos             buffer_end    Bytes.length buffer\n  *)\n  if lexbuf.lex_buffer_len + n > Bytes.length lexbuf.lex_buffer then begin\n    (* There is not enough space at the end of the buffer *)\n    if lexbuf.lex_buffer_len - lexbuf.lex_start_pos + n\n       <= Bytes.length lexbuf.lex_buffer\n    then begin\n      (* But there is enough space if we reclaim the junk at the beginning\n         of the buffer *)\n      Bytes.blit lexbuf.lex_buffer lexbuf.lex_start_pos\n                  lexbuf.lex_buffer 0\n                  (lexbuf.lex_buffer_len - lexbuf.lex_start_pos)\n    end else begin\n      (* We must grow the buffer.  Doubling its size will provide enough\n         space since n <= String.length aux_buffer <= String.length buffer.\n         Watch out for string length overflow, though. *)\n      let newlen =\n        min (2 * Bytes.length lexbuf.lex_buffer) Sys.max_string_length in\n      if lexbuf.lex_buffer_len - lexbuf.lex_start_pos + n > newlen\n      then failwith \"Lexing.lex_refill: cannot grow buffer\";\n      let newbuf = Bytes.create newlen in\n      (* Copy the valid data to the beginning of the new buffer *)\n      Bytes.blit lexbuf.lex_buffer lexbuf.lex_start_pos\n                  newbuf 0\n                  (lexbuf.lex_buffer_len - lexbuf.lex_start_pos);\n      lexbuf.lex_buffer <- newbuf\n    end;\n    (* Reallocation or not, we have shifted the data left by\n       start_pos characters; update the positions *)\n    let s = lexbuf.lex_start_pos in\n    lexbuf.lex_abs_pos <- lexbuf.lex_abs_pos + s;\n    lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - s;\n    lexbuf.lex_start_pos <- 0;\n    lexbuf.lex_last_pos <- lexbuf.lex_last_pos - s;\n    lexbuf.lex_buffer_len <- lexbuf.lex_buffer_len - s ;\n    let t = lexbuf.lex_mem in\n    for i = 0 to Array.length t-1 do\n      let v = t.(i) in\n      if v >= 0 then\n        t.(i) <- v-s\n    done\n  end;\n  (* There is now enough space at the end of the buffer *)\n  Bytes.blit aux_buffer 0 lexbuf.lex_buffer lexbuf.lex_buffer_len n;\n  lexbuf.lex_buffer_len <- lexbuf.lex_buffer_len + n\n\nlet zero_pos = {\n  pos_fname = \"\";\n  pos_lnum = 1;\n  pos_bol = 0;\n  pos_cnum = 0;\n}\n\nlet from_function ?(with_positions = true) f =\n  { refill_buff = lex_refill f (Bytes.create 512);\n    lex_buffer = Bytes.create 1024;\n    lex_buffer_len = 0;\n    lex_abs_pos = 0;\n    lex_start_pos = 0;\n    lex_curr_pos = 0;\n    lex_last_pos = 0;\n    lex_last_action = 0;\n    lex_mem = [||];\n    lex_eof_reached = false;\n    lex_start_p = if with_positions then zero_pos else dummy_pos;\n    lex_curr_p = if with_positions then zero_pos else dummy_pos;\n  }\n\nlet from_channel ?with_positions ic =\n  from_function ?with_positions (fun buf n -> input ic buf 0 n)\n\nlet from_string ?(with_positions = true) s =\n  { refill_buff = (fun lexbuf -> lexbuf.lex_eof_reached <- true);\n    lex_buffer = Bytes.of_string s; (* have to make a copy for compatibility\n                                       with unsafe-string mode *)\n    lex_buffer_len = String.length s;\n    lex_abs_pos = 0;\n    lex_start_pos = 0;\n    lex_curr_pos = 0;\n    lex_last_pos = 0;\n    lex_last_action = 0;\n    lex_mem = [||];\n    lex_eof_reached = true;\n    lex_start_p = if with_positions then zero_pos else dummy_pos;\n    lex_curr_p = if with_positions then zero_pos else dummy_pos;\n  }\n\nlet with_positions lexbuf = lexbuf.lex_curr_p != dummy_pos\n\nlet lexeme lexbuf =\n  let len = lexbuf.lex_curr_pos - lexbuf.lex_start_pos in\n  Bytes.sub_string lexbuf.lex_buffer lexbuf.lex_start_pos len\n\nlet sub_lexeme lexbuf i1 i2 =\n  let len = i2-i1 in\n  Bytes.sub_string lexbuf.lex_buffer i1 len\n\nlet sub_lexeme_opt lexbuf i1 i2 =\n  if i1 >= 0 then begin\n    let len = i2-i1 in\n    Some (Bytes.sub_string lexbuf.lex_buffer i1 len)\n  end else begin\n    None\n  end\n\nlet sub_lexeme_char lexbuf i = Bytes.get lexbuf.lex_buffer i\n\nlet sub_lexeme_char_opt lexbuf i =\n  if i >= 0 then\n    Some (Bytes.get lexbuf.lex_buffer i)\n  else\n    None\n\n\nlet lexeme_char lexbuf i =\n  Bytes.get lexbuf.lex_buffer (lexbuf.lex_start_pos + i)\n\nlet lexeme_start lexbuf = lexbuf.lex_start_p.pos_cnum\nlet lexeme_end lexbuf = lexbuf.lex_curr_p.pos_cnum\n\nlet lexeme_start_p lexbuf = lexbuf.lex_start_p\nlet lexeme_end_p lexbuf = lexbuf.lex_curr_p\n\nlet new_line lexbuf =\n  let lcp = lexbuf.lex_curr_p in\n  if lcp != dummy_pos then\n    lexbuf.lex_curr_p <-\n      { lcp with\n        pos_lnum = lcp.pos_lnum + 1;\n        pos_bol = lcp.pos_cnum;\n      }\n\n\n\n(* Discard data left in lexer buffer. *)\n\nlet flush_input lb =\n  lb.lex_curr_pos <- 0;\n  lb.lex_abs_pos <- 0;\n  let lcp = lb.lex_curr_p in\n  if lcp != dummy_pos then\n    lb.lex_curr_p <- {zero_pos with pos_fname = lcp.pos_fname};\n  lb.lex_buffer_len <- 0;\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float ((Float_flag_, Float_f),\n              pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool pad_opt ->\n    Param_format_EBB (Bool (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision fconv =\n  match snd fconv with\n  | Float_f | Float_e | Float_E | Float_g | Float_G | Float_h | Float_H\n  | Float_CF -> -6\n  (* For %h %H and %#F formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n  | Float_F -> 12\n  (* Default precision for OCaml float printing (%F). *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd | Int_Cd -> 'd' | Int_i | Int_pi | Int_si\n  | Int_Ci -> 'i' | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o\n  | Int_Co -> 'o' | Int_u | Int_Cu -> 'u'\n\n(* Convert a float conversion to char. *)\n(* `cF' will be 'F' for displaying format and 'g' to call libc printf *)\nlet char_of_fconv ?(cF='F') fconv = match snd fconv with\n  | Float_f -> 'f' | Float_e -> 'e'\n  | Float_E -> 'E' | Float_g -> 'g'\n  | Float_G -> 'G' | Float_F -> cF\n  | Float_h -> 'h' | Float_H -> 'H'\n  | Float_CF -> 'F'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (Int.to_string width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (Int.to_string n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optional '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co | Int_Cd | Int_Ci | Int_Cu ->\n      buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optional '+', ' ' and/or '#' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv =\n  begin match fst fconv with\n  | Float_flag_p -> buffer_add_char buf '+'\n  | Float_flag_s -> buffer_add_char buf ' '\n  | Float_flag_ -> () end;\n  match snd fconv with\n  | Float_CF -> buffer_add_char buf '#'\n  | Float_f | Float_e | Float_E | Float_g | Float_G\n  | Float_F | Float_h | Float_H -> ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a Formatting_lit. *)\n(* Used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'B';\n      fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      begin match fmting_gen with\n      | Open_tag (Format (_, str)) ->\n        buffer_add_string buf \"@{\"; buffer_add_string buf str\n      | Open_box (Format (_, str)) ->\n        buffer_add_string buf \"@[\"; buffer_add_string buf str\n      end;\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool (pad, rest)           ->\n      fmtty_of_padding_fmtty pad (Bool_ty (fmtty_of_fmt rest))\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool _                  -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, Bool_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Bool (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool _             as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces around a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d | Int_Cd -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i | Int_Ci -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u | Int_Cu -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d | Int_Cd -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i | Int_Ci -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u | Int_Cu -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d | Int_Cd -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i | Int_Ci -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u | Int_Cu -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d | Int_Cd -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i | Int_Ci -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u | Int_Cu -> \"%nu\"\n\n(* Generate the format_float first argument from a float_conv. *)\nlet format_of_fconv fconv prec =\n    let prec = abs prec in\n    let symb = char_of_fconv ~cF:'g' fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\nlet transform_int_alt iconv s =\n  match iconv with\n  | Int_Cd | Int_Ci | Int_Cu ->\n    let digits =\n      let n = ref 0 in\n      for i = 0 to String.length s - 1 do\n        match String.unsafe_get s i with\n        | '0'..'9' -> incr n\n        | _ -> ()\n      done;\n      !n\n    in\n    let buf = Bytes.create (String.length s + (digits - 1) / 3) in\n    let pos = ref 0 in\n    let put c = Bytes.set buf !pos c; incr pos in\n    let left = ref ((digits - 1) mod 3 + 1) in\n    for i = 0 to String.length s - 1 do\n      match String.unsafe_get s i with\n      | '0'..'9' as c ->\n          if !left = 0 then (put '_'; left := 3); decr left; put c\n      | c -> put c\n    done;\n    Bytes.unsafe_to_string buf\n  | _ -> s\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n =\n  transform_int_alt iconv (format_int (format_of_iconv iconv) n)\nlet convert_int32 iconv n =\n  transform_int_alt iconv (format_int32 (format_of_iconvl iconv) n)\nlet convert_nativeint iconv n =\n  transform_int_alt iconv (format_nativeint (format_of_iconvn iconv) n)\nlet convert_int64 iconv n =\n  transform_int_alt iconv (format_int64 (format_of_iconvL iconv) n)\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  let hex () =\n    let sign =\n      match fst fconv with\n      | Float_flag_p -> '+'\n      | Float_flag_s -> ' '\n      | _ -> '-' in\n    hexstring_of_float x prec sign in\n  let add_dot_if_needed str =\n    let len = String.length str in\n    let rec is_valid i =\n      if i = len then false else\n        match str.[i] with\n        | '.' | 'e' | 'E' -> true\n        | _ -> is_valid (i + 1) in\n    if is_valid 0 then str else str ^ \".\" in\n  let caml_special_val str = match classify_float x with\n    | FP_normal | FP_subnormal | FP_zero -> str\n    | FP_infinite -> if x < 0.0 then \"neg_infinity\" else \"infinity\"\n    | FP_nan -> \"nan\" in\n  match snd fconv with\n  | Float_h -> hex ()\n  | Float_H -> String.uppercase_ascii (hex ())\n  | Float_CF -> caml_special_val (hex ())\n  | Float_F ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    caml_special_val (add_dot_if_needed str)\n  | Float_f | Float_e | Float_E | Float_g | Float_G ->\n    format_float (format_of_fconv fconv prec) x\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k new_acc rest\n  | String (pad, rest) ->\n    make_padding k acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_padding k acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k acc rest pad prec fconv\n  | Bool (pad, rest) ->\n    make_padding k acc rest pad string_of_bool\n  | Alpha rest ->\n    fun f x -> make_printf k (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' End_of_acc fmt'\n\n  | End_of_format ->\n    k acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k acc fmt\n  | Ignored_string _                -> make_invalid_arg k acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_bool _                  -> make_invalid_arg k acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt ->\n  make_printf k (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_padding : type x z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  ((b, c) acc -> f) -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun _ -> k o) (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f state.\n  (state -> f) ->\n  state -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error management *)\n\n(* Raise [Failure] with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb from a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise [Failure] in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbers) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise [Failure] with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encountered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise [Failure] with a friendly error message about an option dependency\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise [Failure] with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; note that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatibility, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a) (type b) (pad : (a, b) padding) =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv =\n        compute_float_conv pct_ind str_ind\n          (get_plus ()) (get_hash ()) (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_bool (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Bool (pad', fmt_rest'))\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting information (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  (* Try to read the optional <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting =\n          if is_open_tag then Open_tag sub_format else Open_box sub_format in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optional <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}'\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')'\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | false,  true, false, 'd' -> Int_Cd\n    | false,  true, false, 'i' -> Int_Ci\n    | false,  true, false, 'u' -> Int_Cu\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, space, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus hash space symb =\n    let flag = match plus, space with\n    | false, false -> Float_flag_\n    | false,  true -> Float_flag_s\n    |  true, false -> Float_flag_p\n    |  true,  true ->\n      (* plus and space: legacy implementation prefers plus *)\n      if legacy_behavior then Float_flag_p\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\" in\n    let kind = match hash, symb with\n    | _, 'f' -> Float_f\n    | _, 'e' -> Float_e\n    | _, 'E' -> Float_E\n    | _, 'g' -> Float_g\n    | _, 'G' -> Float_G\n    | _, 'h' -> Float_h\n    | _, 'H' -> Float_H\n    | false, 'F' -> Float_F\n    | true, 'F' -> Float_CF\n    | _ -> assert false in\n    flag, kind\n\n  (* Raise [Failure] with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Pierre Weis, projet Cristal, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\n(* alias to avoid warning for ambiguity between\n   Stdlib.format6\n   and CamlinternalFormatBasics.format6\n\n   (the former is in fact an alias for the latter,\n    but the ambiguity warning doesn't care)\n*)\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  ('a, 'b, 'c, 'd, 'e, 'f) Stdlib.format6\n\n\n(* The run-time library for scanners. *)\n\n(* Scanning buffers. *)\nmodule type SCANNING = sig\n\n  type in_channel\n\n  type scanbuf = in_channel\n\n  type file_name = string\n\n  val stdin : in_channel\n  (* The scanning buffer reading from [Stdlib.stdin].\n     [stdib] is equivalent to [Scanning.from_channel Stdlib.stdin]. *)\n\n  val stdib : in_channel\n  (* An alias for [Scanf.stdin], the scanning buffer reading from\n     [Stdlib.stdin]. *)\n\n  val next_char : scanbuf -> char\n  (* [Scanning.next_char ib] advance the scanning buffer for\n     one character.\n     If no more character can be read, sets a end of file condition and\n     returns '\\000'. *)\n\n  val invalidate_current_char : scanbuf -> unit\n  (* [Scanning.invalidate_current_char ib] mark the current_char as already\n     scanned. *)\n\n  val peek_char : scanbuf -> char\n  (* [Scanning.peek_char ib] returns the current char available in\n     the buffer or reads one if necessary (when the current character is\n     already scanned).\n     If no character can be read, sets an end of file condition and\n     returns '\\000'. *)\n\n  val checked_peek_char : scanbuf -> char\n  (* Same as [Scanning.peek_char] above but always returns a valid char or\n     fails: instead of returning a null char when the reading method of the\n     input buffer has reached an end of file, the function raises exception\n     [End_of_file]. *)\n\n  val store_char : int -> scanbuf -> char -> int\n  (* [Scanning.store_char lim ib c] adds [c] to the token buffer\n     of the scanning buffer [ib]. It also advances the scanning buffer for\n     one character and returns [lim - 1], indicating the new limit for the\n     length of the current token. *)\n\n  val skip_char : int -> scanbuf -> int\n  (* [Scanning.skip_char lim ib] ignores the current character. *)\n\n  val ignore_char : int -> scanbuf -> int\n  (* [Scanning.ignore_char ib lim] ignores the current character and\n     decrements the limit. *)\n\n  val token : scanbuf -> string\n  (* [Scanning.token ib] returns the string stored into the token\n     buffer of the scanning buffer: it returns the token matched by the\n     format. *)\n\n  val reset_token : scanbuf -> unit\n  (* [Scanning.reset_token ib] resets the token buffer of\n     the given scanning buffer. *)\n\n  val char_count : scanbuf -> int\n  (* [Scanning.char_count ib] returns the number of characters\n     read so far from the given buffer. *)\n\n  val line_count : scanbuf -> int\n  (* [Scanning.line_count ib] returns the number of new line\n     characters read so far from the given buffer. *)\n\n  val token_count : scanbuf -> int\n  (* [Scanning.token_count ib] returns the number of tokens read\n     so far from [ib]. *)\n\n  val eof : scanbuf -> bool\n  (* [Scanning.eof ib] returns the end of input condition\n     of the given buffer. *)\n\n  val end_of_input : scanbuf -> bool\n  (* [Scanning.end_of_input ib] tests the end of input condition\n     of the given buffer (if no char has ever been read, an attempt to\n     read one is performed). *)\n\n  val beginning_of_input : scanbuf -> bool\n  (* [Scanning.beginning_of_input ib] tests the beginning of input\n     condition of the given buffer. *)\n\n  val name_of_input : scanbuf -> string\n  (* [Scanning.name_of_input ib] returns the name of the character\n     source for input buffer [ib]. *)\n\n  val open_in : file_name -> in_channel\n  val open_in_bin : file_name -> in_channel\n  val from_file : file_name -> in_channel\n  val from_file_bin : file_name -> in_channel\n  val from_string : string -> in_channel\n  val from_function : (unit -> char) -> in_channel\n  val from_channel : Stdlib.in_channel -> in_channel\n\n  val close_in : in_channel -> unit\n\n  val memo_from_channel : Stdlib.in_channel -> in_channel\n  (* Obsolete. *)\n\nend\n\n\nmodule Scanning : SCANNING = struct\n\n  (* The run-time library for scanf. *)\n\n  type file_name = string\n\n  type in_channel_name =\n    | From_channel of Stdlib.in_channel\n    | From_file of file_name * Stdlib.in_channel\n    | From_function\n    | From_string\n\n\n  type in_channel = {\n    mutable ic_eof : bool;\n    mutable ic_current_char : char;\n    mutable ic_current_char_is_valid : bool;\n    mutable ic_char_count : int;\n    mutable ic_line_count : int;\n    mutable ic_token_count : int;\n    mutable ic_get_next_char : unit -> char;\n    ic_token_buffer : Buffer.t;\n    ic_input_name : in_channel_name;\n  }\n\n\n  type scanbuf = in_channel\n\n  let null_char = '\\000'\n\n  (* Reads a new character from input buffer.\n     Next_char never fails, even in case of end of input:\n     it then simply sets the end of file condition. *)\n  let next_char ib =\n    try\n      let c = ib.ic_get_next_char () in\n      ib.ic_current_char <- c;\n      ib.ic_current_char_is_valid <- true;\n      ib.ic_char_count <- succ ib.ic_char_count;\n      if c = '\\n' then ib.ic_line_count <- succ ib.ic_line_count;\n      c with\n    | End_of_file ->\n      let c = null_char in\n      ib.ic_current_char <- c;\n      ib.ic_current_char_is_valid <- false;\n      ib.ic_eof <- true;\n      c\n\n\n  let peek_char ib =\n    if ib.ic_current_char_is_valid\n    then ib.ic_current_char\n    else next_char ib\n\n\n  (* Returns a valid current char for the input buffer. In particular\n     no irrelevant null character (as set by [next_char] in case of end\n     of input) is returned, since [End_of_file] is raised when\n     [next_char] sets the end of file condition while trying to read a\n     new character. *)\n  let checked_peek_char ib =\n    let c = peek_char ib in\n    if ib.ic_eof then raise End_of_file;\n    c\n\n\n  let end_of_input ib =\n    ignore (peek_char ib);\n    ib.ic_eof\n\n\n  let eof ib = ib.ic_eof\n\n  let beginning_of_input ib = ib.ic_char_count = 0\n\n  let name_of_input ib =\n    match ib.ic_input_name with\n    | From_channel _ic -> \"unnamed Stdlib input channel\"\n    | From_file (fname, _ic) -> fname\n    | From_function -> \"unnamed function\"\n    | From_string -> \"unnamed character string\"\n\n\n  let char_count ib =\n    if ib.ic_current_char_is_valid\n    then ib.ic_char_count - 1\n    else ib.ic_char_count\n\n\n  let line_count ib = ib.ic_line_count\n\n  let reset_token ib = Buffer.reset ib.ic_token_buffer\n\n  let invalidate_current_char ib = ib.ic_current_char_is_valid <- false\n\n  let token ib =\n    let token_buffer = ib.ic_token_buffer in\n    let tok = Buffer.contents token_buffer in\n    Buffer.clear token_buffer;\n    ib.ic_token_count <- succ ib.ic_token_count;\n    tok\n\n\n  let token_count ib = ib.ic_token_count\n\n  let skip_char width ib =\n    invalidate_current_char ib;\n    width\n\n\n  let ignore_char width ib = skip_char (width - 1) ib\n\n  let store_char width ib c =\n    Buffer.add_char ib.ic_token_buffer c;\n    ignore_char width ib\n\n\n  let default_token_buffer_size = 1024\n\n  let create iname next = {\n    ic_eof = false;\n    ic_current_char = null_char;\n    ic_current_char_is_valid = false;\n    ic_char_count = 0;\n    ic_line_count = 0;\n    ic_token_count = 0;\n    ic_get_next_char = next;\n    ic_token_buffer = Buffer.create default_token_buffer_size;\n    ic_input_name = iname;\n  }\n\n\n  let from_string s =\n    let i = ref 0 in\n    let len = String.length s in\n    let next () =\n      if !i >= len then raise End_of_file else\n      let c = s.[!i] in\n      incr i;\n      c in\n    create From_string next\n\n\n  let from_function = create From_function\n\n  (* Scanning from an input channel. *)\n\n  (* Position of the problem:\n\n     We cannot prevent the scanning mechanism to use one lookahead character,\n     if needed by the semantics of the format string specifications (e.g. a\n     trailing 'skip space' specification in the format string); in this case,\n     the mandatory lookahead character is indeed read from the input and not\n     used to return the token read. It is thus mandatory to be able to store\n     an unused lookahead character somewhere to get it as the first character\n     of the next scan.\n\n     To circumvent this problem, all the scanning functions get a low level\n     input buffer argument where they store the lookahead character when\n     needed; additionally, the input buffer is the only source of character of\n     a scanner. The [scanbuf] input buffers are defined in module {!Scanning}.\n\n     Now we understand that it is extremely important that related and\n     successive calls to scanners indeed read from the same input buffer.\n     In effect, if a scanner [scan1] is reading from [ib1] and stores an\n     unused lookahead character [c1] into its input buffer [ib1], then\n     another scanner [scan2] not reading from the same buffer [ib1] will miss\n     the character [c1], seemingly vanished in the air from the point of view\n     of [scan2].\n\n     This mechanism works perfectly to read from strings, from files, and from\n     functions, since in those cases, allocating two buffers reading from the\n     same source is unnatural.\n\n     Still, there is a difficulty in the case of scanning from an input\n     channel. In effect, when scanning from an input channel [ic], this channel\n     may not have been allocated from within this library. Hence, it may be\n     shared (two functions of the user's program may successively read from\n     [ic]). This is highly error prone since, one of the function may seek the\n     input channel, while the other function has still an unused lookahead\n     character in its input buffer. In conclusion, you should never mix direct\n     low level reading and high level scanning from the same input channel.\n\n  *)\n\n  (* Perform bufferized input to improve efficiency. *)\n  let file_buffer_size = ref 1024\n\n  (* The scanner closes the input channel at end of input. *)\n  let scan_close_at_end ic = Stdlib.close_in ic; raise End_of_file\n\n  (* The scanner does not close the input channel at end of input:\n     it just raises [End_of_file]. *)\n  let scan_raise_at_end _ic = raise End_of_file\n\n  let from_ic scan_close_ic iname ic =\n    let len = !file_buffer_size in\n    let buf = Bytes.create len in\n    let i = ref 0 in\n    let lim = ref 0 in\n    let eof = ref false in\n    let next () =\n      if !i < !lim then begin let c = Bytes.get buf !i in incr i; c end else\n      if !eof then raise End_of_file else begin\n        lim := input ic buf 0 len;\n        if !lim = 0 then begin eof := true; scan_close_ic ic end else begin\n          i := 1;\n          Bytes.get buf 0\n        end\n      end in\n    create iname next\n\n\n  let from_ic_close_at_end = from_ic scan_close_at_end\n  let from_ic_raise_at_end = from_ic scan_raise_at_end\n\n  (* The scanning buffer reading from [Stdlib.stdin].\n     One could try to define [stdib] as a scanning buffer reading a character\n     at a time (no bufferization at all), but unfortunately the top-level\n     interaction would be wrong. This is due to some kind of\n     'race condition' when reading from [Stdlib.stdin],\n     since the interactive compiler and [Scanf.scanf] will simultaneously\n     read the material they need from [Stdlib.stdin]; then, confusion\n     will result from what should be read by the top-level and what should be\n     read by [Scanf.scanf].\n     This is even more complicated by the one character lookahead that\n     [Scanf.scanf] is sometimes obliged to maintain: the lookahead character\n     will be available for the next [Scanf.scanf] entry, seemingly coming from\n     nowhere.\n     Also no [End_of_file] is raised when reading from stdin: if not enough\n     characters have been read, we simply ask to read more. *)\n  let stdin =\n    from_ic scan_raise_at_end\n      (From_file (\"-\", Stdlib.stdin)) Stdlib.stdin\n\n\n  let stdib = stdin\n\n  let open_in_file open_in fname =\n    match fname with\n    | \"-\" -> stdin\n    | fname ->\n      let ic = open_in fname in\n      from_ic_close_at_end (From_file (fname, ic)) ic\n\n\n  let open_in = open_in_file Stdlib.open_in\n  let open_in_bin = open_in_file Stdlib.open_in_bin\n\n  let from_file = open_in\n  let from_file_bin = open_in_bin\n\n  let from_channel ic =\n    from_ic_raise_at_end (From_channel ic) ic\n\n\n  let close_in ib =\n    match ib.ic_input_name with\n    | From_channel ic ->\n      Stdlib.close_in ic\n    | From_file (_fname, ic) -> Stdlib.close_in ic\n    | From_function | From_string -> ()\n\n\n  (*\n     Obsolete: a memo [from_channel] version to build a [Scanning.in_channel]\n     scanning buffer out of a [Stdlib.in_channel].\n     This function was used to try to preserve the scanning\n     semantics for the (now obsolete) function [fscanf].\n     Given that all scanner must read from a [Scanning.in_channel] scanning\n     buffer, [fscanf] must read from one!\n     More precisely, given [ic], all successive calls [fscanf ic] must read\n     from the same scanning buffer.\n     This obliged this library to allocated scanning buffers that were\n     not properly garbage collectable, hence leading to memory leaks.\n     If you need to read from a [Stdlib.in_channel] input channel\n     [ic], simply define a [Scanning.in_channel] formatted input channel as in\n     [let ib = Scanning.from_channel ic], then use [Scanf.bscanf ib] as usual.\n  *)\n  let memo_from_ic =\n    let memo = ref [] in\n    (fun scan_close_ic ic ->\n     try List.assq ic !memo with\n     | Not_found ->\n       let ib =\n         from_ic scan_close_ic (From_channel ic) ic in\n       memo := (ic, ib) :: !memo;\n       ib)\n\n\n  (* Obsolete: see {!memo_from_ic} above. *)\n  let memo_from_channel = memo_from_ic scan_raise_at_end\n\nend\n\n\n(* Formatted input functions. *)\n\ntype ('a, 'b, 'c, 'd) scanner =\n     ('a, Scanning.in_channel, 'b, 'c, 'a -> 'd, 'd) format6 -> 'c\n\n\n(* Reporting errors. *)\nexception Scan_failure of string\n\nlet bad_input s = raise (Scan_failure s)\n\nlet bad_input_escape c =\n  bad_input (Printf.sprintf \"illegal escape character %C\" c)\n\n\nlet bad_token_length message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        the specified length was too short for token\"\n       message)\n\n\nlet bad_end_of_input message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        premature end of file occurred before end of token\"\n       message)\n\n\nlet bad_float () =\n  bad_input \"no dot or exponent part found in float token\"\n\n\nlet bad_hex_float () =\n  bad_input \"not a valid float in hexadecimal notation\"\n\n\nlet character_mismatch_err c ci =\n  Printf.sprintf \"looking for %C, found %C\" c ci\n\n\nlet character_mismatch c ci =\n  bad_input (character_mismatch_err c ci)\n\n\nlet rec skip_whites ib =\n  let c = Scanning.peek_char ib in\n  if not (Scanning.eof ib) then begin\n    match c with\n    | ' ' | '\\t' | '\\n' | '\\r' ->\n      Scanning.invalidate_current_char ib; skip_whites ib\n    | _ -> ()\n  end\n\n\n(* Checking that [c] is indeed in the input, then skips it.\n   In this case, the character [c] has been explicitly specified in the\n   format as being mandatory in the input; hence we should fail with\n   [End_of_file] in case of end_of_input.\n   (Remember that [Scan_failure] is raised only when (we can prove by\n   evidence) that the input does not match the format string given. We must\n   thus differentiate [End_of_file] as an error due to lack of input, and\n   [Scan_failure] which is due to provably wrong input. I am not sure this is\n   worth the burden: it is complex and somehow subliminal; should be clearer\n   to fail with Scan_failure \"Not enough input to complete scanning\"!)\n\n   That's why, waiting for a better solution, we use checked_peek_char here.\n   We are also careful to treat \"\\r\\n\" in the input as an end of line marker:\n   it always matches a '\\n' specification in the input format string. *)\nlet rec check_char ib c =\n  match c with\n  | ' ' -> skip_whites ib\n  | '\\n' -> check_newline ib\n  | c -> check_this_char ib c\n\nand check_this_char ib c =\n  let ci = Scanning.checked_peek_char ib in\n  if ci = c then Scanning.invalidate_current_char ib else\n  character_mismatch c ci\n\nand check_newline ib =\n  let ci = Scanning.checked_peek_char ib in\n  match ci with\n  | '\\n' -> Scanning.invalidate_current_char ib\n  | '\\r' -> Scanning.invalidate_current_char ib; check_this_char ib '\\n'\n  | _ -> character_mismatch '\\n' ci\n\n\n(* Extracting tokens from the output token buffer. *)\n\nlet token_char ib = (Scanning.token ib).[0]\n\nlet token_string = Scanning.token\n\nlet token_bool ib =\n  match Scanning.token ib with\n  | \"true\" -> true\n  | \"false\" -> false\n  | s -> bad_input (Printf.sprintf \"invalid boolean '%s'\" s)\n\n\n(* The type of integer conversions. *)\ntype integer_conversion =\n  | B_conversion (* Unsigned binary conversion *)\n  | D_conversion (* Signed decimal conversion *)\n  | I_conversion (* Signed integer conversion *)\n  | O_conversion (* Unsigned octal conversion *)\n  | U_conversion (* Unsigned decimal conversion *)\n  | X_conversion (* Unsigned hexadecimal conversion *)\n\n\nlet integer_conversion_of_char = function\n  | 'b' -> B_conversion\n  | 'd' -> D_conversion\n  | 'i' -> I_conversion\n  | 'o' -> O_conversion\n  | 'u' -> U_conversion\n  | 'x' | 'X' -> X_conversion\n  | _ -> assert false\n\n\n(* Extract an integer literal token.\n   Since the functions Stdlib.*int*_of_string do not accept a leading +,\n   we skip it if necessary. *)\nlet token_int_literal conv ib =\n  let tok =\n    match conv with\n    | D_conversion | I_conversion -> Scanning.token ib\n    | U_conversion -> \"0u\" ^ Scanning.token ib\n    | O_conversion -> \"0o\" ^ Scanning.token ib\n    | X_conversion -> \"0x\" ^ Scanning.token ib\n    | B_conversion -> \"0b\" ^ Scanning.token ib in\n  let l = String.length tok in\n  if l = 0 || tok.[0] <> '+' then tok else String.sub tok 1 (l - 1)\n\n\n(* All the functions that convert a string to a number raise the exception\n   Failure when the conversion is not possible.\n   This exception is then trapped in [kscanf]. *)\nlet token_int conv ib = int_of_string (token_int_literal conv ib)\n\nlet token_float ib = float_of_string (Scanning.token ib)\n\n(* To scan native ints, int32 and int64 integers.\n   We cannot access to conversions to/from strings for those types,\n   Nativeint.of_string, Int32.of_string, and Int64.of_string,\n   since those modules are not available to [Scanf].\n   However, we can bind and use the corresponding primitives that are\n   available in the runtime. *)\nexternal nativeint_of_string : string -> nativeint\n  = \"caml_nativeint_of_string\"\n\nexternal int32_of_string : string -> int32\n  = \"caml_int32_of_string\"\n\nexternal int64_of_string : string -> int64\n  = \"caml_int64_of_string\"\n\n\nlet token_nativeint conv ib = nativeint_of_string (token_int_literal conv ib)\nlet token_int32 conv ib = int32_of_string (token_int_literal conv ib)\nlet token_int64 conv ib = int64_of_string (token_int_literal conv ib)\n\n(* Scanning numbers. *)\n\n(* Digits scanning functions suppose that one character has been checked and\n   is available, since they return at end of file with the currently found\n   token selected.\n\n   Put it in another way, the digits scanning functions scan for a possibly\n   empty sequence of digits, (hence, a successful scanning from one of those\n   functions does not imply that the token is a well-formed number: to get a\n   true number, it is mandatory to check that at least one valid digit is\n   available before calling one of the digit scanning functions). *)\n\n(* The decimal case is treated especially for optimization purposes. *)\nlet rec scan_decimal_digit_star width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digit_star width ib\n  | '_' ->\n    let width = Scanning.ignore_char width ib in\n    scan_decimal_digit_star width ib\n  | _ -> width\n\n\nlet scan_decimal_digit_plus width ib =\n  if width = 0 then bad_token_length \"decimal digits\" else\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '0' .. '9' ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digit_star width ib\n  | c ->\n    bad_input (Printf.sprintf \"character %C is not a decimal digit\" c)\n\n\n(* To scan numbers from other bases, we use a predicate argument to\n   scan digits. *)\nlet scan_digit_star digitp width ib =\n  let rec scan_digits width ib =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    match c with\n    | c when digitp c ->\n      let width = Scanning.store_char width ib c in\n      scan_digits width ib\n    | '_' ->\n      let width = Scanning.ignore_char width ib in\n      scan_digits width ib\n    | _ -> width in\n  scan_digits width ib\n\n\nlet scan_digit_plus basis digitp width ib =\n  (* Ensure we have got enough width left,\n     and read at least one digit. *)\n  if width = 0 then bad_token_length \"digits\" else\n  let c = Scanning.checked_peek_char ib in\n  if digitp c then\n    let width = Scanning.store_char width ib c in\n    scan_digit_star digitp width ib\n  else\n    bad_input (Printf.sprintf \"character %C is not a valid %s digit\" c basis)\n\n\nlet is_binary_digit = function\n  | '0' .. '1' -> true\n  | _ -> false\n\n\nlet scan_binary_int = scan_digit_plus \"binary\" is_binary_digit\n\nlet is_octal_digit = function\n  | '0' .. '7' -> true\n  | _ -> false\n\n\nlet scan_octal_int = scan_digit_plus \"octal\" is_octal_digit\n\nlet is_hexa_digit = function\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' -> true\n  | _ -> false\n\n\nlet scan_hexadecimal_int = scan_digit_plus \"hexadecimal\" is_hexa_digit\n\n(* Scan a decimal integer. *)\nlet scan_unsigned_decimal_int = scan_decimal_digit_plus\n\nlet scan_sign width ib =\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '+' -> Scanning.store_char width ib c\n  | '-' -> Scanning.store_char width ib c\n  | _ -> width\n\n\nlet scan_optionally_signed_decimal_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_decimal_int width ib\n\n\n(* Scan an unsigned integer that could be given in any (common) basis.\n   If digits are prefixed by one of 0x, 0X, 0o, or 0b, the number is\n   assumed to be written respectively in hexadecimal, hexadecimal,\n   octal, or binary. *)\nlet scan_unsigned_int width ib =\n  match Scanning.checked_peek_char ib with\n  | '0' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    begin match c with\n    | 'x' | 'X' -> scan_hexadecimal_int (Scanning.store_char width ib c) ib\n    | 'o' -> scan_octal_int (Scanning.store_char width ib c) ib\n    | 'b' -> scan_binary_int (Scanning.store_char width ib c) ib\n    | _ -> scan_decimal_digit_star width ib end\n  | _ -> scan_unsigned_decimal_int width ib\n\n\nlet scan_optionally_signed_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_int width ib\n\n\nlet scan_int_conversion conv width ib =\n  match conv with\n  | B_conversion -> scan_binary_int width ib\n  | D_conversion -> scan_optionally_signed_decimal_int width ib\n  | I_conversion -> scan_optionally_signed_int width ib\n  | O_conversion -> scan_octal_int width ib\n  | U_conversion -> scan_unsigned_decimal_int width ib\n  | X_conversion -> scan_hexadecimal_int width ib\n\n\n(* Scanning floating point numbers. *)\n\n(* Fractional part is optional and can be reduced to 0 digits. *)\nlet scan_fractional_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    scan_decimal_digit_star (Scanning.store_char width ib c) ib\n  | _ -> width\n\n\n(* Exp part is optional and can be reduced to 0 digits. *)\nlet scan_exponent_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | 'e' | 'E' as c ->\n    scan_optionally_signed_decimal_int (Scanning.store_char width ib c) ib\n  | _ -> width\n\n\n(* Scan the integer part of a floating point number, (not using the\n   OCaml lexical convention since the integer part can be empty):\n   an optional sign, followed by a possibly empty sequence of decimal\n   digits (e.g. -.1). *)\nlet scan_integer_part width ib =\n  let width = scan_sign width ib in\n  scan_decimal_digit_star width ib\n\n\n(*\n   For the time being we have (as found in scanf.mli):\n   the field width is composed of an optional integer literal\n   indicating the maximal width of the token to read.\n   Unfortunately, the type-checker let the user write an optional precision,\n   since this is valid for printf format strings.\n\n   Thus, the next step for Scanf is to support a full width and precision\n   indication, more or less similar to the one for printf, possibly extended\n   to the specification of a [max, min] range for the width of the token read\n   for strings. Something like the following spec for scanf.mli:\n\n   The optional [width] is an integer indicating the maximal\n   width of the token read. For instance, [%6d] reads an integer,\n   having at most 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer:\n\n   - in the floating point number conversions ([%f], [%e], [%g], [%F], [%E],\n   and [%F] conversions, the [precision] indicates the maximum number of\n   digits that may follow the decimal point. For instance, [%.4f] reads a\n   [float] with at most 4 fractional digits,\n\n   - in the string conversions ([%s], [%S], [%\\[ range \\]]), and in the\n   integer number conversions ([%i], [%d], [%u], [%x], [%o], and their\n   [int32], [int64], and [native_int] correspondent), the [precision]\n   indicates the required minimum width of the token read,\n\n   - on all other conversions, the width and precision specify the [max, min]\n   range for the width of the token read.\n*)\nlet scan_float width precision ib =\n  let width = scan_integer_part width ib in\n  if width = 0 then width, precision else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width, precision else\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    let precision = min width precision in\n    let width = width - (precision - scan_fractional_part precision ib) in\n    scan_exponent_part width ib, precision\n  | _ ->\n    scan_exponent_part width ib, precision\n\n\nlet check_case_insensitive_string width ib error str =\n  let lowercase c =\n    match c with\n    | 'A' .. 'Z' ->\n      char_of_int (int_of_char c - int_of_char 'A' + int_of_char 'a')\n    | _ -> c in\n  let len = String.length str in\n  let width = ref width in\n  for i = 0 to len - 1 do\n    let c = Scanning.peek_char ib in\n    if lowercase c <> lowercase str.[i] then error ();\n    if !width = 0 then error ();\n    width := Scanning.store_char !width ib c;\n  done;\n  !width\n\n\nlet scan_hex_float width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n  let width = scan_sign width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n  match Scanning.peek_char ib with\n  | '0' as c -> (\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    let width = check_case_insensitive_string width ib bad_hex_float \"x\" in\n    if width = 0 || Scanning.end_of_input ib then width else\n      let width = match Scanning.peek_char ib with\n        | '.' | 'p' | 'P' -> width\n        | _ -> scan_hexadecimal_int width ib in\n      if width = 0 || Scanning.end_of_input ib then width else\n        let width = match Scanning.peek_char ib with\n          | '.' as c -> (\n            let width = Scanning.store_char width ib c in\n            if width = 0 || Scanning.end_of_input ib then width else\n              match Scanning.peek_char ib with\n              | 'p' | 'P' -> width\n              | _ ->\n                let precision = min width precision in\n                width - (precision - scan_hexadecimal_int precision ib)\n          )\n          | _ -> width in\n        if width = 0 || Scanning.end_of_input ib then width else\n          match Scanning.peek_char ib with\n          | 'p' | 'P' as c ->\n            let width = Scanning.store_char width ib c in\n            if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n            scan_optionally_signed_decimal_int width ib\n          | _ -> width\n  )\n  | 'n' | 'N' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    check_case_insensitive_string width ib bad_hex_float \"an\"\n  | 'i' | 'I' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    check_case_insensitive_string width ib bad_hex_float \"nfinity\"\n  | _ -> bad_hex_float ()\n\n\nlet scan_caml_float_rest width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let width = scan_decimal_digit_star width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let c = Scanning.peek_char ib in\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    (* The effective width available for scanning the fractional part is\n       the minimum of declared precision and width left. *)\n    let precision = min width precision in\n    (* After scanning the fractional part with [precision] provisional width,\n       [width_precision] is left. *)\n    let width_precision = scan_fractional_part precision ib in\n    (* Hence, scanning the fractional part took exactly\n       [precision - width_precision] chars. *)\n    let frac_width = precision - width_precision in\n    (* And new provisional width is [width - width_precision. *)\n    let width = width - frac_width in\n    scan_exponent_part width ib\n  | 'e' | 'E' ->\n    scan_exponent_part width ib\n  | _ -> bad_float ()\n\n\nlet scan_caml_float width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let width = scan_sign width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  match Scanning.peek_char ib with\n  | '0' as c -> (\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_float ();\n    match Scanning.peek_char ib with\n    | 'x' | 'X' as c -> (\n      let width = Scanning.store_char width ib c in\n      if width = 0 || Scanning.end_of_input ib then bad_float ();\n      let width = scan_hexadecimal_int width ib in\n      if width = 0 || Scanning.end_of_input ib then bad_float ();\n      let width = match Scanning.peek_char ib with\n        | '.' as c -> (\n          let width = Scanning.store_char width ib c in\n          if width = 0 || Scanning.end_of_input ib then width else\n            match Scanning.peek_char ib with\n            | 'p' | 'P' -> width\n            | _ ->\n              let precision = min width precision in\n              width - (precision - scan_hexadecimal_int precision ib)\n        )\n        | 'p' | 'P' -> width\n        | _ -> bad_float () in\n      if width = 0 || Scanning.end_of_input ib then width else\n        match Scanning.peek_char ib with\n        | 'p' | 'P' as c ->\n          let width = Scanning.store_char width ib c in\n          if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n          scan_optionally_signed_decimal_int width ib\n        | _ -> width\n    )\n    | _ ->\n      scan_caml_float_rest width precision ib\n  )\n  | '1' .. '9' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_float ();\n    scan_caml_float_rest width precision ib\n(* Special case of nan and infinity:\n  | 'i' ->\n  | 'n' ->\n*)\n  | _ -> bad_float ()\n\n\n(* Scan a regular string:\n   stops when encountering a space, if no scanning indication has been given;\n   otherwise, stops when encountering the characters in the scanning\n   indication [stp].\n   It also stops at end of file or when the maximum number of characters has\n   been read. *)\nlet scan_string stp width ib =\n  let rec loop width =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n      match stp with\n      | Some c' when c = c' -> Scanning.skip_char width ib\n      | Some _ -> loop (Scanning.store_char width ib c)\n      | None ->\n        match c with\n        | ' ' | '\\t' | '\\n' | '\\r' -> width\n        | _ -> loop (Scanning.store_char width ib c) in\n  loop width\n\n\n(* Scan a char: peek strictly one character in the input, whatsoever. *)\nlet scan_char width ib =\n  (* The case width = 0 could not happen here, since it is tested before\n     calling scan_char, in the main scanning function.\n    if width = 0 then bad_token_length \"a character\" else *)\n  Scanning.store_char width ib (Scanning.checked_peek_char ib)\n\n\nlet char_for_backslash = function\n  | 'n' -> '\\010'\n  | 'r' -> '\\013'\n  | 'b' -> '\\008'\n  | 't' -> '\\009'\n  | c -> c\n\n\n(* The integer value corresponding to the facial value of a valid\n   decimal digit character. *)\nlet decimal_value_of_char c = int_of_char c - int_of_char '0'\n\nlet char_for_decimal_code c0 c1 c2 =\n  let c =\n    100 * decimal_value_of_char c0 +\n     10 * decimal_value_of_char c1 +\n          decimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf\n         \"bad character decimal encoding \\\\%c%c%c\" c0 c1 c2) else\n  char_of_int c\n\n\n(* The integer value corresponding to the facial value of a valid\n   hexadecimal digit character. *)\nlet hexadecimal_value_of_char c =\n  let d = int_of_char c in\n  (* Could also be:\n    if d <= int_of_char '9' then d - int_of_char '0' else\n    if d <= int_of_char 'F' then 10 + d - int_of_char 'A' else\n    if d <= int_of_char 'f' then 10 + d - int_of_char 'a' else assert false\n  *)\n  if d >= int_of_char 'a' then\n    d - 87 (* 10 + int_of_char c - int_of_char 'a' *) else\n  if d >= int_of_char 'A' then\n    d - 55  (* 10 + int_of_char c - int_of_char 'A' *) else\n    d - int_of_char '0'\n\n\nlet char_for_hexadecimal_code c1 c2 =\n  let c =\n    16 * hexadecimal_value_of_char c1 +\n         hexadecimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf \"bad character hexadecimal encoding \\\\%c%c\" c1 c2) else\n  char_of_int c\n\n\n(* Called in particular when encountering '\\\\' as starter of a char.\n   Stops before the corresponding '\\''. *)\nlet check_next_char message width ib =\n  if width = 0 then bad_token_length message else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then bad_end_of_input message else\n  c\n\n\nlet check_next_char_for_char = check_next_char \"a Char\"\nlet check_next_char_for_string = check_next_char \"a String\"\n\nlet scan_backslash_char width ib =\n  match check_next_char_for_char width ib with\n  | '\\\\' | '\\'' | '\\\"' | 'n' | 't' | 'b' | 'r' as c ->\n    Scanning.store_char width ib (char_for_backslash c)\n  | '0' .. '9' as c ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' as c -> c\n      | c -> bad_input_escape c in\n    let c0 = c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_decimal_code c0 c1 c2)\n  | 'x' ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' as c -> c\n      | c -> bad_input_escape c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_hexadecimal_code c1 c2)\n  | c ->\n    bad_input_escape c\n\n\n(* Scan a character (an OCaml token). *)\nlet scan_caml_char width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\'' -> find_char (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\'' c\n\n  and find_char width =\n    match check_next_char_for_char width ib with\n    | '\\\\' ->\n      find_stop (scan_backslash_char (Scanning.ignore_char width ib) ib)\n    | c ->\n      find_stop (Scanning.store_char width ib c)\n\n  and find_stop width =\n    match check_next_char_for_char width ib with\n    | '\\'' -> Scanning.ignore_char width ib\n    | c -> character_mismatch '\\'' c in\n\n  find_start width\n\n\n(* Scan a delimited string (an OCaml token). *)\nlet scan_caml_string width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\\"' -> find_stop (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\\"' c\n\n  and find_stop width =\n    match check_next_char_for_string width ib with\n    | '\\\"' -> Scanning.ignore_char width ib\n    | '\\\\' -> scan_backslash (Scanning.ignore_char width ib)\n    | c -> find_stop (Scanning.store_char width ib c)\n\n  and scan_backslash width =\n    match check_next_char_for_string width ib with\n    | '\\r' -> skip_newline (Scanning.ignore_char width ib)\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (scan_backslash_char width ib)\n\n  and skip_newline width =\n    match check_next_char_for_string width ib with\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (Scanning.store_char width ib '\\r')\n\n  and skip_spaces width =\n    match check_next_char_for_string width ib with\n    | ' ' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop width in\n\n  find_start width\n\n\n(* Scan a boolean (an OCaml token). *)\nlet scan_bool ib =\n  let c = Scanning.checked_peek_char ib in\n  let m =\n    match c with\n    | 't' -> 4\n    | 'f' -> 5\n    | c ->\n      bad_input\n        (Printf.sprintf \"the character %C cannot start a boolean\" c) in\n  scan_string None m ib\n\n\n(* Scan a string containing elements in char_set and terminated by scan_indic\n   if provided. *)\nlet scan_chars_in_char_set char_set scan_indic width ib =\n  let rec scan_chars i stp =\n    let c = Scanning.peek_char ib in\n    if i > 0 && not (Scanning.eof ib) &&\n       is_in_char_set char_set c &&\n       int_of_char c <> stp then\n      let _ = Scanning.store_char max_int ib c in\n      scan_chars (i - 1) stp in\n  match scan_indic with\n  | None -> scan_chars width (-1);\n  | Some c ->\n    scan_chars width (int_of_char c);\n    if not (Scanning.eof ib) then\n      let ci = Scanning.peek_char ib in\n      if c = ci\n      then Scanning.invalidate_current_char ib\n      else character_mismatch c ci\n\n\n(* The global error report function for [Scanf]. *)\nlet scanf_bad_input ib = function\n  | Scan_failure s | Failure s ->\n    let i = Scanning.char_count ib in\n    bad_input (Printf.sprintf \"scanf: bad input at char number %i: %s\" i s)\n  | x -> raise x\n\n\n(* Get the content of a counter from an input buffer. *)\nlet get_counter ib counter =\n  match counter with\n  | Line_counter -> Scanning.line_count ib\n  | Char_counter -> Scanning.char_count ib\n  | Token_counter -> Scanning.token_count ib\n\n\n(* Compute the width of a padding option (see \"%42{\" and \"%123(\"). *)\nlet width_of_pad_opt pad_opt = match pad_opt with\n  | None -> max_int\n  | Some width -> width\n\n\nlet stopper_of_formatting_lit fmting =\n  if fmting = Escaped_percent then '%', \"\" else\n    let str = string_of_formatting_lit fmting in\n    let stp = str.[1] in\n    let sub_str = String.sub str 2 (String.length str - 2) in\n    stp, sub_str\n\n\n(******************************************************************************)\n                           (* Reader management *)\n\n(* A call to take_format_readers on a format is evaluated into functions\n   taking readers as arguments and aggregate them into an heterogeneous list *)\n(* When all readers are taken, finally pass the list of the readers to the\n   continuation k. *)\nlet rec take_format_readers : type a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n    d =\nfun k fmt -> match fmt with\n  | Reader fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt_rest\n  | Char rest                        -> take_format_readers k rest\n  | Caml_char rest                   -> take_format_readers k rest\n  | String (_, rest)                 -> take_format_readers k rest\n  | Caml_string (_, rest)            -> take_format_readers k rest\n  | Int (_, _, _, rest)              -> take_format_readers k rest\n  | Int32 (_, _, _, rest)            -> take_format_readers k rest\n  | Nativeint (_, _, _, rest)        -> take_format_readers k rest\n  | Int64 (_, _, _, rest)            -> take_format_readers k rest\n  | Float (_, _, _, rest)            -> take_format_readers k rest\n  | Bool (_, rest)                   -> take_format_readers k rest\n  | Alpha rest                       -> take_format_readers k rest\n  | Theta rest                       -> take_format_readers k rest\n  | Flush rest                       -> take_format_readers k rest\n  | String_literal (_, rest)         -> take_format_readers k rest\n  | Char_literal (_, rest)           -> take_format_readers k rest\n  | Custom (_, _, rest)              -> take_format_readers k rest\n\n  | Scan_char_set (_, _, rest)       -> take_format_readers k rest\n  | Scan_get_counter (_, rest)       -> take_format_readers k rest\n  | Scan_next_char rest              -> take_format_readers k rest\n\n  | Formatting_lit (_, rest)         -> take_format_readers k rest\n  | Formatting_gen (Open_tag (Format (fmt, _)), rest) ->\n      take_format_readers k (concat_fmt fmt rest)\n  | Formatting_gen (Open_box (Format (fmt, _)), rest) ->\n      take_format_readers k (concat_fmt fmt rest)\n\n  | Format_arg (_, _, rest)          -> take_format_readers k rest\n  | Format_subst (_, fmtty, rest)    ->\n     take_fmtty_format_readers k (erase_rel (symm fmtty)) rest\n  | Ignored_param (ign, rest)        -> take_ignored_format_readers k ign rest\n\n  | End_of_format                    -> k Nil\n\n(* Take readers associated to an fmtty coming from a Format_subst \"%(...%)\". *)\nand take_fmtty_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) fmtty ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k fmtty fmt -> match fmtty with\n  | Reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Ignored_reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Char_ty rest                -> take_fmtty_format_readers k rest fmt\n  | String_ty rest              -> take_fmtty_format_readers k rest fmt\n  | Int_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Int32_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Nativeint_ty rest           -> take_fmtty_format_readers k rest fmt\n  | Int64_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Float_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Bool_ty rest                -> take_fmtty_format_readers k rest fmt\n  | Alpha_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Theta_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Any_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Format_arg_ty (_, rest)     -> take_fmtty_format_readers k rest fmt\n  | End_of_fmtty                -> take_format_readers k fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    take_fmtty_format_readers k (concat_fmtty ty rest) fmt\n\n(* Take readers associated to an ignored parameter. *)\nand take_ignored_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) ignored ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k ign fmt -> match ign with\n  | Ignored_reader ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt\n  | Ignored_char                    -> take_format_readers k fmt\n  | Ignored_caml_char               -> take_format_readers k fmt\n  | Ignored_string _                -> take_format_readers k fmt\n  | Ignored_caml_string _           -> take_format_readers k fmt\n  | Ignored_int (_, _)              -> take_format_readers k fmt\n  | Ignored_int32 (_, _)            -> take_format_readers k fmt\n  | Ignored_nativeint (_, _)        -> take_format_readers k fmt\n  | Ignored_int64 (_, _)            -> take_format_readers k fmt\n  | Ignored_float (_, _)            -> take_format_readers k fmt\n  | Ignored_bool _                  -> take_format_readers k fmt\n  | Ignored_format_arg _            -> take_format_readers k fmt\n  | Ignored_format_subst (_, fmtty) -> take_fmtty_format_readers k fmtty fmt\n  | Ignored_scan_char_set _         -> take_format_readers k fmt\n  | Ignored_scan_get_counter _      -> take_format_readers k fmt\n  | Ignored_scan_next_char          -> take_format_readers k fmt\n\n(******************************************************************************)\n                          (* Generic scanning *)\n\n(* Make a generic scanning function. *)\n(* Scan a stream according to a format and readers obtained by\n   take_format_readers, and aggregate scanned values into an\n   heterogeneous list. *)\n(* Return the heterogeneous list of scanned values. *)\nlet rec make_scanf : type a c d e f.\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, e) heter_list -> (a, f) heter_list =\nfun ib fmt readers -> match fmt with\n  | Char rest ->\n    let _ = scan_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n  | Caml_char rest ->\n    let _ = scan_caml_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | String (pad, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let scan width _ ib = scan_string (Some stp) width ib in\n    let str_rest = String_literal (str, rest) in\n    pad_prec_scanf ib str_rest readers pad No_precision scan token_string\n  | String (pad, Formatting_gen (Open_tag (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '{') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan\n                   token_string\n  | String (pad, Formatting_gen (Open_box (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '[') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan\n                   token_string\n  | String (pad, rest) ->\n    let scan width _ ib = scan_string None width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n\n  | Caml_string (pad, rest) ->\n    let scan width _ ib = scan_caml_string width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n  | Int (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int c)\n  | Int32 (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int32 c)\n  | Nativeint (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_nativeint c)\n  | Int64 (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int64 c)\n  | Float ((_, (Float_F | Float_CF)), pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_caml_float token_float\n  | Float ((_, (Float_f | Float_e | Float_E | Float_g | Float_G)),\n           pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_float token_float\n  | Float ((_, (Float_h | Float_H)), pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_hex_float token_float\n  | Bool (pad, rest) ->\n    let scan _ _ ib = scan_bool ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_bool\n  | Alpha _ ->\n    invalid_arg \"scanf: bad conversion \\\"%a\\\"\"\n  | Theta _ ->\n    invalid_arg \"scanf: bad conversion \\\"%t\\\"\"\n  | Custom _ ->\n    invalid_arg \"scanf: bad conversion \\\"%?\\\" (custom converter)\"\n  | Reader fmt_rest ->\n    begin match readers with\n    | Cons (reader, readers_rest) ->\n        let x = reader ib in\n        Cons (x, make_scanf ib fmt_rest readers_rest)\n    | Nil ->\n        invalid_arg \"scanf: missing reader\"\n    end\n  | Flush rest ->\n    if Scanning.end_of_input ib then make_scanf ib rest readers\n    else bad_input \"end of input not found\"\n\n  | String_literal (str, rest) ->\n    String.iter (check_char ib) str;\n    make_scanf ib rest readers\n  | Char_literal (chr, rest) ->\n    check_char ib chr;\n    make_scanf ib rest readers\n\n  | Format_arg (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt =\n      try format_of_string_fmtty s fmtty\n      with Failure msg -> bad_input msg\n    in\n    Cons (fmt, make_scanf ib rest readers)\n  | Format_subst (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt, fmt' =\n      try\n        let Fmt_EBB fmt = fmt_ebb_of_string s in\n        let Fmt_EBB fmt' = fmt_ebb_of_string s in\n        (* TODO: find a way to avoid reparsing twice *)\n\n        (* TODO: these type-checks below *can* fail because of type\n           ambiguity in presence of ignored-readers: \"%_r%d\" and \"%d%_r\"\n           are typed in the same way.\n\n           # Scanf.sscanf \"\\\"%_r%d\\\"3\" \"%(%d%_r%)\" ignore\n             (fun fmt n -> string_of_format fmt, n)\n           Exception: CamlinternalFormat.Type_mismatch.\n\n           We should properly catch this exception.\n        *)\n        type_format fmt (erase_rel fmtty),\n        type_format fmt' (erase_rel (symm fmtty))\n      with Failure msg -> bad_input msg\n    in\n    Cons (Format (fmt, s),\n          make_scanf ib (concat_fmt fmt' rest) readers)\n\n  | Scan_char_set (width_opt, char_set, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let width = width_of_pad_opt width_opt in\n    scan_chars_in_char_set char_set (Some stp) width ib;\n    let s = token_string ib in\n    let str_rest = String_literal (str, rest) in\n    Cons (s, make_scanf ib str_rest readers)\n  | Scan_char_set (width_opt, char_set, rest) ->\n    let width = width_of_pad_opt width_opt in\n    scan_chars_in_char_set char_set None width ib;\n    let s = token_string ib in\n    Cons (s, make_scanf ib rest readers)\n  | Scan_get_counter (counter, rest) ->\n    let count = get_counter ib counter in\n    Cons (count, make_scanf ib rest readers)\n  | Scan_next_char rest ->\n    let c = Scanning.checked_peek_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | Formatting_lit (formatting_lit, rest) ->\n    String.iter (check_char ib) (string_of_formatting_lit formatting_lit);\n    make_scanf ib rest readers\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '{';\n    make_scanf ib (concat_fmt fmt' rest) readers\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '[';\n    make_scanf ib (concat_fmt fmt' rest) readers\n\n  | Ignored_param (ign, rest) ->\n    let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n    begin match make_scanf ib fmt' readers with\n    | Cons (_, arg_rest) -> arg_rest\n    | Nil -> assert false\n    end\n\n  | End_of_format ->\n    Nil\n\n(* Case analysis on padding and precision. *)\n(* Reject formats containing \"%*\" or \"%.*\". *)\n(* Pass padding and precision to the generic scanner `scan'. *)\nand pad_prec_scanf : type a c d e f x y z t .\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, e) heter_list -> (x, y) padding -> (y, z -> a) precision ->\n      (int -> int -> Scanning.in_channel -> t) ->\n      (Scanning.in_channel -> z) ->\n      (x, f) heter_list =\nfun ib fmt readers pad prec scan token -> match pad, prec with\n  | No_padding, No_precision ->\n    let _ = scan max_int max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | No_padding, Lit_precision p ->\n    let _ = scan max_int p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), No_precision ->\n    let _ = scan w max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), Lit_precision p ->\n    let _ = scan w p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding (Left, _), _ ->\n    invalid_arg \"scanf: bad conversion \\\"%-\\\"\"\n  | Lit_padding ((Right | Zeros), _), Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | Arg_padding _, _ ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | No_padding, Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n\n(******************************************************************************)\n            (* Defining [scanf] and various flavors of [scanf] *)\n\ntype 'a kscanf_result = Args of 'a | Exc of exn\n\nlet kscanf ib ef (Format (fmt, str)) =\n  let rec apply : type a b . a -> (a, b) heter_list -> b =\n    fun f args -> match args with\n    | Cons (x, r) -> apply (f x) r\n    | Nil -> f\n  in\n  let k readers f =\n    Scanning.reset_token ib;\n    match try Args (make_scanf ib fmt readers) with\n      | (Scan_failure _ | Failure _ | End_of_file) as exc -> Exc exc\n      | Invalid_argument msg ->\n        invalid_arg (msg ^ \" in format \\\"\" ^ String.escaped str ^ \"\\\"\")\n    with\n      | Args args -> apply f args\n      | Exc exc -> ef ib exc\n  in\n  take_format_readers k fmt\n\n(***)\n\nlet kbscanf = kscanf\nlet bscanf ib fmt = kbscanf ib scanf_bad_input fmt\n\nlet ksscanf s ef fmt = kbscanf (Scanning.from_string s) ef fmt\nlet sscanf s fmt = kbscanf (Scanning.from_string s) scanf_bad_input fmt\n\nlet scanf fmt = kscanf Scanning.stdib scanf_bad_input fmt\n\n(***)\n\n(* Scanning format strings. *)\nlet bscanf_format :\n  Scanning.in_channel -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun ib format f ->\n    let _ = scan_caml_string max_int ib in\n    let str = token_string ib in\n    let fmt' =\n      try format_of_string_format str format\n      with Failure msg -> bad_input msg in\n    f fmt'\n\n\nlet sscanf_format :\n  string -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun s format f -> bscanf_format (Scanning.from_string s) format f\n\n\nlet format_from_string s fmt =\n  sscanf_format (\"\\\"\" ^ String.escaped s ^ \"\\\"\") fmt (fun x -> x)\n\n\nlet unescaped s =\n  sscanf (\"\\\"\" ^ s ^ \"\\\"\") \"%S%!\" (fun x -> x)\n\n\n(* Deprecated *)\nlet kfscanf ic ef fmt = kbscanf (Scanning.memo_from_channel ic) ef fmt\nlet fscanf ic fmt = kscanf (Scanning.memo_from_channel ic) scanf_bad_input fmt\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun acc -> output_acc o acc; k o) End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun acc -> bufput_acc b acc; k b) End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","\nmodule MenhirBasics = struct\n  \n  exception Error = Parsing.Parse_error\n  \n  type token = \n    | VBAR\n    | TYPE_STRING\n    | TYPE_NAT\n    | TYPE_BOOL\n    | THEN\n    | STRING of (\n# 10 \"src/parser.mly\"\n       (string)\n# 16 \"src/parser.ml\"\n  )\n    | RPAREN\n    | RCURLY\n    | NAT of (\n# 9 \"src/parser.mly\"\n       (int)\n# 23 \"src/parser.ml\"\n  )\n    | MODE\n    | LPAREN\n    | LCURLY\n    | IS\n    | IN\n    | IF\n    | IDENT of (\n# 11 \"src/parser.mly\"\n       (string)\n# 34 \"src/parser.ml\"\n  )\n    | FN\n    | EOF\n    | ELSE\n    | DOT\n    | COMMA\n    | COLON\n    | BOOL of (\n# 8 \"src/parser.mly\"\n       (bool)\n# 45 \"src/parser.ml\"\n  )\n  \nend\n\ninclude MenhirBasics\n\nlet _eRR =\n  MenhirBasics.Error\n\ntype _menhir_env = {\n  _menhir_lexer: Lexing.lexbuf -> token;\n  _menhir_lexbuf: Lexing.lexbuf;\n  _menhir_token: token;\n  mutable _menhir_error: bool\n}\n\nand _menhir_state = \n  | MenhirState77\n  | MenhirState73\n  | MenhirState68\n  | MenhirState66\n  | MenhirState62\n  | MenhirState60\n  | MenhirState58\n  | MenhirState50\n  | MenhirState47\n  | MenhirState45\n  | MenhirState34\n  | MenhirState33\n  | MenhirState32\n  | MenhirState31\n  | MenhirState28\n  | MenhirState26\n  | MenhirState24\n  | MenhirState23\n  | MenhirState19\n  | MenhirState12\n  | MenhirState9\n  | MenhirState7\n  | MenhirState6\n  | MenhirState4\n  | MenhirState3\n  | MenhirState0\n\n# 3 \"src/parser.mly\"\n  \n  open Language\n  open Ty\n\n# 95 \"src/parser.ml\"\n\nlet rec _menhir_goto_UnionSeqType : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.TySet.t) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    match _menhir_s with\n    | MenhirState34 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_3 : (Language.TySet.t)) = _v in\n        let ((_menhir_stack, _menhir_s), _, (_2 : (Language.TySet.elt))) = _menhir_stack in\n        let _1 = () in\n        let _v : (Language.TySet.t) = \n# 63 \"src/parser.mly\"\n                                 ( TySet.add _2 _3 )\n# 109 \"src/parser.ml\"\n         in\n        _menhir_goto_UnionSeqType _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState32 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_4 : (Language.TySet.t)) = _v in\n        let ((_menhir_stack, _menhir_s, (_1 : (Language.TySet.elt))), _, (_3 : (Language.TySet.elt))) = _menhir_stack in\n        let _2 = () in\n        let _v : (Language.TySet.elt) = \n# 50 \"src/parser.mly\"\n                                            ( TyUnion (_4 |> TySet.add _1 |> TySet.add _3) )\n# 121 \"src/parser.ml\"\n         in\n        _menhir_goto_Type _menhir_env _menhir_stack _menhir_s _v\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_reduce34 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _v : (Language.TySet.t) = \n# 62 \"src/parser.mly\"\n    ( TySet.empty )\n# 132 \"src/parser.ml\"\n     in\n    _menhir_goto_UnionSeqType _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run33 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | LCURLY ->\n        _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState33\n    | LPAREN ->\n        _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState33\n    | TYPE_BOOL ->\n        _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState33\n    | TYPE_NAT ->\n        _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState33\n    | TYPE_STRING ->\n        _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState33\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState33\n\nand _menhir_goto_Type : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.TySet.elt) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState26 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | COMMA ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | IDENT _v ->\n                _menhir_run25 _menhir_env (Obj.magic _menhir_stack) MenhirState28 _v\n            | RCURLY ->\n                _menhir_reduce29 _menhir_env (Obj.magic _menhir_stack) MenhirState28\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState28)\n        | RCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 184 \"src/parser.ml\"\n            ))), _, (_3 : (Language.TySet.elt))) = _menhir_stack in\n            let _2 = () in\n            let _v : ((string * Language.TySet.elt) list) = \n# 68 \"src/parser.mly\"\n                     ( [(_1, _3)] )\n# 190 \"src/parser.ml\"\n             in\n            _menhir_goto_RcdType _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState23 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s), _, (_2 : (Language.TySet.elt))) = _menhir_stack in\n            let _3 = () in\n            let _1 = () in\n            let _v : (Language.TySet.elt) = \n# 58 \"src/parser.mly\"\n                          ( _2 )\n# 214 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicType _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState19 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let ((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 229 \"src/parser.ml\"\n        ))), _, (_3 : (Language.TySet.elt))) = _menhir_stack in\n        let _2 = () in\n        let _v : (Language.Ty.expr) = \n# 93 \"src/parser.mly\"\n           ( Narrow((Var _1), _3) )\n# 235 \"src/parser.ml\"\n         in\n        _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState60 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | COMMA ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | IDENT _v ->\n                _menhir_run59 _menhir_env (Obj.magic _menhir_stack) MenhirState62 _v\n            | RPAREN ->\n                _menhir_reduce23 _menhir_env (Obj.magic _menhir_stack) MenhirState62\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState62)\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s, (id : (\n# 11 \"src/parser.mly\"\n       (string)\n# 261 \"src/parser.ml\"\n            ))), _, (ty : (Language.TySet.elt))) = _menhir_stack in\n            let _2 = () in\n            let _v : ((string * Language.TySet.elt) list) = \n# 74 \"src/parser.mly\"\n                                 ( [(id, ty)] )\n# 267 \"src/parser.ml\"\n             in\n            _menhir_goto_Params _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState66 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | LCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | BOOL _v ->\n                _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState68 _v\n            | IDENT _v ->\n                _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState68 _v\n            | IF ->\n                _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState68\n            | LCURLY ->\n                _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState68\n            | LPAREN ->\n                _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState68\n            | NAT _v ->\n                _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState68 _v\n            | STRING _v ->\n                _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState68 _v\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState68)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_goto_RcdType : _menhir_env -> 'ttv_tail -> _menhir_state -> ((string * Language.TySet.elt) list) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState28 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 323 \"src/parser.ml\"\n        ))), _, (_3 : (Language.TySet.elt))), _, (rest : ((string * Language.TySet.elt) list))) = _menhir_stack in\n        let _4 = () in\n        let _2 = () in\n        let _v : ((string * Language.TySet.elt) list) = \n# 69 \"src/parser.mly\"\n                                           ( (_1, _3)::rest )\n# 330 \"src/parser.ml\"\n         in\n        _menhir_goto_RcdType _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState24 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s), _, (_2 : ((string * Language.TySet.elt) list))) = _menhir_stack in\n            let _3 = () in\n            let _1 = () in\n            let _v : (Language.TySet.elt) = \n# 57 \"src/parser.mly\"\n                          ( TyRecord(_2) )\n# 348 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicType _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_goto_RcdList : _menhir_env -> 'ttv_tail -> _menhir_state -> ((string * Language.Ty.expr) list) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState50 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 370 \"src/parser.ml\"\n        ))), _, (_3 : (Language.Ty.expr))), _, (rest : ((string * Language.Ty.expr) list))) = _menhir_stack in\n        let _4 = () in\n        let _2 = () in\n        let _v : ((string * Language.Ty.expr) list) = \n# 112 \"src/parser.mly\"\n                                           ( (_1, _3)::rest )\n# 377 \"src/parser.ml\"\n         in\n        _menhir_goto_RcdList _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState4 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s), _, (_2 : ((string * Language.Ty.expr) list))) = _menhir_stack in\n            let _3 = () in\n            let _1 = () in\n            let _v : (Language.Ty.expr) = \n# 86 \"src/parser.mly\"\n           ( Record(_2) )\n# 395 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_goto_ArgList : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.Ty.expr list) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState12 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let ((_menhir_stack, _menhir_s, (expr : (Language.Ty.expr))), _, (rest : (Language.Ty.expr list))) = _menhir_stack in\n        let _2 = () in\n        let _v : (Language.Ty.expr list) = \n# 106 \"src/parser.mly\"\n                                       ( expr::rest )\n# 419 \"src/parser.ml\"\n         in\n        _menhir_goto_ArgList _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState9 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 434 \"src/parser.ml\"\n            ))), _, (_3 : (Language.Ty.expr list))) = _menhir_stack in\n            let _4 = () in\n            let _2 = () in\n            let _v : (Language.Ty.expr) = \n# 84 \"src/parser.mly\"\n           ( App (Var _1, _3) )\n# 441 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_goto_AtomicType : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.TySet.elt) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState66 | MenhirState60 | MenhirState19 | MenhirState23 | MenhirState26 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | VBAR ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | LCURLY ->\n                _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState31\n            | LPAREN ->\n                _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState31\n            | TYPE_BOOL ->\n                _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState31\n            | TYPE_NAT ->\n                _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState31\n            | TYPE_STRING ->\n                _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState31\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState31)\n        | COMMA | DOT | ELSE | EOF | LCURLY | RCURLY | RPAREN | THEN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, (_1 : (Language.TySet.elt))) = _menhir_stack in\n            let _v : (Language.TySet.elt) = \n# 49 \"src/parser.mly\"\n                ( _1 )\n# 487 \"src/parser.ml\"\n             in\n            _menhir_goto_Type _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState31 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | VBAR ->\n            _menhir_run33 _menhir_env (Obj.magic _menhir_stack) MenhirState32\n        | COMMA | DOT | ELSE | EOF | LCURLY | RCURLY | RPAREN | THEN ->\n            _menhir_reduce34 _menhir_env (Obj.magic _menhir_stack) MenhirState32\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState32)\n    | MenhirState33 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | VBAR ->\n            _menhir_run33 _menhir_env (Obj.magic _menhir_stack) MenhirState34\n        | COMMA | DOT | ELSE | EOF | LCURLY | RCURLY | RPAREN | THEN ->\n            _menhir_reduce34 _menhir_env (Obj.magic _menhir_stack) MenhirState34\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState34)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_reduce29 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _v : ((string * Language.TySet.elt) list) = \n# 67 \"src/parser.mly\"\n    ( [] )\n# 530 \"src/parser.ml\"\n     in\n    _menhir_goto_RcdType _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run25 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 11 \"src/parser.mly\"\n       (string)\n# 537 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | COLON ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | LCURLY ->\n            _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState26\n        | LPAREN ->\n            _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState26\n        | TYPE_BOOL ->\n            _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState26\n        | TYPE_NAT ->\n            _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState26\n        | TYPE_STRING ->\n            _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState26\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState26)\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_goto_Params : _menhir_env -> 'ttv_tail -> _menhir_state -> ((string * Language.TySet.elt) list) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState62 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (((_menhir_stack, _menhir_s, (id : (\n# 11 \"src/parser.mly\"\n       (string)\n# 580 \"src/parser.ml\"\n        ))), _, (ty : (Language.TySet.elt))), _, (rest : ((string * Language.TySet.elt) list))) = _menhir_stack in\n        let _4 = () in\n        let _2 = () in\n        let _v : ((string * Language.TySet.elt) list) = \n# 75 \"src/parser.mly\"\n                                                       ( (id, ty)::rest )\n# 587 \"src/parser.ml\"\n         in\n        _menhir_goto_Params _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState58 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | COLON ->\n                let _menhir_stack = Obj.magic _menhir_stack in\n                let _menhir_env = _menhir_discard _menhir_env in\n                let _tok = _menhir_env._menhir_token in\n                (match _tok with\n                | LCURLY ->\n                    _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState66\n                | LPAREN ->\n                    _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState66\n                | TYPE_BOOL ->\n                    _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState66\n                | TYPE_NAT ->\n                    _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState66\n                | TYPE_STRING ->\n                    _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState66\n                | _ ->\n                    assert (not _menhir_env._menhir_error);\n                    _menhir_env._menhir_error <- true;\n                    _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState66)\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                let _menhir_stack = Obj.magic _menhir_stack in\n                let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_fail : unit -> 'a =\n  fun () ->\n    Printf.fprintf stderr \"Internal failure -- please contact the parser generator's developers.\\n%!\";\n    assert false\n\nand _menhir_goto_Expr : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.Ty.expr) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState12 | MenhirState9 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | COMMA ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | BOOL _v ->\n                _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState12 _v\n            | IDENT _v ->\n                _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState12 _v\n            | IF ->\n                _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState12\n            | LCURLY ->\n                _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState12\n            | LPAREN ->\n                _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState12\n            | NAT _v ->\n                _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState12 _v\n            | STRING _v ->\n                _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState12 _v\n            | RPAREN ->\n                _menhir_reduce2 _menhir_env (Obj.magic _menhir_stack) MenhirState12\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState12)\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, (expr : (Language.Ty.expr))) = _menhir_stack in\n            let _v : (Language.Ty.expr list) = \n# 105 \"src/parser.mly\"\n                ( [expr] )\n# 679 \"src/parser.ml\"\n             in\n            _menhir_goto_ArgList _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState45 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | ELSE ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | BOOL _v ->\n                _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState47 _v\n            | IDENT _v ->\n                _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState47 _v\n            | IF ->\n                _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState47\n            | LCURLY ->\n                _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState47\n            | LPAREN ->\n                _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState47\n            | NAT _v ->\n                _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState47 _v\n            | STRING _v ->\n                _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState47 _v\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState47)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState47 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let ((((_menhir_stack, _menhir_s), _, (_2 : (Language.Ty.expr))), _, (_4 : (Language.Ty.expr))), _, (_6 : (Language.Ty.expr))) = _menhir_stack in\n        let _5 = () in\n        let _3 = () in\n        let _1 = () in\n        let _v : (Language.Ty.expr) = \n# 100 \"src/parser.mly\"\n                                      ( If(_2, _4, _6) )\n# 732 \"src/parser.ml\"\n         in\n        _menhir_goto_Expr _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState6 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | COMMA ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | IDENT _v ->\n                _menhir_run5 _menhir_env (Obj.magic _menhir_stack) MenhirState50 _v\n            | RCURLY ->\n                _menhir_reduce26 _menhir_env (Obj.magic _menhir_stack) MenhirState50\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState50)\n        | RCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 758 \"src/parser.ml\"\n            ))), _, (_3 : (Language.Ty.expr))) = _menhir_stack in\n            let _2 = () in\n            let _v : ((string * Language.Ty.expr) list) = \n# 111 \"src/parser.mly\"\n                     ( [(_1, _3)] )\n# 764 \"src/parser.ml\"\n             in\n            _menhir_goto_RcdList _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState3 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s), _, (_2 : (Language.Ty.expr))) = _menhir_stack in\n            let _3 = () in\n            let _1 = () in\n            let _v : (Language.Ty.expr) = \n# 88 \"src/parser.mly\"\n           ( _2 )\n# 788 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState68 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | RCURLY ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (((((_menhir_stack, _menhir_s), (name : (\n# 11 \"src/parser.mly\"\n       (string)\n# 809 \"src/parser.ml\"\n            ))), _, (p : ((string * Language.TySet.elt) list))), _, (ty : (Language.TySet.elt))), _, (e : (Language.Ty.expr))) = _menhir_stack in\n            let _10 = () in\n            let _8 = () in\n            let _6 = () in\n            let _5 = () in\n            let _3 = () in\n            let _1 = () in\n            let _v : (Language.fn) = \n# 45 \"src/parser.mly\"\n    ( Fn (name, p, ty, e) )\n# 820 \"src/parser.ml\"\n             in\n            let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            assert (not _menhir_env._menhir_error);\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | BOOL _v ->\n                _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState73 _v\n            | EOF ->\n                _menhir_run71 _menhir_env (Obj.magic _menhir_stack) MenhirState73\n            | FN ->\n                _menhir_run56 _menhir_env (Obj.magic _menhir_stack) MenhirState73\n            | IDENT _v ->\n                _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState73 _v\n            | IF ->\n                _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState73\n            | LCURLY ->\n                _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState73\n            | LPAREN ->\n                _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState73\n            | NAT _v ->\n                _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState73 _v\n            | STRING _v ->\n                _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState73 _v\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState73)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState77 | MenhirState0 | MenhirState73 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | EOF ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, (e : (Language.Ty.expr))) = _menhir_stack in\n            let _2 = () in\n            let _v : (Language.program) = \n# 39 \"src/parser.mly\"\n                                 ( { fns=[]; expr=Some e } )\n# 868 \"src/parser.ml\"\n             in\n            _menhir_goto_program _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_run14 : _menhir_env -> 'ttv_tail * _menhir_state * (Language.Ty.expr) -> 'ttv_return =\n  fun _menhir_env _menhir_stack ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | IDENT _v ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_3 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 892 \"src/parser.ml\"\n        )) = _v in\n        let (_menhir_stack, _menhir_s, (_1 : (Language.Ty.expr))) = _menhir_stack in\n        let _2 = () in\n        let _v : (Language.Ty.expr) = \n# 90 \"src/parser.mly\"\n           ( RecordProj(_1, _3) )\n# 899 \"src/parser.ml\"\n         in\n        _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_reduce26 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _v : ((string * Language.Ty.expr) list) = \n# 110 \"src/parser.mly\"\n    ( [] )\n# 914 \"src/parser.ml\"\n     in\n    _menhir_goto_RcdList _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run5 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 11 \"src/parser.mly\"\n       (string)\n# 921 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | COLON ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | BOOL _v ->\n            _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState6 _v\n        | IDENT _v ->\n            _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState6 _v\n        | IF ->\n            _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState6\n        | LCURLY ->\n            _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState6\n        | LPAREN ->\n            _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState6\n        | NAT _v ->\n            _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState6 _v\n        | STRING _v ->\n            _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState6 _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState6)\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_reduce2 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _v : (Language.Ty.expr list) = \n# 104 \"src/parser.mly\"\n    ( [] )\n# 963 \"src/parser.ml\"\n     in\n    _menhir_goto_ArgList _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run20 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let _1 = () in\n    let _v : (Language.TySet.elt) = \n# 55 \"src/parser.mly\"\n                          ( TyPrim TyString )\n# 975 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicType _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run21 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let _1 = () in\n    let _v : (Language.TySet.elt) = \n# 54 \"src/parser.mly\"\n                          ( TyPrim TyNat )\n# 987 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicType _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run22 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let _1 = () in\n    let _v : (Language.TySet.elt) = \n# 56 \"src/parser.mly\"\n                          ( TyPrim TyBool )\n# 999 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicType _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run23 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | LCURLY ->\n        _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState23\n    | LPAREN ->\n        _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState23\n    | TYPE_BOOL ->\n        _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState23\n    | TYPE_NAT ->\n        _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState23\n    | TYPE_STRING ->\n        _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState23\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState23\n\nand _menhir_run24 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | IDENT _v ->\n        _menhir_run25 _menhir_env (Obj.magic _menhir_stack) MenhirState24 _v\n    | RCURLY ->\n        _menhir_reduce29 _menhir_env (Obj.magic _menhir_stack) MenhirState24\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState24\n\nand _menhir_reduce23 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _v : ((string * Language.TySet.elt) list) = \n# 73 \"src/parser.mly\"\n    ( [] )\n# 1044 \"src/parser.ml\"\n     in\n    _menhir_goto_Params _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run59 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 11 \"src/parser.mly\"\n       (string)\n# 1051 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | COLON ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | LCURLY ->\n            _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState60\n        | LPAREN ->\n            _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState60\n        | TYPE_BOOL ->\n            _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState60\n        | TYPE_NAT ->\n            _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState60\n        | TYPE_STRING ->\n            _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState60\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState60)\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_goto_program : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.program) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    match _menhir_s with\n    | MenhirState0 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_1 : (Language.program)) = _v in\n        Obj.magic _1\n    | MenhirState73 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (prog : (Language.program)) = _v in\n        let (_menhir_stack, _menhir_s, (f : (Language.fn))) = _menhir_stack in\n        let _v : (Language.program) = \n# 40 \"src/parser.mly\"\n                                 ( { prog with fns=f::prog.fns } )\n# 1100 \"src/parser.ml\"\n         in\n        _menhir_goto_program _menhir_env _menhir_stack _menhir_s _v\n    | MenhirState77 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_1 : (Language.program)) = _v in\n        let _v : (Language.toplevel) = \n# 35 \"src/parser.mly\"\n                           ( Program _1 )\n# 1110 \"src/parser.ml\"\n         in\n        _menhir_goto_toplevel _menhir_env _menhir_stack _menhir_s _v\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_goto_AtomicExpr : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.Ty.expr) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    match _menhir_s with\n    | MenhirState77 | MenhirState0 | MenhirState73 | MenhirState68 | MenhirState3 | MenhirState6 | MenhirState45 | MenhirState47 | MenhirState9 | MenhirState12 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | DOT ->\n            _menhir_run14 _menhir_env (Obj.magic _menhir_stack)\n        | COMMA | ELSE | EOF | RCURLY | RPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, (_1 : (Language.Ty.expr))) = _menhir_stack in\n            let _v : (Language.Ty.expr) = \n# 99 \"src/parser.mly\"\n               ( _1 )\n# 1133 \"src/parser.ml\"\n             in\n            _menhir_goto_Expr _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | MenhirState7 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        assert (not _menhir_env._menhir_error);\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | DOT ->\n            _menhir_run14 _menhir_env (Obj.magic _menhir_stack)\n        | THEN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | BOOL _v ->\n                _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState45 _v\n            | IDENT _v ->\n                _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState45 _v\n            | IF ->\n                _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState45\n            | LCURLY ->\n                _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState45\n            | LPAREN ->\n                _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState45\n            | NAT _v ->\n                _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState45 _v\n            | STRING _v ->\n                _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState45 _v\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState45)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        _menhir_fail ()\n\nand _menhir_run1 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 10 \"src/parser.mly\"\n       (string)\n# 1184 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let (_1 : (\n# 10 \"src/parser.mly\"\n       (string)\n# 1192 \"src/parser.ml\"\n    )) = _v in\n    let _v : (Language.Ty.expr) = \n# 81 \"src/parser.mly\"\n           ( String _1 )\n# 1197 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run2 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 9 \"src/parser.mly\"\n       (int)\n# 1204 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let (_1 : (\n# 9 \"src/parser.mly\"\n       (int)\n# 1212 \"src/parser.ml\"\n    )) = _v in\n    let _v : (Language.Ty.expr) = \n# 80 \"src/parser.mly\"\n           ( Nat _1 )\n# 1217 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_run3 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | BOOL _v ->\n        _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState3 _v\n    | IDENT _v ->\n        _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState3 _v\n    | IF ->\n        _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState3\n    | LCURLY ->\n        _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState3\n    | LPAREN ->\n        _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState3\n    | NAT _v ->\n        _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState3 _v\n    | STRING _v ->\n        _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState3 _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState3\n\nand _menhir_run4 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | IDENT _v ->\n        _menhir_run5 _menhir_env (Obj.magic _menhir_stack) MenhirState4 _v\n    | RCURLY ->\n        _menhir_reduce26 _menhir_env (Obj.magic _menhir_stack) MenhirState4\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState4\n\nand _menhir_run7 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | BOOL _v ->\n        _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState7 _v\n    | IDENT _v ->\n        _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState7 _v\n    | LCURLY ->\n        _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState7\n    | LPAREN ->\n        _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState7\n    | NAT _v ->\n        _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState7 _v\n    | STRING _v ->\n        _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState7 _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState7\n\nand _menhir_run8 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 11 \"src/parser.mly\"\n       (string)\n# 1287 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = (_menhir_stack, _menhir_s, _v) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | IN ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | IDENT _v ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_3 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 1306 \"src/parser.ml\"\n            )) = _v in\n            let (_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 1311 \"src/parser.ml\"\n            ))) = _menhir_stack in\n            let _2 = () in\n            let _v : (Language.Ty.expr) = \n# 95 \"src/parser.mly\"\n           ( RecordNarrow(_1, (Var _3)) )\n# 1317 \"src/parser.ml\"\n             in\n            _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | IS ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | LCURLY ->\n            _menhir_run24 _menhir_env (Obj.magic _menhir_stack) MenhirState19\n        | LPAREN ->\n            _menhir_run23 _menhir_env (Obj.magic _menhir_stack) MenhirState19\n        | TYPE_BOOL ->\n            _menhir_run22 _menhir_env (Obj.magic _menhir_stack) MenhirState19\n        | TYPE_NAT ->\n            _menhir_run21 _menhir_env (Obj.magic _menhir_stack) MenhirState19\n        | TYPE_STRING ->\n            _menhir_run20 _menhir_env (Obj.magic _menhir_stack) MenhirState19\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState19)\n    | LPAREN ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | BOOL _v ->\n            _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState9 _v\n        | IDENT _v ->\n            _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState9 _v\n        | IF ->\n            _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState9\n        | LCURLY ->\n            _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState9\n        | LPAREN ->\n            _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState9\n        | NAT _v ->\n            _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState9 _v\n        | STRING _v ->\n            _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState9 _v\n        | RPAREN ->\n            _menhir_reduce2 _menhir_env (Obj.magic _menhir_stack) MenhirState9\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState9)\n    | COMMA | DOT | ELSE | EOF | RCURLY | RPAREN | THEN ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, (_1 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 1375 \"src/parser.ml\"\n        ))) = _menhir_stack in\n        let _v : (Language.Ty.expr) = \n# 79 \"src/parser.mly\"\n           ( Var _1 )\n# 1380 \"src/parser.ml\"\n         in\n        _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_run56 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = (_menhir_stack, _menhir_s) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | IDENT _v ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_stack = (_menhir_stack, _v) in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | LPAREN ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | IDENT _v ->\n                _menhir_run59 _menhir_env (Obj.magic _menhir_stack) MenhirState58 _v\n            | RPAREN ->\n                _menhir_reduce23 _menhir_env (Obj.magic _menhir_stack) MenhirState58\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState58)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let ((_menhir_stack, _menhir_s), _) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n\nand _menhir_run71 : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let _1 = () in\n    let _v : (Language.program) = \n# 38 \"src/parser.mly\"\n                                 ( { fns=[]; expr=None } )\n# 1435 \"src/parser.ml\"\n     in\n    _menhir_goto_program _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_errorcase : _menhir_env -> 'ttv_tail -> _menhir_state -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s ->\n    match _menhir_s with\n    | MenhirState77 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        raise _eRR\n    | MenhirState73 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState68 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState66 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState62 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState60 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState58 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let ((_menhir_stack, _menhir_s), _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState50 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState47 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState45 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState34 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState33 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState32 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState31 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState28 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState26 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState24 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState23 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState19 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState12 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState9 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState7 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState6 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s, _) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState4 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState3 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let (_menhir_stack, _menhir_s) = _menhir_stack in\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s\n    | MenhirState0 ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        raise _eRR\n\nand _menhir_goto_toplevel : _menhir_env -> 'ttv_tail -> _menhir_state -> (Language.toplevel) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let (_1 : (Language.toplevel)) = _v in\n    Obj.magic _1\n\nand _menhir_run10 : _menhir_env -> 'ttv_tail -> _menhir_state -> (\n# 8 \"src/parser.mly\"\n       (bool)\n# 1555 \"src/parser.ml\"\n) -> 'ttv_return =\n  fun _menhir_env _menhir_stack _menhir_s _v ->\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _menhir_stack = Obj.magic _menhir_stack in\n    let (_1 : (\n# 8 \"src/parser.mly\"\n       (bool)\n# 1563 \"src/parser.ml\"\n    )) = _v in\n    let _v : (Language.Ty.expr) = \n# 82 \"src/parser.mly\"\n           ( Bool _1 )\n# 1568 \"src/parser.ml\"\n     in\n    _menhir_goto_AtomicExpr _menhir_env _menhir_stack _menhir_s _v\n\nand _menhir_discard : _menhir_env -> _menhir_env =\n  fun _menhir_env ->\n    let lexer = _menhir_env._menhir_lexer in\n    let lexbuf = _menhir_env._menhir_lexbuf in\n    let _tok = lexer lexbuf in\n    {\n      _menhir_lexer = lexer;\n      _menhir_lexbuf = lexbuf;\n      _menhir_token = _tok;\n      _menhir_error = false;\n    }\n\nand _menhir_init : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> _menhir_env =\n  fun lexer lexbuf ->\n    let _tok = Obj.magic () in\n    {\n      _menhir_lexer = lexer;\n      _menhir_lexbuf = lexbuf;\n      _menhir_token = _tok;\n      _menhir_error = false;\n    }\n\nand program : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Language.program) =\n  fun lexer lexbuf ->\n    let _menhir_env = _menhir_init lexer lexbuf in\n    Obj.magic (let _menhir_stack = ((), _menhir_env._menhir_lexbuf.Lexing.lex_curr_p) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | BOOL _v ->\n        _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState0 _v\n    | EOF ->\n        _menhir_run71 _menhir_env (Obj.magic _menhir_stack) MenhirState0\n    | FN ->\n        _menhir_run56 _menhir_env (Obj.magic _menhir_stack) MenhirState0\n    | IDENT _v ->\n        _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState0 _v\n    | IF ->\n        _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState0\n    | LCURLY ->\n        _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState0\n    | LPAREN ->\n        _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState0\n    | NAT _v ->\n        _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState0 _v\n    | STRING _v ->\n        _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState0 _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState0)\n\nand toplevel : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> (Language.toplevel) =\n  fun lexer lexbuf ->\n    let _menhir_env = _menhir_init lexer lexbuf in\n    Obj.magic (let _menhir_stack = ((), _menhir_env._menhir_lexbuf.Lexing.lex_curr_p) in\n    let _menhir_env = _menhir_discard _menhir_env in\n    let _tok = _menhir_env._menhir_token in\n    match _tok with\n    | BOOL _v ->\n        _menhir_run10 _menhir_env (Obj.magic _menhir_stack) MenhirState77 _v\n    | COLON ->\n        let _menhir_stack = Obj.magic _menhir_stack in\n        let _menhir_s = MenhirState77 in\n        let _menhir_stack = (_menhir_stack, _menhir_s) in\n        let _menhir_env = _menhir_discard _menhir_env in\n        let _tok = _menhir_env._menhir_token in\n        (match _tok with\n        | MODE ->\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let _menhir_env = _menhir_discard _menhir_env in\n            let _tok = _menhir_env._menhir_token in\n            (match _tok with\n            | IDENT _v ->\n                let _menhir_stack = Obj.magic _menhir_stack in\n                let _menhir_stack = (_menhir_stack, _v) in\n                let _menhir_env = _menhir_discard _menhir_env in\n                let _tok = _menhir_env._menhir_token in\n                (match _tok with\n                | EOF ->\n                    let _menhir_stack = Obj.magic _menhir_stack in\n                    let _menhir_stack = Obj.magic _menhir_stack in\n                    let ((_menhir_stack, _menhir_s), (_3 : (\n# 11 \"src/parser.mly\"\n       (string)\n# 1657 \"src/parser.ml\"\n                    ))) = _menhir_stack in\n                    let _4 = () in\n                    let _2 = () in\n                    let _1 = () in\n                    let _v : (Language.toplevel) = \n# 34 \"src/parser.mly\"\n                           ( Mode _3 )\n# 1665 \"src/parser.ml\"\n                     in\n                    _menhir_goto_toplevel _menhir_env _menhir_stack _menhir_s _v\n                | _ ->\n                    assert (not _menhir_env._menhir_error);\n                    _menhir_env._menhir_error <- true;\n                    let _menhir_stack = Obj.magic _menhir_stack in\n                    let ((_menhir_stack, _menhir_s), _) = _menhir_stack in\n                    _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n            | _ ->\n                assert (not _menhir_env._menhir_error);\n                _menhir_env._menhir_error <- true;\n                let _menhir_stack = Obj.magic _menhir_stack in\n                let (_menhir_stack, _menhir_s) = _menhir_stack in\n                _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n        | _ ->\n            assert (not _menhir_env._menhir_error);\n            _menhir_env._menhir_error <- true;\n            let _menhir_stack = Obj.magic _menhir_stack in\n            let (_menhir_stack, _menhir_s) = _menhir_stack in\n            _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) _menhir_s)\n    | EOF ->\n        _menhir_run71 _menhir_env (Obj.magic _menhir_stack) MenhirState77\n    | FN ->\n        _menhir_run56 _menhir_env (Obj.magic _menhir_stack) MenhirState77\n    | IDENT _v ->\n        _menhir_run8 _menhir_env (Obj.magic _menhir_stack) MenhirState77 _v\n    | IF ->\n        _menhir_run7 _menhir_env (Obj.magic _menhir_stack) MenhirState77\n    | LCURLY ->\n        _menhir_run4 _menhir_env (Obj.magic _menhir_stack) MenhirState77\n    | LPAREN ->\n        _menhir_run3 _menhir_env (Obj.magic _menhir_stack) MenhirState77\n    | NAT _v ->\n        _menhir_run2 _menhir_env (Obj.magic _menhir_stack) MenhirState77 _v\n    | STRING _v ->\n        _menhir_run1 _menhir_env (Obj.magic _menhir_stack) MenhirState77 _v\n    | _ ->\n        assert (not _menhir_env._menhir_error);\n        _menhir_env._menhir_error <- true;\n        _menhir_errorcase _menhir_env (Obj.magic _menhir_stack) MenhirState77)\n\n# 269 \"<standard.mly>\"\n  \n\n# 1710 \"src/parser.ml\"\n","# 3 \"src/lexer.mll\"\n \nopen Lexing\nopen Parser\n\nexception SyntaxError of string\n\nlet next_line lexbuf =\n  let pos = lexbuf.lex_curr_p in\n  lexbuf.lex_curr_p <- { pos with\n    pos_bol = lexbuf.lex_curr_pos;\n    pos_lnum = pos.pos_lnum + 1\n  }\n\n# 16 \"src/lexer.ml\"\nlet __ocaml_lex_tables = {\n  Lexing.lex_base =\n   \"\\000\\000\\254\\255\\255\\255\\001\\000\\002\\000\\251\\255\\252\\255\\253\\255\\\n    \\000\\000\\255\\255\\254\\255\\030\\000\\229\\255\\230\\255\\000\\000\\232\\255\\\n    \\233\\255\\234\\255\\235\\255\\236\\255\\237\\255\\238\\255\\239\\255\\117\\000\\\n    \\222\\000\\050\\001\\134\\001\\218\\001\\046\\002\\130\\002\\214\\002\\042\\003\\\n    \\252\\255\\000\\000\\254\\255\\004\\000\\000\\000\\126\\003\\210\\003\\038\\004\\\n    \\122\\004\\206\\004\\034\\005\\118\\005\\202\\005\\030\\006\\114\\006\\198\\006\\\n    \\026\\007\\110\\007\\194\\007\\022\\008\\106\\008\\190\\008\\018\\009\\102\\009\\\n    \\186\\009\\014\\010\\098\\010\\182\\010\\010\\011\\094\\011\\178\\011\\006\\012\\\n    \\090\\012\\174\\012\\231\\255\";\n  Lexing.lex_backtrk =\n   \"\\255\\255\\255\\255\\255\\255\\000\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\004\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\026\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\015\\000\\\n    \\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\015\\000\\\n    \\255\\255\\002\\000\\255\\255\\001\\000\\000\\000\\015\\000\\015\\000\\015\\000\\\n    \\004\\000\\015\\000\\008\\000\\006\\000\\015\\000\\015\\000\\015\\000\\015\\000\\\n    \\015\\000\\005\\000\\011\\000\\010\\000\\007\\000\\015\\000\\015\\000\\009\\000\\\n    \\015\\000\\015\\000\\012\\000\\015\\000\\013\\000\\015\\000\\015\\000\\015\\000\\\n    \\015\\000\\014\\000\\255\\255\";\n  Lexing.lex_default =\n   \"\\001\\000\\000\\000\\000\\000\\255\\255\\005\\000\\000\\000\\000\\000\\000\\000\\\n    \\255\\255\\000\\000\\000\\000\\012\\000\\000\\000\\000\\000\\255\\255\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\000\\000\\255\\255\\000\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\000\\000\";\n  Lexing.lex_trans =\n   \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\036\\000\\002\\000\\002\\000\\006\\000\\003\\000\\034\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\036\\000\\000\\000\\010\\000\\000\\000\\007\\000\\000\\000\\000\\000\\036\\000\\\n    \\034\\000\\000\\000\\000\\000\\035\\000\\000\\000\\000\\000\\000\\000\\066\\000\\\n    \\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\\n    \\033\\000\\033\\000\\000\\000\\000\\000\\000\\000\\000\\000\\036\\000\\000\\000\\\n    \\032\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\022\\000\\021\\000\\\n    \\000\\000\\000\\000\\018\\000\\000\\000\\015\\000\\014\\000\\033\\000\\033\\000\\\n    \\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\\n    \\017\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\008\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\026\\000\\023\\000\\023\\000\\027\\000\\030\\000\\023\\000\\023\\000\\028\\000\\\n    \\023\\000\\023\\000\\023\\000\\029\\000\\025\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\024\\000\\031\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\020\\000\\016\\000\\019\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\255\\255\\000\\000\\009\\000\\000\\000\\000\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\013\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\061\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\059\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\056\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\053\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\052\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\050\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\051\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\047\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\044\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\043\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\037\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\038\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\041\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\039\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\040\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\042\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\045\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\046\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\040\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\048\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\049\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\054\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\055\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\057\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\058\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\060\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\062\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\063\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\064\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\023\\000\\000\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\065\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\000\\000\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\";\n  Lexing.lex_check =\n   \"\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\036\\000\\000\\000\\003\\000\\004\\000\\000\\000\\035\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\036\\000\\255\\255\\008\\000\\255\\255\\004\\000\\255\\255\\255\\255\\011\\000\\\n    \\011\\000\\255\\255\\255\\255\\011\\000\\255\\255\\255\\255\\255\\255\\014\\000\\\n    \\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\033\\000\\\n    \\033\\000\\033\\000\\255\\255\\255\\255\\255\\255\\255\\255\\011\\000\\255\\255\\\n    \\011\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\011\\000\\011\\000\\\n    \\255\\255\\255\\255\\011\\000\\255\\255\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\004\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\255\\255\\255\\255\\255\\255\\255\\255\\011\\000\\255\\255\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\011\\000\\\n    \\011\\000\\011\\000\\011\\000\\011\\000\\023\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\023\\000\\255\\255\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\023\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\000\\000\\255\\255\\004\\000\\255\\255\\255\\255\\024\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\024\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\011\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\255\\255\\255\\255\\255\\255\\255\\255\\024\\000\\255\\255\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\024\\000\\\n    \\024\\000\\025\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\025\\000\\255\\255\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\\n    \\025\\000\\025\\000\\025\\000\\025\\000\\025\\000\\026\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\026\\000\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\255\\255\\255\\255\\255\\255\\255\\255\\026\\000\\255\\255\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\026\\000\\\n    \\026\\000\\027\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\027\\000\\255\\255\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\\n    \\027\\000\\027\\000\\027\\000\\027\\000\\027\\000\\028\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\028\\000\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\255\\255\\255\\255\\255\\255\\255\\255\\028\\000\\255\\255\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\028\\000\\\n    \\028\\000\\029\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\029\\000\\255\\255\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\\n    \\029\\000\\029\\000\\029\\000\\029\\000\\029\\000\\030\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\030\\000\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\255\\255\\255\\255\\255\\255\\255\\255\\030\\000\\255\\255\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\030\\000\\\n    \\030\\000\\031\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\031\\000\\255\\255\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\\n    \\031\\000\\031\\000\\031\\000\\031\\000\\031\\000\\037\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\037\\000\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\255\\255\\255\\255\\255\\255\\255\\255\\037\\000\\255\\255\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\037\\000\\\n    \\037\\000\\038\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\038\\000\\255\\255\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\\n    \\038\\000\\038\\000\\038\\000\\038\\000\\038\\000\\039\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\039\\000\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\255\\255\\255\\255\\255\\255\\255\\255\\039\\000\\255\\255\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\039\\000\\\n    \\039\\000\\040\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\040\\000\\255\\255\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\\n    \\040\\000\\040\\000\\040\\000\\040\\000\\040\\000\\041\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\041\\000\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\255\\255\\255\\255\\255\\255\\255\\255\\041\\000\\255\\255\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\041\\000\\\n    \\041\\000\\042\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\042\\000\\255\\255\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\\n    \\042\\000\\042\\000\\042\\000\\042\\000\\042\\000\\043\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\043\\000\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\255\\255\\255\\255\\255\\255\\255\\255\\043\\000\\255\\255\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\043\\000\\\n    \\043\\000\\044\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\044\\000\\255\\255\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\\n    \\044\\000\\044\\000\\044\\000\\044\\000\\044\\000\\045\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\045\\000\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\255\\255\\255\\255\\255\\255\\255\\255\\045\\000\\255\\255\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\045\\000\\\n    \\045\\000\\046\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\046\\000\\255\\255\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\\n    \\046\\000\\046\\000\\046\\000\\046\\000\\046\\000\\047\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\047\\000\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\255\\255\\255\\255\\255\\255\\255\\255\\047\\000\\255\\255\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\047\\000\\\n    \\047\\000\\048\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\048\\000\\255\\255\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\\n    \\048\\000\\048\\000\\048\\000\\048\\000\\048\\000\\049\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\049\\000\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\255\\255\\255\\255\\255\\255\\255\\255\\049\\000\\255\\255\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\049\\000\\\n    \\049\\000\\050\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\050\\000\\255\\255\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\\n    \\050\\000\\050\\000\\050\\000\\050\\000\\050\\000\\051\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\051\\000\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\255\\255\\255\\255\\255\\255\\255\\255\\051\\000\\255\\255\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\051\\000\\\n    \\051\\000\\052\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\052\\000\\255\\255\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\\n    \\052\\000\\052\\000\\052\\000\\052\\000\\052\\000\\053\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\053\\000\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\255\\255\\255\\255\\255\\255\\255\\255\\053\\000\\255\\255\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\053\\000\\\n    \\053\\000\\054\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\054\\000\\255\\255\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\\n    \\054\\000\\054\\000\\054\\000\\054\\000\\054\\000\\055\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\055\\000\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\255\\255\\255\\255\\255\\255\\255\\255\\055\\000\\255\\255\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\055\\000\\\n    \\055\\000\\056\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\056\\000\\255\\255\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\\n    \\056\\000\\056\\000\\056\\000\\056\\000\\056\\000\\057\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\057\\000\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\255\\255\\255\\255\\255\\255\\255\\255\\057\\000\\255\\255\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\057\\000\\\n    \\057\\000\\058\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\058\\000\\255\\255\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\\n    \\058\\000\\058\\000\\058\\000\\058\\000\\058\\000\\059\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\059\\000\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\255\\255\\255\\255\\255\\255\\255\\255\\059\\000\\255\\255\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\059\\000\\\n    \\059\\000\\060\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\060\\000\\255\\255\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\\n    \\060\\000\\060\\000\\060\\000\\060\\000\\060\\000\\061\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\061\\000\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\255\\255\\255\\255\\255\\255\\255\\255\\061\\000\\255\\255\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\061\\000\\\n    \\061\\000\\062\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\062\\000\\255\\255\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\\n    \\062\\000\\062\\000\\062\\000\\062\\000\\062\\000\\063\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\063\\000\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\255\\255\\255\\255\\255\\255\\255\\255\\063\\000\\255\\255\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\063\\000\\\n    \\063\\000\\064\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\064\\000\\255\\255\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\\n    \\064\\000\\064\\000\\064\\000\\064\\000\\064\\000\\065\\000\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\065\\000\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\255\\255\\255\\255\\255\\255\\255\\255\\065\\000\\255\\255\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\065\\000\\\n    \\065\\000\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\";\n  Lexing.lex_base_code =\n   \"\";\n  Lexing.lex_backtrk_code =\n   \"\";\n  Lexing.lex_default_code =\n   \"\";\n  Lexing.lex_trans_code =\n   \"\";\n  Lexing.lex_check_code =\n   \"\";\n  Lexing.lex_code =\n   \"\";\n}\n\nlet rec line_comment lexbuf =\n   __ocaml_lex_line_comment_rec lexbuf 0\nand __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 28 \"src/lexer.mll\"\n    ( next_line lexbuf; read lexbuf )\n# 947 \"src/lexer.ml\"\n\n  | 1 ->\n# 30 \"src/lexer.mll\"\n    ( line_comment lexbuf )\n# 952 \"src/lexer.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_line_comment_rec lexbuf __ocaml_lex_state\n\nand string_literal strbuf lexbuf =\n   __ocaml_lex_string_literal_rec strbuf lexbuf 4\nand __ocaml_lex_string_literal_rec strbuf lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 34 \"src/lexer.mll\"\n    ( EOF )\n# 964 \"src/lexer.ml\"\n\n  | 1 ->\nlet\n# 35 \"src/lexer.mll\"\n              q\n# 970 \"src/lexer.ml\"\n= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in\n# 36 \"src/lexer.mll\"\n    ( Buffer.add_string strbuf q;\n      string_literal strbuf lexbuf )\n# 975 \"src/lexer.ml\"\n\n  | 2 ->\n# 39 \"src/lexer.mll\"\n    ( STRING (Buffer.contents strbuf |> Scanf.unescaped) )\n# 980 \"src/lexer.ml\"\n\n  | 3 ->\n# 41 \"src/lexer.mll\"\n    ( new_line lexbuf;\n      Buffer.add_char strbuf '\\n';\n      string_literal strbuf lexbuf )\n# 987 \"src/lexer.ml\"\n\n  | 4 ->\nlet\n# 44 \"src/lexer.mll\"\n         c\n# 993 \"src/lexer.ml\"\n= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in\n# 45 \"src/lexer.mll\"\n    ( Buffer.add_char strbuf c;\n      string_literal strbuf lexbuf )\n# 998 \"src/lexer.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_string_literal_rec strbuf lexbuf __ocaml_lex_state\n\nand read lexbuf =\n   __ocaml_lex_read_rec lexbuf 11\nand __ocaml_lex_read_rec lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 49 \"src/lexer.mll\"\n                   ( read lexbuf )\n# 1010 \"src/lexer.ml\"\n\n  | 1 ->\n# 50 \"src/lexer.mll\"\n              ( next_line lexbuf; read lexbuf )\n# 1015 \"src/lexer.ml\"\n\n  | 2 ->\nlet\n# 52 \"src/lexer.mll\"\n           b\n# 1021 \"src/lexer.ml\"\n= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in\n# 52 \"src/lexer.mll\"\n                  ( NAT  (int_of_string b) )\n# 1025 \"src/lexer.ml\"\n\n  | 3 ->\n# 54 \"src/lexer.mll\"\n    ( string_literal (Buffer.create 100) lexbuf )\n# 1030 \"src/lexer.ml\"\n\n  | 4 ->\nlet\n# 55 \"src/lexer.mll\"\n               b\n# 1036 \"src/lexer.ml\"\n= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in\n# 55 \"src/lexer.mll\"\n                  ( BOOL (bool_of_string b) )\n# 1040 \"src/lexer.ml\"\n\n  | 5 ->\n# 57 \"src/lexer.mll\"\n              ( MODE )\n# 1045 \"src/lexer.ml\"\n\n  | 6 ->\n# 59 \"src/lexer.mll\"\n              ( FN )\n# 1050 \"src/lexer.ml\"\n\n  | 7 ->\n# 60 \"src/lexer.mll\"\n              ( IF )\n# 1055 \"src/lexer.ml\"\n\n  | 8 ->\n# 61 \"src/lexer.mll\"\n              ( THEN )\n# 1060 \"src/lexer.ml\"\n\n  | 9 ->\n# 62 \"src/lexer.mll\"\n              ( ELSE )\n# 1065 \"src/lexer.ml\"\n\n  | 10 ->\n# 65 \"src/lexer.mll\"\n              ( IS )\n# 1070 \"src/lexer.ml\"\n\n  | 11 ->\n# 66 \"src/lexer.mll\"\n              ( IN )\n# 1075 \"src/lexer.ml\"\n\n  | 12 ->\n# 68 \"src/lexer.mll\"\n              ( TYPE_BOOL )\n# 1080 \"src/lexer.ml\"\n\n  | 13 ->\n# 69 \"src/lexer.mll\"\n              ( TYPE_NAT )\n# 1085 \"src/lexer.ml\"\n\n  | 14 ->\n# 70 \"src/lexer.mll\"\n              ( TYPE_STRING )\n# 1090 \"src/lexer.ml\"\n\n  | 15 ->\nlet\n# 72 \"src/lexer.mll\"\n          id\n# 1096 \"src/lexer.ml\"\n= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in\n# 72 \"src/lexer.mll\"\n              ( IDENT id )\n# 1100 \"src/lexer.ml\"\n\n  | 16 ->\n# 74 \"src/lexer.mll\"\n              ( LPAREN )\n# 1105 \"src/lexer.ml\"\n\n  | 17 ->\n# 75 \"src/lexer.mll\"\n              ( RPAREN )\n# 1110 \"src/lexer.ml\"\n\n  | 18 ->\n# 76 \"src/lexer.mll\"\n              ( LCURLY )\n# 1115 \"src/lexer.ml\"\n\n  | 19 ->\n# 77 \"src/lexer.mll\"\n              ( RCURLY )\n# 1120 \"src/lexer.ml\"\n\n  | 20 ->\n# 78 \"src/lexer.mll\"\n              ( COMMA )\n# 1125 \"src/lexer.ml\"\n\n  | 21 ->\n# 79 \"src/lexer.mll\"\n              ( COLON )\n# 1130 \"src/lexer.ml\"\n\n  | 22 ->\n# 80 \"src/lexer.mll\"\n              ( VBAR )\n# 1135 \"src/lexer.ml\"\n\n  | 23 ->\n# 81 \"src/lexer.mll\"\n              ( DOT )\n# 1140 \"src/lexer.ml\"\n\n  | 24 ->\n# 83 \"src/lexer.mll\"\n              ( line_comment lexbuf )\n# 1145 \"src/lexer.ml\"\n\n  | 25 ->\n# 85 \"src/lexer.mll\"\n              ( EOF )\n# 1150 \"src/lexer.ml\"\n\n  | 26 ->\nlet\n# 87 \"src/lexer.mll\"\n         c\n# 1156 \"src/lexer.ml\"\n= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in\n# 87 \"src/lexer.mll\"\n              ( raise (SyntaxError (\"Unexpected char or sequence: \" ^ (String.make 1 c))) )\n# 1160 \"src/lexer.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_read_rec lexbuf __ocaml_lex_state\n\n;;\n\n","open Language\nopen Ty\n\ntype cExpr =\n  | CIdent of string\n  | CNat of int\n  | CString of string\n  | CBool of bool\n  | CCall of cExpr * cExpr list\n\ntype cDecl = CDecl of cExpr * cExpr option\n\ntype cStmt =\n  | CDeclStmt of cDecl\n  | CAssign of cExpr * cExpr\n  | CExprStmt of cExpr\n  | CReturn of cExpr\n  | CIf of cExpr * cBlock * cBlock\n\nand cBlock = cStmt list\n\ntype cType = CTyTaggedAny | CTyInt  (** Return type of main *)\n\n(** cFn is a C function with a name, parameter list, and a return expression.\n    Any parameters are always of type \"tagged_any\".\n *)\ntype cFn = CFn of cType * cExpr * cDecl list * cBlock\n\nlet rt_make_nat e = CCall (CIdent \"make_nat\", [ e ])\n\nlet rt_make_string e = CCall (CIdent \"make_string\", [ e ])\n\nlet rt_make_bool e = CCall (CIdent \"make_bool\", [ e ])\n\nlet rt_make_record args = CCall (CIdent \"make_record\", args)\n\nlet rt_record_proj e field = CCall (CIdent \"record_proj\", [ e; CString field ])\n\nlet rt_print e = CCall (CIdent \"print\", [ e ])\n\nlet rt_is_tag e ty =\n  let tyTagMacro =\n    match ty with\n    | TyPrim TyNat -> \"NAT\"\n    | TyPrim TyString -> \"STRING\"\n    | TyPrim TyBool -> \"BOOL\"\n    | TyRecord _ -> \"RECORD\"\n    | t ->\n        failwith\n          (Printf.sprintf \"No runtime type tag for \\\"%s\\\"\" (string_of_ty t))\n  in\n  CCall (CIdent \"is\", [ e; CIdent tyTagMacro ])\n\nlet rt_in_record rcd field = CCall (CIdent \"in\", [ rcd; CString field ])\n\n(*      *)\n(* Emit *)\n(*      *)\n\nlet emit_cTy ty = match ty with CTyInt -> \"int\" | CTyTaggedAny -> \"tagged_any\"\n\nlet rec emit_cExpr e =\n  match e with\n  | CIdent s -> s\n  | CNat n -> string_of_int n\n  | CString s -> Printf.sprintf \"\\\"%s\\\"\" (String.escaped s)\n  | CBool true -> \"1\"\n  | CBool false -> \"0\"\n  | CCall (n, args) ->\n      Printf.sprintf \"%s(%s)\" (emit_cExpr n)\n        (String.concat \", \" (List.map emit_cExpr args))\n\nlet emit_cDecl (CDecl (n, e)) =\n  let ty = CTyTaggedAny in\n  let init =\n    match e with None -> \"\" | Some e -> Printf.sprintf \" = %s\" (emit_cExpr e)\n  in\n  Printf.sprintf \"%s %s%s\" (emit_cTy ty) (emit_cExpr n) init\n\nlet rec emit_cStmt indent s =\n  let indentS = String.init indent (fun _ -> ' ') in\n  let emitS =\n    match s with\n    | CDeclStmt d -> Printf.sprintf \"%s;\" (emit_cDecl d)\n    | CExprStmt e -> Printf.sprintf \"%s;\" (emit_cExpr e)\n    | CReturn e -> Printf.sprintf \"return %s;\" (emit_cExpr e)\n    | CAssign (e1, e2) ->\n        Printf.sprintf \"%s = %s;\" (emit_cExpr e1) (emit_cExpr e2)\n    | CIf (cond, left, right) ->\n        let bLeft = List.map (emit_cStmt (indent + 2)) left in\n        let bRight = List.map (emit_cStmt (indent + 2)) right in\n        let parts =\n          [ Printf.sprintf \"if (%s) {\" (emit_cExpr cond) ]\n          @ bLeft @ [ \"} else {\" ] @ bRight @ [ \"}\" ]\n        in\n        String.concat \"\\n\" (List.map (fun s -> indentS ^ s) parts)\n  in\n  indentS ^ emitS\n\nlet emit_cFn indent (CFn (ty, name, params, block)) =\n  let indentS = String.init indent (fun _ -> ' ') in\n  let block = List.map (emit_cStmt (indent + 2)) block in\n  (* Initialize all params as type of tagged_any, like everything else. *)\n  let params = List.map emit_cDecl params in\n  let header =\n    Printf.sprintf \"%s %s(%s) {\" (emit_cTy ty) (emit_cExpr name)\n      (String.concat \", \" params)\n  in\n  let footer = \"}\" in\n  String.concat \"\\n\"\n    (List.map (fun s -> indentS ^ s) ((header :: block) @ [ footer ]))\n\n(*                     *)\n(* Codegen Translation *)\n(*                     *)\n\n(* TODO: real unique and non-colliding identifiers *)\nlet genCIdent originalId = CIdent (\"_\" ^ originalId)\n\nlet genUniqCIdent =\n  let counter = ref 0 in\n  fun () ->\n    let fresh = CIdent (\"_fresh_\" ^ string_of_int !counter) in\n    counter := !counter + 1;\n    fresh\n\n(* codegen_expr :: expr -> (cStmt list, cExpr) *)\nlet rec codegen_expr expr =\n  match expr with\n  | Var n -> ([], genCIdent n)\n  | Nat n -> ([], rt_make_nat (CNat n))\n  | String s -> ([], rt_make_string (CString s))\n  | Bool b -> ([], rt_make_bool (CBool b))\n  | App (n, args) ->\n      let stmts, call = codegen_expr n in\n      let stmts, args =\n        List.fold_right\n          (fun arg (stmts, cArgs) ->\n            let stmts1, cA = codegen_expr arg in\n            (stmts1 @ stmts, cA :: cArgs))\n          args (stmts, [])\n      in\n      (stmts, CCall (call, args))\n  | Narrow (e, ty) ->\n      let stmts, e = codegen_expr e in\n      (stmts, rt_is_tag e ty)\n  | If (cond, left, right) ->\n      let outV = genUniqCIdent () in\n      let stmtsCond, cCond = codegen_expr cond in\n\n      let stmtsL, cLeft = codegen_expr left in\n      let outLeft = CAssign (outV, cLeft) in\n      let blockLeft = stmtsL @ [ outLeft ] in\n\n      let stmtsR, cRight = codegen_expr right in\n      let outRight = CAssign (outV, cRight) in\n      let blockRight = stmtsR @ [ outRight ] in\n\n      let cIfSeq =\n        [ CDeclStmt (CDecl (outV, None)); CIf (cCond, blockLeft, blockRight) ]\n      in\n      (stmtsCond @ cIfSeq, outV)\n  | Record fields ->\n      let numFields = CNat (List.length fields) in\n      let stmts, mkRcdArgs =\n        List.fold_right\n          (fun (field, value) (stmts, cArgs) ->\n            let cField = CString field in\n            let stmts1, cValue = codegen_expr value in\n            (stmts1 @ stmts, cField :: cValue :: cArgs))\n          fields ([], [])\n      in\n      (stmts, rt_make_record (numFields :: mkRcdArgs))\n  | RecordProj (rcd, field) ->\n      let stmts, cRcd = codegen_expr rcd in\n      (stmts, rt_record_proj cRcd field)\n  | RecordNarrow (field, rcd) ->\n      let stmts, cRcd = codegen_expr rcd in\n      (stmts, rt_in_record cRcd field)\n\nlet codegen_fn (Fn (name, params, _, body)) =\n  let stmts, bodyExpr = codegen_expr body in\n  let body = stmts @ [ CReturn bodyExpr ] in\n  CFn\n    ( CTyTaggedAny,\n      genCIdent name,\n      List.map (fun (p, _) -> CDecl (genCIdent p, None)) params,\n      body )\n\n(** Generates C code for the program, excluding the runtime code.\n    Useful for checking C codegen in the repl.\n *)\nlet codegen_c fns expr =\n  let cFns = List.map codegen_fn fns in\n  match expr with\n  | None -> List.map (emit_cFn 0) cFns |> String.concat \"\\n\"\n  | Some expr ->\n      let stmts1, cExpr = codegen_expr expr in\n      let stmts2, exprVar = codegen_expr (Var \"_main_result\") in\n      let mainN = CIdent \"main\" in\n      let cMain =\n        CFn\n          ( CTyInt,\n            mainN,\n            [],\n            stmts1 @ stmts2\n            @ [\n                CDeclStmt (CDecl (exprVar, Some cExpr));\n                CExprStmt (rt_print exprVar);\n              ] )\n      in\n      let topLevels = List.map (emit_cFn 0) (cFns @ [ cMain ]) in\n      String.concat \"\\n\" topLevels\n\n(** Generates C code with the runtime prepended. *)\nlet codegen_c_w_rt fns expr =\n  let userCode = codegen_c fns expr in\n  let runtime = \"src/runtime.c\" in\n  let runtime =\n    try open_in \"src/runtime.c\"\n    with _ ->\n      failwith (Printf.sprintf \"Failed to find runtime at \\\"%s\\\"\" runtime)\n  in\n  let runtime = really_input_string runtime (in_channel_length runtime) in\n  String.concat \"\\n\" [ runtime; \"// User code\"; userCode ]\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n  | Int_Cd | Int_Ci | Int_Cu       (*  %#d | %#i | %#u *)\n\n(* Float conversion. *)\ntype float_flag_conv =\n  | Float_flag_                    (* %[feEgGFhH] *)\n  | Float_flag_p                   (* %+[feEgGFhH] *)\n  | Float_flag_s                   (* % [feEgGFhH] *)\ntype float_kind_conv =\n  | Float_f                        (*  %f | %+f | % f  *)\n  | Float_e                        (*  %e | %+e | % e  *)\n  | Float_E                        (*  %E | %+E | % E  *)\n  | Float_g                        (*  %g | %+g | % g  *)\n  | Float_G                        (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F | %+F | % F  *)\n  | Float_h                        (*  %h | %+h | % h  *)\n  | Float_H                        (*  %H | %+H | % H  *)\n  | Float_CF                       (*  %#F| %+#F| % #F *)\ntype float_conv = float_flag_conv * float_kind_conv\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargument and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two inputs have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGFhH] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('x, bool -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     intended for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool (pad, rest) ->\n    Bool (pad, concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for runtime/fail_nat.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\nexception Match_failure = Match_failure\nexception Assert_failure = Assert_failure\nexception Invalid_argument = Invalid_argument\nexception Failure = Failure\nexception Not_found = Not_found\nexception Out_of_memory = Out_of_memory\nexception Stack_overflow = Stack_overflow\nexception Sys_error = Sys_error\nexception End_of_file = End_of_file\nexception Division_by_zero = Division_by_zero\nexception Sys_blocked_io = Sys_blocked_io\nexception Undefined_recursive_module = Undefined_recursive_module\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( & ) : bool -> bool -> bool = \"%sequand\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( or ) : bool -> bool -> bool = \"%sequor\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%bytes_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet bool_of_string_opt = function\n  | \"true\" -> Some true\n  | \"false\" -> Some false\n  | _ -> None\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\n\nlet int_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (int_of_string s)\n  with Failure _ -> None\n\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\nlet float_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (float_of_string s)\n  with Failure _ -> None\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a::l ->\n        begin try\n            flush a\n        with Sys_error _ ->\n          () (* ignore channels closed during a preceding flush. *)\n        end;\n        iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_int_opt () = int_of_string_opt(read_line())\nlet read_float () = float_of_string(read_line())\nlet read_float_opt () = float_of_string_opt(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\nlet exit_function = ref flush_all\n\nlet at_exit f =\n  let g = !exit_function in\n  (* MPR#7253, MPR#7796: make sure \"f\" is executed only once *)\n  let f_already_ran = ref false in\n  exit_function :=\n    (fun () ->\n      if not !f_already_ran then begin f_already_ran := true; f() end;\n      g())\n\nlet do_at_exit () = (!exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n\n(*MODULE_ALIASES*)\nmodule Arg          = Arg\nmodule Array        = Array\nmodule ArrayLabels  = ArrayLabels\nmodule Bigarray     = Bigarray\nmodule Bool         = Bool\nmodule Buffer       = Buffer\nmodule Bytes        = Bytes\nmodule BytesLabels  = BytesLabels\nmodule Callback     = Callback\nmodule Char         = Char\nmodule Complex      = Complex\nmodule Digest       = Digest\nmodule Ephemeron    = Ephemeron\nmodule Filename     = Filename\nmodule Float        = Float\nmodule Format       = Format\nmodule Fun          = Fun\nmodule Gc           = Gc\nmodule Genlex       = Genlex\nmodule Hashtbl      = Hashtbl\nmodule Int          = Int\nmodule Int32        = Int32\nmodule Int64        = Int64\nmodule Lazy         = Lazy\nmodule Lexing       = Lexing\nmodule List         = List\nmodule ListLabels   = ListLabels\nmodule Map          = Map\nmodule Marshal      = Marshal\nmodule MoreLabels   = MoreLabels\nmodule Nativeint    = Nativeint\nmodule Obj          = Obj\nmodule Oo           = Oo\nmodule Option       = Option\nmodule Parsing      = Parsing\nmodule Pervasives   = Pervasives\nmodule Printexc     = Printexc\nmodule Printf       = Printf\nmodule Queue        = Queue\nmodule Random       = Random\nmodule Result       = Result\nmodule Scanf        = Scanf\nmodule Seq          = Seq\nmodule Set          = Set\nmodule Spacetime    = Spacetime\nmodule Stack        = Stack\nmodule StdLabels    = StdLabels\nmodule Stream       = Stream\nmodule String       = String\nmodule StringLabels = StringLabels\nmodule Sys          = Sys\nmodule Uchar        = Uchar\nmodule Unit         = Unit\nmodule Weak         = Weak\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of lists. *)\ntype 'a t = 'a list = [] | (::) of 'a * 'a list\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet nth_opt l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> None\n    | a::l -> if n = 0 then Some a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec init_tailrec_aux acc i n f =\n  if i >= n then acc\n  else init_tailrec_aux (f i :: acc) (i+1) n f\n\nlet rec init_aux i n f =\n  if i >= n then []\n  else\n    let r = f i in\n    r :: init_aux (i+1) n f\n\nlet rev_init_threshold =\n  match Sys.backend_type with\n  | Sys.Native | Sys.Bytecode -> 10_000\n  (* We don't know the size of the stack, better be safe and assume it's\n     small. *)\n  | Sys.Other _ -> 50\n\nlet init len f =\n  if len < 0 then invalid_arg \"List.init\" else\n  if len > rev_init_threshold then rev (init_tailrec_aux [] 0 len f)\n  else init_aux 0 len f\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assoc_opt x = function\n    [] -> None\n  | (a,b)::l -> if compare a x = 0 then Some b else assoc_opt x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec assq_opt x = function\n    [] -> None\n  | (a,b)::l -> if a == x then Some b else assq_opt x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet rec find_opt p = function\n  | [] -> None\n  | x :: l -> if p x then Some x else find_opt p l\n\nlet rec find_map f = function\n  | [] -> None\n  | x :: l ->\n     begin match f x with\n       | Some _ as result -> result\n       | None -> find_map f l\n     end\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet filter_map f =\n  let rec aux accu = function\n    | [] -> rev accu\n    | x :: l ->\n        match f x with\n        | None -> aux accu l\n        | Some v -> aux (v :: accu) l\n  in\n  aux []\n\nlet concat_map f l =\n  let rec aux f acc = function\n    | [] -> rev acc\n    | x :: l ->\n       let xs = f x in\n       aux f (rev_append xs acc) l\n  in aux f [] l\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 <= 0 then\n            if cmp x2 x3 <= 0 then [x1; x2; x3]\n            else if cmp x1 x3 <= 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 <= 0 then [x2; x1; x3]\n          else if cmp x2 x3 <= 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 > 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 > 0 then\n            if cmp x2 x3 > 0 then [x1; x2; x3]\n            else if cmp x1 x3 > 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 > 0 then [x2; x1; x3]\n          else if cmp x2 x3 > 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c < 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c < 0 then [x2; x3] else [x3; x2]\n          else if c < 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c < 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c < 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c < 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c < 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c > 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c > 0 then [x2; x3] else [x3; x2]\n          else if c > 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c > 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c > 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c > 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c > 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet rec compare_lengths l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _ -> -1\n  | _, [] -> 1\n  | _ :: l1, _ :: l2 -> compare_lengths l1 l2\n;;\n\nlet rec compare_length_with l n =\n  match l with\n  | [] ->\n    if n = 0 then 0 else\n      if n > 0 then -1 else 1\n  | _ :: l ->\n    if n <= 0 then 1 else\n      compare_length_with l (n-1)\n;;\n\n(** {1 Iterators} *)\n\nlet to_seq l =\n  let rec aux l () = match l with\n    | [] -> Seq.Nil\n    | x :: tail -> Seq.Cons (x, aux tail)\n  in\n  aux l\n\nlet of_seq seq =\n  let rec direct depth seq : _ list =\n    if depth=0\n    then\n      Seq.fold_left (fun acc x -> x::acc) [] seq\n      |> rev (* tailrec *)\n    else match seq() with\n      | Seq.Nil -> []\n      | Seq.Cons (x, next) -> x :: direct (depth-1) next\n  in\n  direct 500 seq\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                 Simon Cruanes                                          *)\n(*                                                                        *)\n(*   Copyright 2017 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Seq]: functional iterators *)\n\ntype +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\nand 'a t = unit -> 'a node\n\nlet empty () = Nil\n\nlet return x () = Cons (x, empty)\n\nlet rec map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) -> Cons (f x, map f next)\n\nlet rec filter_map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      match f x with\n        | None -> filter_map f next ()\n        | Some y -> Cons (y, filter_map f next)\n\nlet rec filter f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      if f x\n      then Cons (x, filter f next)\n      else filter f next ()\n\nlet rec flat_map f seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n    flat_map_app f (f x) next ()\n\n(* this is [append seq (flat_map f tail)] *)\nand flat_map_app f seq tail () = match seq () with\n  | Nil -> flat_map f tail ()\n  | Cons (x, next) ->\n    Cons (x, flat_map_app f next tail)\n\nlet fold_left f acc seq =\n  let rec aux f acc seq = match seq () with\n    | Nil -> acc\n    | Cons (x, next) ->\n        let acc = f acc x in\n        aux f acc next\n  in\n  aux f acc seq\n\nlet iter f seq =\n  let rec aux seq = match seq () with\n    | Nil -> ()\n    | Cons (x, next) ->\n        f x;\n        aux next\n  in\n  aux seq\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\n(* addition with an overflow check *)\nlet (++) a b =\n  let c = a + b in\n  match a < 0, b < 0, c < 0 with\n  | true , true , false\n  | false, false, true  -> invalid_arg \"Bytes.extend\" (* overflow *)\n  | _ -> c\n\nlet extend s left right =\n  let len = length s ++ left ++ right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits\n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet escaped s =\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then copy s else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\" [@@noalloc]\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s = map Char.uppercase s\nlet lowercase s = map Char.lowercase s\n\nlet capitalize s = apply1 Char.uppercase s\nlet uncapitalize s = apply1 Char.lowercase s\n\n(** {1 Iterators} *)\n\nlet to_seq s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet of_seq i =\n  let n = ref 0 in\n  let buf = ref (make 256 '\\000') in\n  let resize () =\n    (* resize *)\n    let new_len = min (2 * length !buf) Sys.max_string_length in\n    if length !buf = new_len then failwith \"Bytes.of_seq: cannot grow bytes\";\n    let new_buf = make new_len '\\000' in\n    blit !buf 0 new_buf 0 !n;\n    buf := new_buf\n  in\n  Seq.iter\n    (fun c ->\n       if !n = length !buf then resize();\n       set !buf !n c;\n       incr n)\n    i;\n  sub !buf 0 !n\n\n(** {6 Binary encoding/decoding of integers} *)\n\nexternal get_uint8 : bytes -> int -> int = \"%bytes_safe_get\"\nexternal get_uint16_ne : bytes -> int -> int = \"%caml_bytes_get16\"\nexternal get_int32_ne : bytes -> int -> int32 = \"%caml_bytes_get32\"\nexternal get_int64_ne : bytes -> int -> int64 = \"%caml_bytes_get64\"\nexternal set_int8 : bytes -> int -> int -> unit = \"%bytes_safe_set\"\nexternal set_int16_ne : bytes -> int -> int -> unit = \"%caml_bytes_set16\"\nexternal set_int32_ne : bytes -> int -> int32 -> unit = \"%caml_bytes_set32\"\nexternal set_int64_ne : bytes -> int -> int64 -> unit = \"%caml_bytes_set64\"\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\nlet get_int8 b i =\n  ((get_uint8 b i) lsl (Sys.int_size - 8)) asr (Sys.int_size - 8)\n\nlet get_uint16_le b i =\n  if Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_uint16_be b i =\n  if not Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_int16_ne b i =\n  ((get_uint16_ne b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_le b i =\n  ((get_uint16_le b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_be b i =\n  ((get_uint16_be b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int32_le b i =\n  if Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int32_be b i =\n  if not Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int64_le b i =\n  if Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet get_int64_be b i =\n  if not Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet set_int16_le b i x =\n  if Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int16_be b i x =\n  if not Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int32_le b i x =\n  if Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int32_be b i x =\n  if not Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int64_le b i x =\n  if Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_int64_be b i x =\n  if not Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_uint8 = set_int8\nlet set_uint16_ne = set_int16_ne\nlet set_uint16_be = set_int16_be\nlet set_uint16_le = set_int16_le\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet copy s =\n  B.copy (bos s) |> bts\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet fill =\n  B.fill\nlet blit =\n  B.blit_string\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits\n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let rec escape_if_needed s n i =\n    if i >= n then s else\n      match unsafe_get s i with\n      | '\\\"' | '\\\\' | '\\000'..'\\031' | '\\127'.. '\\255' ->\n          bts (B.escaped (bos s))\n      | _ -> escape_if_needed s n (i+1)\n  in\n  escape_if_needed s (length s) 0\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\ntype t = string\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\" [@@noalloc]\n\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s =\n  B.uppercase (bos s) |> bts\nlet lowercase s =\n  B.lowercase (bos s) |> bts\nlet capitalize s =\n  B.capitalize (bos s) |> bts\nlet uncapitalize s =\n  B.uncapitalize (bos s) |> bts\n\n(** {1 Iterators} *)\n\nlet to_seq s = bos s |> B.to_seq\n\nlet to_seqi s = bos s |> B.to_seqi\n\nlet of_seq g = B.of_seq g |> bts\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* The parsing engine *)\n\nopen Lexing\n\n(* Internal interface to the parsing engine *)\n\ntype parser_env =\n  { mutable s_stack : int array;        (* States *)\n    mutable v_stack : Obj.t array;      (* Semantic attributes *)\n    mutable symb_start_stack : position array; (* Start positions *)\n    mutable symb_end_stack : position array;   (* End positions *)\n    mutable stacksize : int;            (* Size of the stacks *)\n    mutable stackbase : int;            (* Base sp for current parse *)\n    mutable curr_char : int;            (* Last token read *)\n    mutable lval : Obj.t;               (* Its semantic attribute *)\n    mutable symb_start : position;      (* Start pos. of the current symbol*)\n    mutable symb_end : position;        (* End pos. of the current symbol *)\n    mutable asp : int;                  (* The stack pointer for attributes *)\n    mutable rule_len : int;             (* Number of rhs items in the rule *)\n    mutable rule_number : int;          (* Rule number to reduce by *)\n    mutable sp : int;                   (* Saved sp for parse_engine *)\n    mutable state : int;                (* Saved state for parse_engine *)\n    mutable errflag : int }             (* Saved error flag for parse_engine *)\n\ntype parse_tables =\n  { actions : (parser_env -> Obj.t) array;\n    transl_const : int array;\n    transl_block : int array;\n    lhs : string;\n    len : string;\n    defred : string;\n    dgoto : string;\n    sindex : string;\n    rindex : string;\n    gindex : string;\n    tablesize : int;\n    table : string;\n    check : string;\n    error_function : string -> unit;\n    names_const : string;\n    names_block : string }\n\nexception YYexit of Obj.t\nexception Parse_error\n\ntype parser_input =\n    Start\n  | Token_read\n  | Stacks_grown_1\n  | Stacks_grown_2\n  | Semantic_action_computed\n  | Error_detected\n\ntype parser_output =\n    Read_token\n  | Raise_parse_error\n  | Grow_stacks_1\n  | Grow_stacks_2\n  | Compute_semantic_action\n  | Call_error_function\n\n(* to avoid warnings *)\nlet _ = [Read_token; Raise_parse_error; Grow_stacks_1; Grow_stacks_2;\n         Compute_semantic_action; Call_error_function]\n\nexternal parse_engine :\n    parse_tables -> parser_env -> parser_input -> Obj.t -> parser_output\n    = \"caml_parse_engine\"\n\nexternal set_trace: bool -> bool\n    = \"caml_set_parser_trace\"\n\nlet env =\n  { s_stack = Array.make 100 0;\n    v_stack = Array.make 100 (Obj.repr ());\n    symb_start_stack = Array.make 100 dummy_pos;\n    symb_end_stack = Array.make 100 dummy_pos;\n    stacksize = 100;\n    stackbase = 0;\n    curr_char = 0;\n    lval = Obj.repr ();\n    symb_start = dummy_pos;\n    symb_end = dummy_pos;\n    asp = 0;\n    rule_len = 0;\n    rule_number = 0;\n    sp = 0;\n    state = 0;\n    errflag = 0 }\n\nlet grow_stacks() =\n  let oldsize = env.stacksize in\n  let newsize = oldsize * 2 in\n  let new_s = Array.make newsize 0\n  and new_v = Array.make newsize (Obj.repr ())\n  and new_start = Array.make newsize dummy_pos\n  and new_end = Array.make newsize dummy_pos in\n    Array.blit env.s_stack 0 new_s 0 oldsize;\n    env.s_stack <- new_s;\n    Array.blit env.v_stack 0 new_v 0 oldsize;\n    env.v_stack <- new_v;\n    Array.blit env.symb_start_stack 0 new_start 0 oldsize;\n    env.symb_start_stack <- new_start;\n    Array.blit env.symb_end_stack 0 new_end 0 oldsize;\n    env.symb_end_stack <- new_end;\n    env.stacksize <- newsize\n\nlet clear_parser() =\n  Array.fill env.v_stack 0 env.stacksize (Obj.repr ());\n  env.lval <- Obj.repr ()\n\nlet current_lookahead_fun = ref (fun (_ : Obj.t) -> false)\n\nlet yyparse tables start lexer lexbuf =\n  let rec loop cmd arg =\n    match parse_engine tables env cmd arg with\n      Read_token ->\n        let t = Obj.repr(lexer lexbuf) in\n        env.symb_start <- lexbuf.lex_start_p;\n        env.symb_end <- lexbuf.lex_curr_p;\n        loop Token_read t\n    | Raise_parse_error ->\n        raise Parse_error\n    | Compute_semantic_action ->\n        let (action, value) =\n          try\n            (Semantic_action_computed, tables.actions.(env.rule_number) env)\n          with Parse_error ->\n            (Error_detected, Obj.repr ()) in\n        loop action value\n    | Grow_stacks_1 ->\n        grow_stacks(); loop Stacks_grown_1 (Obj.repr ())\n    | Grow_stacks_2 ->\n        grow_stacks(); loop Stacks_grown_2 (Obj.repr ())\n    | Call_error_function ->\n        tables.error_function \"syntax error\";\n        loop Error_detected (Obj.repr ()) in\n  let init_asp = env.asp\n  and init_sp = env.sp\n  and init_stackbase = env.stackbase\n  and init_state = env.state\n  and init_curr_char = env.curr_char\n  and init_lval = env.lval\n  and init_errflag = env.errflag in\n  env.stackbase <- env.sp + 1;\n  env.curr_char <- start;\n  env.symb_end <- lexbuf.lex_curr_p;\n  try\n    loop Start (Obj.repr ())\n  with exn ->\n    let curr_char = env.curr_char in\n    env.asp <- init_asp;\n    env.sp <- init_sp;\n    env.stackbase <- init_stackbase;\n    env.state <- init_state;\n    env.curr_char <- init_curr_char;\n    env.lval <- init_lval;\n    env.errflag <- init_errflag;\n    match exn with\n      YYexit v ->\n        Obj.magic v\n    | _ ->\n        current_lookahead_fun :=\n          (fun tok ->\n            if Obj.is_block tok\n            then tables.transl_block.(Obj.tag tok) = curr_char\n            else tables.transl_const.(Obj.magic tok) = curr_char);\n        raise exn\n\nlet peek_val env n =\n  Obj.magic env.v_stack.(env.asp - n)\n\nlet symbol_start_pos () =\n  let rec loop i =\n    if i <= 0 then env.symb_end_stack.(env.asp)\n    else begin\n      let st = env.symb_start_stack.(env.asp - i + 1) in\n      let en = env.symb_end_stack.(env.asp - i + 1) in\n      if st <> en then st else loop (i - 1)\n    end\n  in\n  loop env.rule_len\n\nlet symbol_end_pos () = env.symb_end_stack.(env.asp)\nlet rhs_start_pos n = env.symb_start_stack.(env.asp - (env.rule_len - n))\nlet rhs_end_pos n = env.symb_end_stack.(env.asp - (env.rule_len - n))\n\nlet symbol_start () = (symbol_start_pos ()).pos_cnum\nlet symbol_end () = (symbol_end_pos ()).pos_cnum\nlet rhs_start n = (rhs_start_pos n).pos_cnum\nlet rhs_end n = (rhs_end_pos n).pos_cnum\n\nlet is_current_lookahead tok =\n  (!current_lookahead_fun)(Obj.repr tok)\n\nlet parse_error (_ : string) = ()\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of arrays. *)\ntype 'a t = 'a array\n\n(* Array operations *)\n\nexternal length : 'a array -> int = \"%array_length\"\nexternal get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nexternal unsafe_get: 'a array -> int -> 'a = \"%array_unsafe_get\"\nexternal unsafe_set: 'a array -> int -> 'a -> unit = \"%array_unsafe_set\"\nexternal make: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal create: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal unsafe_sub : 'a array -> int -> int -> 'a array = \"caml_array_sub\"\nexternal append_prim : 'a array -> 'a array -> 'a array = \"caml_array_append\"\nexternal concat : 'a array list -> 'a array = \"caml_array_concat\"\nexternal unsafe_blit :\n  'a array -> int -> 'a array -> int -> int -> unit = \"caml_array_blit\"\nexternal unsafe_fill :\n  'a array -> int -> int -> 'a -> unit = \"caml_array_fill\"\nexternal create_float: int -> float array = \"caml_make_float_vect\"\nlet make_float = create_float\n\nmodule Floatarray = struct\n  external create : int -> floatarray = \"caml_floatarray_create\"\n  external length : floatarray -> int = \"%floatarray_length\"\n  external get : floatarray -> int -> float = \"%floatarray_safe_get\"\n  external set : floatarray -> int -> float -> unit = \"%floatarray_safe_set\"\n  external unsafe_get : floatarray -> int -> float = \"%floatarray_unsafe_get\"\n  external unsafe_set : floatarray -> int -> float -> unit\n      = \"%floatarray_unsafe_set\"\nend\n\nlet init l f =\n  if l = 0 then [||] else\n  if l < 0 then invalid_arg \"Array.init\"\n  (* See #6575. We could also check for maximum array size, but this depends\n     on whether we create a float array or a regular one... *)\n  else\n   let res = create l (f 0) in\n   for i = 1 to pred l do\n     unsafe_set res i (f i)\n   done;\n   res\n\nlet make_matrix sx sy init =\n  let res = create sx [||] in\n  for x = 0 to pred sx do\n    unsafe_set res x (create sy init)\n  done;\n  res\n\nlet create_matrix = make_matrix\n\nlet copy a =\n  let l = length a in if l = 0 then [||] else unsafe_sub a 0 l\n\nlet append a1 a2 =\n  let l1 = length a1 in\n  if l1 = 0 then copy a2\n  else if length a2 = 0 then unsafe_sub a1 0 l1\n  else append_prim a1 a2\n\nlet sub a ofs len =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.sub\"\n  else unsafe_sub a ofs len\n\nlet fill a ofs len v =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.fill\"\n  else unsafe_fill a ofs len v\n\nlet blit a1 ofs1 a2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len\n             || ofs2 < 0 || ofs2 > length a2 - len\n  then invalid_arg \"Array.blit\"\n  else unsafe_blit a1 ofs1 a2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet iter2 f a b =\n  if length a <> length b then\n    invalid_arg \"Array.iter2: arrays must have the same length\"\n  else\n    for i = 0 to length a - 1 do f (unsafe_get a i) (unsafe_get b i) done\n\nlet map f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f(unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f(unsafe_get a i))\n    done;\n    r\n  end\n\nlet map2 f a b =\n  let la = length a in\n  let lb = length b in\n  if la <> lb then\n    invalid_arg \"Array.map2: arrays must have the same length\"\n  else begin\n    if la = 0 then [||] else begin\n      let r = create la (f (unsafe_get a 0) (unsafe_get b 0)) in\n      for i = 1 to la - 1 do\n        unsafe_set r i (f (unsafe_get a i) (unsafe_get b i))\n      done;\n      r\n    end\n  end\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet mapi f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f 0 (unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n  end\n\nlet to_list a =\n  let rec tolist i res =\n    if i < 0 then res else tolist (i - 1) (unsafe_get a i :: res) in\n  tolist (length a - 1) []\n\n(* Cannot use List.length here because the List module depends on Array. *)\nlet rec list_length accu = function\n  | [] -> accu\n  | _::t -> list_length (succ accu) t\n\nlet of_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let a = create (list_length 0 l) hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i+1) tl in\n      fill 1 tl\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get a i) then loop (succ i)\n    else false in\n  loop 0\n\nlet mem x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if compare (unsafe_get a i) x = 0 then true\n    else loop (succ i) in\n  loop 0\n\nlet memq x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if x == (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nexception Bottom of int\nlet sort cmp a =\n  let maxson l i =\n    let i31 = i+i+i+1 in\n    let x = ref i31 in\n    if i31+2 < l then begin\n      if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n      if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n      !x\n    end else\n      if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n      then i31+1\n      else if i31 < l then i31 else raise (Bottom i)\n  in\n  let rec trickledown l i e =\n    let j = maxson l i in\n    if cmp (get a j) e > 0 then begin\n      set a i (get a j);\n      trickledown l j e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n  let rec bubbledown l i =\n    let j = maxson l i in\n    set a i (get a j);\n    bubbledown l j\n  in\n  let bubble l i = try bubbledown l i with Bottom i -> i in\n  let rec trickleup i e =\n    let father = (i - 1) / 3 in\n    assert (i <> father);\n    if cmp (get a father) e < 0 then begin\n      set a i (get a father);\n      if father > 0 then trickleup father e else set a 0 e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let l = length a in\n  for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n  for i = l - 1 downto 2 do\n    let e = (get a i) in\n    set a i (get a 0);\n    trickleup (bubble i 0) e;\n  done;\n  if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e)\n\n\nlet cutoff = 5\nlet stable_sort cmp a =\n  let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n    let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n    let rec loop i1 s1 i2 s2 d =\n      if cmp s1 s2 <= 0 then begin\n        set dst d s1;\n        let i1 = i1 + 1 in\n        if i1 < src1r then\n          loop i1 (get a i1) i2 s2 (d + 1)\n        else\n          blit src2 i2 dst (d + 1) (src2r - i2)\n      end else begin\n        set dst d s2;\n        let i2 = i2 + 1 in\n        if i2 < src2r then\n          loop i1 s1 i2 (get src2 i2) (d + 1)\n        else\n          blit a i1 dst (d + 1) (src1r - i1)\n      end\n    in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n  in\n  let isortto srcofs dst dstofs len =\n    for i = 0 to len - 1 do\n      let e = (get a (srcofs + i)) in\n      let j = ref (dstofs + i - 1) in\n      while (!j >= dstofs && cmp (get dst !j) e > 0) do\n        set dst (!j + 1) (get dst !j);\n        decr j;\n      done;\n      set dst (!j + 1) e;\n    done;\n  in\n  let rec sortto srcofs dst dstofs len =\n    if len <= cutoff then isortto srcofs dst dstofs len else begin\n      let l1 = len / 2 in\n      let l2 = len - l1 in\n      sortto (srcofs + l1) dst (dstofs + l1) l2;\n      sortto srcofs a (srcofs + l2) l1;\n      merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n    end;\n  in\n  let l = length a in\n  if l <= cutoff then isortto 0 a 0 l else begin\n    let l1 = l / 2 in\n    let l2 = l - l1 in\n    let t = make l2 (get a 0) in\n    sortto l1 t 0 l2;\n    sortto 0 a l2 l1;\n    merge l2 l1 t 0 l2 a 0;\n  end\n\n\nlet fast_sort = stable_sort\n\n(** {1 Iterators} *)\n\nlet to_seq a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons (x, aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet to_seqi a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons ((i,x), aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet of_rev_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let len = list_length 0 l in\n      let a = create len hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i-1) tl\n      in\n      fill (len-2) tl\n\nlet of_seq i =\n  let l = Seq.fold_left (fun acc x -> x::acc) [] i in\n  of_rev_list l\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\ntype t =\n {mutable buffer : bytes;\n  mutable position : int;\n  mutable length : int;\n  initial_buffer : bytes}\n(* Invariants: all parts of the code preserve the invariants that:\n   - [0 <= b.position <= b.length]\n   - [b.length = Bytes.length b.buffer]\n\n   Note in particular that [b.position = b.length] is legal,\n   it means that the buffer is full and will have to be extended\n   before any further addition. *)\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n {buffer = s; position = 0; length = n; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.unsafe_blit src.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  if ofs < 0 || ofs >= b.position then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get b.buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0;\n  b.buffer <- b.initial_buffer;\n  b.length <- Bytes.length b.buffer\n\n(* [resize b more] ensures that [b.position + more <= b.length] holds\n   by dynamically extending [b.buffer] if necessary -- and thus\n   increasing [b.length].\n\n   In particular, after [resize b more] is called, a direct access of\n   size [more] at [b.position] will always be in-bounds, so that\n   (unsafe_{get,set}) may be used for performance.\n*)\nlet resize b more =\n  let old_pos = b.position in\n  let old_len = b.length in\n  let new_len = ref old_len in\n  while old_pos + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if old_pos + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.buffer 0 new_buffer 0 b.position;\n  b.buffer <- new_buffer;\n  b.length <- !new_len;\n  assert (b.position + more <= b.length);\n  assert (old_pos + more <= b.length);\n  ()\n  (* Note: there are various situations (preemptive threads, signals and\n     gc finalizers) where OCaml code may be run asynchronously; in\n     particular, there may be a race with another user of [b], changing\n     its mutable fields in the middle of the [resize] call. The Buffer\n     module does not provide any correctness guarantee if that happens,\n     but we must still ensure that the datastructure invariants hold for\n     memory-safety -- as we plan to use [unsafe_{get,set}].\n\n     There are two potential allocation points in this function,\n     [ref] and [Bytes.create], but all reads and writes to the fields\n     of [b] happen before both of them or after both of them.\n\n     We therefore assume that [b.position] may change at these allocations,\n     and check that the [b.position + more <= b.length] postcondition\n     holds for both values of [b.position], before or after the function\n     is called. More precisely, the following invariants must hold if the\n     function returns correctly, in addition to the usual buffer invariants:\n     - [old(b.position) + more <= new(b.length)]\n     - [new(b.position) + more <= new(b.length)]\n     - [old(b.length) <= new(b.length)]\n\n     Note: [b.position + more <= old(b.length)] does *not*\n     hold in general, as it is precisely the case where you need\n     to call [resize] to increase [b.length].\n\n     Note: [assert] above does not mean that we know the conditions\n     always hold, but that the function may return correctly\n     only if they hold.\n\n     Note: the other functions in this module does not need\n     to be checked with this level of scrutiny, given that they\n     read/write the buffer immediately after checking that\n     [b.position + more <= b.length] hold or calling [resize].\n  *)\n\nlet add_char b c =\n  let pos = b.position in\n  if pos >= b.length then resize b 1;\n  Bytes.unsafe_set b.buffer pos c;\n  b.position <- pos + 1\n\n let add_utf_8_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0x007F ->\n     add_char b (Char.unsafe_chr u)\n | u when u <= 0x07FF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xC0 lor (u lsr 6)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 2\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 3 > b.length then resize b 3;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xE0 lor (u lsr 12)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 3\n | u when u <= 0x10FFFF ->\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    )\n       (Char.unsafe_chr (0xF0 lor (u lsr 18)));\n     Bytes.unsafe_set b.buffer (pos + 1)\n       (Char.unsafe_chr (0x80 lor ((u lsr 12) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 2)\n       (Char.unsafe_chr (0x80 lor ((u lsr 6) land 0x3F)));\n     Bytes.unsafe_set b.buffer (pos + 3)\n       (Char.unsafe_chr (0x80 lor (u land 0x3F)));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16be_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u land 0xFF));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo land 0xFF));\n     b.position <- pos + 4\n | _ -> assert false\n\n let add_utf_16le_uchar b u = match Uchar.to_int u with\n | u when u < 0 -> assert false\n | u when u <= 0xFFFF ->\n     let pos = b.position in\n     if pos + 2 > b.length then resize b 2;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (u land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (u lsr 8));\n     b.position <- pos + 2\n | u when u <= 0x10FFFF ->\n     let u' = u - 0x10000 in\n     let hi = 0xD800 lor (u' lsr 10) in\n     let lo = 0xDC00 lor (u' land 0x3FF) in\n     let pos = b.position in\n     if pos + 4 > b.length then resize b 4;\n     Bytes.unsafe_set b.buffer (pos    ) (Char.unsafe_chr (hi land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 1) (Char.unsafe_chr (hi lsr 8));\n     Bytes.unsafe_set b.buffer (pos + 2) (Char.unsafe_chr (lo land 0xFF));\n     Bytes.unsafe_set b.buffer (pos + 3) (Char.unsafe_chr (lo lsr 8));\n     b.position <- pos + 4\n | _ -> assert false\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.unsafe_blit_string s offset b.buffer b.position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.unsafe_blit_string s 0 b.buffer b.position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.buffer 0 bs.position\n\n(* this (private) function could move into the standard library *)\nlet really_input_up_to ic buf ofs len =\n  let rec loop ic buf ~already_read ~ofs ~to_read =\n    if to_read = 0 then already_read\n    else begin\n      let r = input ic buf ofs to_read in\n      if r = 0 then already_read\n      else begin\n        let already_read = already_read + r in\n        let ofs = ofs + r in\n        let to_read = to_read - r in\n        loop ic buf ~already_read ~ofs ~to_read\n      end\n    end\n  in loop ic buf ~already_read:0 ~ofs ~to_read:len\n\n\nlet unsafe_add_channel_up_to b ic len =\n  if b.position + len > b.length then resize b len;\n  let n = really_input_up_to ic b.buffer b.position len in\n  (* The assertion below may fail in weird scenario where\n     threaded/finalizer code, run asynchronously during the\n     [really_input_up_to] call, races on the buffer; we don't ensure\n     correctness in this case, but need to preserve the invariants for\n     memory-safety (see discussion of [resize]). *)\n  assert (b.position + n <= b.length);\n  b.position <- b.position + n;\n  n\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  let n = unsafe_add_channel_up_to b ic len in\n  (* It is intentional that a consumer catching End_of_file\n     will see the data written (see #6719, #7136). *)\n  if n < len then raise End_of_file;\n  ()\n\nlet output_buffer oc b =\n  output oc b.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n\nlet truncate b len =\n    if len < 0 || len > length b then\n      invalid_arg \"Buffer.truncate\"\n    else\n      b.position <- len\n\n(** {1 Iterators} *)\n\nlet to_seq b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.unsafe_get b.buffer i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.unsafe_get b.buffer i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet add_seq b seq = Seq.iter (add_char b) seq\n\nlet of_seq i =\n  let b = create 32 in\n  add_seq b i;\n  b\n\n(** {6 Binary encoding of integers} *)\n\nexternal unsafe_set_int8 : bytes -> int -> int -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_set_int16 : bytes -> int -> int -> unit = \"%caml_bytes_set16u\"\nexternal unsafe_set_int32 : bytes -> int -> int32 -> unit = \"%caml_bytes_set32u\"\nexternal unsafe_set_int64 : bytes -> int -> int64 -> unit = \"%caml_bytes_set64u\"\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\n\nlet add_int8 b x =\n  let new_position = b.position + 1 in\n  if new_position > b.length then resize b 1;\n  unsafe_set_int8 b.buffer b.position x;\n  b.position <- new_position\n\nlet add_int16_ne b x =\n  let new_position = b.position + 2 in\n  if new_position > b.length then resize b 2;\n  unsafe_set_int16 b.buffer b.position x;\n  b.position <- new_position\n\nlet add_int32_ne b x =\n  let new_position = b.position + 4 in\n  if new_position > b.length then resize b 4;\n  unsafe_set_int32 b.buffer b.position x;\n  b.position <- new_position\n\nlet add_int64_ne b x =\n  let new_position = b.position + 8 in\n  if new_position > b.length then resize b 8;\n  unsafe_set_int64 b.buffer b.position x;\n  b.position <- new_position\n\nlet add_int16_le b x =\n  add_int16_ne b (if Sys.big_endian then swap16 x else x)\n\nlet add_int16_be b x =\n  add_int16_ne b (if Sys.big_endian then x else swap16 x)\n\nlet add_int32_le b x =\n  add_int32_ne b (if Sys.big_endian then swap32 x else x)\n\nlet add_int32_be b x =\n  add_int32_ne b (if Sys.big_endian then x else swap32 x)\n\nlet add_int64_le b x =\n  add_int64_ne b (if Sys.big_endian then swap64 x else x)\n\nlet add_int64_be b x =\n  add_int64_ne b (if Sys.big_endian then x else swap64 x)\n\nlet add_uint8 = add_int8\nlet add_uint16_ne = add_int16_ne\nlet add_uint16_le = add_int16_le\nlet add_uint16_be = add_int16_be\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase c =\n  if (c >= 'A' && c <= 'Z')\n  || (c >= '\\192' && c <= '\\214')\n  || (c >= '\\216' && c <= '\\222')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase c =\n  if (c >= 'a' && c <= 'z')\n  || (c >= '\\224' && c <= '\\246')\n  || (c >= '\\248' && c <= '\\254')\n  then unsafe_chr(code c - 32)\n  else c\n\nlet lowercase_ascii c =\n  if (c >= 'A' && c <= 'Z')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase_ascii c =\n  if (c >= 'a' && c <= 'z')\n  then unsafe_chr(code c - 32)\n  else c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\ntype t = exn = ..\n\nlet printers = ref []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet use_printers x =\n  let rec conv = function\n    | hd :: tl ->\n        (match hd x with\n         | None | exception _ -> conv tl\n         | Some s -> Some s)\n    | [] -> None in\n  conv !printers\n\nlet to_string_default = function\n  | Out_of_memory -> \"Out of memory\"\n  | Stack_overflow -> \"Stack overflow\"\n  | Match_failure(file, line, char) ->\n      sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n  | Assert_failure(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Assertion failed\"\n  | Undefined_recursive_module(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n  | x ->\n      let x = Obj.repr x in\n      if Obj.tag x <> 0 then\n        (Obj.magic (Obj.field x 0) : string)\n      else\n        let constructor =\n          (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n        constructor ^ (fields x)\n\nlet to_string e =\n  match use_printers e with\n  | Some s -> s\n  | None -> to_string_default e\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\nexternal raise_with_backtrace: exn -> raw_backtrace -> 'a\n  = \"%raise_with_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\nend\n\nexternal raw_backtrace_length :\n  raw_backtrace -> int = \"caml_raw_backtrace_length\" [@@noalloc]\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () = raw_backtrace_to_string (get_raw_backtrace ())\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet register_printer fn =\n  printers := fn :: !printers\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\n\nlet uncaught_exception_handler = ref None\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := Some fn\n\nlet empty_backtrace : raw_backtrace = Obj.obj (Obj.new_block Obj.abstract_tag 0)\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [runtime/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Stdlib.do_at_exit () with _ -> ());\n    match !uncaught_exception_handler with\n    | None ->\n        eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n        print_raw_backtrace stderr raw_backtrace;\n        flush stderr\n    | Some handler ->\n        try\n          handler exn raw_backtrace\n        with exn' ->\n          let raw_backtrace' = try_get_raw_backtrace () in\n          eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n          print_raw_backtrace stderr raw_backtrace;\n          eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n            (to_string exn');\n          print_raw_backtrace stderr raw_backtrace';\n          flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [runtime/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Sets over ordered types *)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type elt\n    type t\n    val empty: t\n    val is_empty: t -> bool\n    val mem: elt -> t -> bool\n    val add: elt -> t -> t\n    val singleton: elt -> t\n    val remove: elt -> t -> t\n    val union: t -> t -> t\n    val inter: t -> t -> t\n    val disjoint: t -> t -> bool\n    val diff: t -> t -> t\n    val compare: t -> t -> int\n    val equal: t -> t -> bool\n    val subset: t -> t -> bool\n    val iter: (elt -> unit) -> t -> unit\n    val map: (elt -> elt) -> t -> t\n    val fold: (elt -> 'a -> 'a) -> t -> 'a -> 'a\n    val for_all: (elt -> bool) -> t -> bool\n    val exists: (elt -> bool) -> t -> bool\n    val filter: (elt -> bool) -> t -> t\n    val partition: (elt -> bool) -> t -> t * t\n    val cardinal: t -> int\n    val elements: t -> elt list\n    val min_elt: t -> elt\n    val min_elt_opt: t -> elt option\n    val max_elt: t -> elt\n    val max_elt_opt: t -> elt option\n    val choose: t -> elt\n    val choose_opt: t -> elt option\n    val split: elt -> t -> t * bool * t\n    val find: elt -> t -> elt\n    val find_opt: elt -> t -> elt option\n    val find_first: (elt -> bool) -> t -> elt\n    val find_first_opt: (elt -> bool) -> t -> elt option\n    val find_last: (elt -> bool) -> t -> elt\n    val find_last_opt: (elt -> bool) -> t -> elt option\n    val of_list: elt list -> t\n    val to_seq_from : elt -> t -> elt Seq.t\n    val to_seq : t -> elt Seq.t\n    val add_seq : elt Seq.t -> t -> t\n    val of_seq : elt Seq.t -> t\n  end\n\nmodule Make(Ord: OrderedType) =\n  struct\n    type elt = Ord.t\n    type t = Empty | Node of {l:t; v:elt; r:t; h:int}\n\n    (* Sets are represented by balanced binary trees (the heights of the\n       children differ by at most 2 *)\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    (* Creates a new node with left son l, value v and right son r.\n       We must have all elements of l < v < all elements of r.\n       l and r must be balanced and | height l - height r | <= 2.\n       Inline expansion of height for better speed. *)\n\n    let create l v r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      Node{l; v; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    (* Same as create, but performs one step of rebalancing if necessary.\n       Assumes l and r balanced and | height l - height r | <= 3.\n       Inline expansion of create for better speed in the most frequent case\n       where no rebalancing is required. *)\n\n    let bal l v r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node{l=ll; v=lv; r=lr} ->\n            if height ll >= height lr then\n              create ll lv (create lr v r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node{l=lrl; v=lrv; r=lrr}->\n                  create (create ll lv lrl) lrv (create lrr v r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node{l=rl; v=rv; r=rr} ->\n            if height rr >= height rl then\n              create (create l v rl) rv rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node{l=rll; v=rlv; r=rlr} ->\n                  create (create l v rll) rlv (create rlr rv rr)\n            end\n      end else\n        Node{l; v; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    (* Insertion of one element *)\n\n    let rec add x = function\n        Empty -> Node{l=Empty; v=x; r=Empty; h=1}\n      | Node{l; v; r} as t ->\n          let c = Ord.compare x v in\n          if c = 0 then t else\n          if c < 0 then\n            let ll = add x l in\n            if l == ll then t else bal ll v r\n          else\n            let rr = add x r in\n            if r == rr then t else bal l v rr\n\n    let singleton x = Node{l=Empty; v=x; r=Empty; h=1}\n\n    (* Beware: those two functions assume that the added v is *strictly*\n       smaller (or bigger) than all the present elements in the tree; it\n       does not test for equality with the current min (or max) element.\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_element x = function\n      | Empty -> singleton x\n      | Node {l; v; r} ->\n        bal (add_min_element x l) v r\n\n    let rec add_max_element x = function\n      | Empty -> singleton x\n      | Node {l; v; r} ->\n        bal l v (add_max_element x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v r =\n      match (l, r) with\n        (Empty, _) -> add_min_element v r\n      | (_, Empty) -> add_max_element v l\n      | (Node{l=ll; v=lv; r=lr; h=lh}, Node{l=rl; v=rv; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv (join lr v r) else\n          if rh > lh + 2 then bal (join l v rl) rv rr else\n          create l v r\n\n    (* Smallest and greatest element of a set *)\n\n    let rec min_elt = function\n        Empty -> raise Not_found\n      | Node{l=Empty; v} -> v\n      | Node{l} -> min_elt l\n\n    let rec min_elt_opt = function\n        Empty -> None\n      | Node{l=Empty; v} -> Some v\n      | Node{l} -> min_elt_opt l\n\n    let rec max_elt = function\n        Empty -> raise Not_found\n      | Node{v; r=Empty} -> v\n      | Node{r} -> max_elt r\n\n    let rec max_elt_opt = function\n        Empty -> None\n      | Node{v; r=Empty} -> Some v\n      | Node{r} -> max_elt_opt r\n\n    (* Remove the smallest element of the given set *)\n\n    let rec remove_min_elt = function\n        Empty -> invalid_arg \"Set.remove_min_elt\"\n      | Node{l=Empty; r} -> r\n      | Node{l; v; r} -> bal (remove_min_elt l) v r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       Assume | height l - height r | <= 2. *)\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) -> bal t1 (min_elt t2) (remove_min_elt t2)\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) -> join t1 (min_elt t2) (remove_min_elt t2)\n\n    (* Splitting.  split x s returns a triple (l, present, r) where\n        - l is the set of elements of s that are < x\n        - r is the set of elements of s that are > x\n        - present is false if s contains no element equal to x,\n          or true if s contains an element equal to x. *)\n\n    let rec split x = function\n        Empty ->\n          (Empty, false, Empty)\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, true, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v r)\n          else\n            let (lr, pres, rr) = split x r in (join l v lr, pres, rr)\n\n    (* Implementation of the set operations *)\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec mem x = function\n        Empty -> false\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec remove x = function\n        Empty -> Empty\n      | (Node{l; v; r} as t) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else\n            if c < 0 then\n              let ll = remove x l in\n              if l == ll then t\n              else bal ll v r\n            else\n              let rr = remove x r in\n              if r == rr then t\n              else bal l v rr\n\n    let rec union s1 s2 =\n      match (s1, s2) with\n        (Empty, t2) -> t2\n      | (t1, Empty) -> t1\n      | (Node{l=l1; v=v1; r=r1; h=h1}, Node{l=l2; v=v2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            if h2 = 1 then add v2 s1 else begin\n              let (l2, _, r2) = split v1 s2 in\n              join (union l1 l2) v1 (union r1 r2)\n            end\n          else\n            if h1 = 1 then add v1 s2 else begin\n              let (l1, _, r1) = split v2 s1 in\n              join (union l1 l2) v2 (union r1 r2)\n            end\n\n    let rec inter s1 s2 =\n      match (s1, s2) with\n        (Empty, _) -> Empty\n      | (_, Empty) -> Empty\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          match split v1 t2 with\n            (l2, false, r2) ->\n              concat (inter l1 l2) (inter r1 r2)\n          | (l2, true, r2) ->\n              join (inter l1 l2) v1 (inter r1 r2)\n\n    (* Same as split, but compute the left and right subtrees\n       only if the pivot element is not in the set.  The right subtree\n       is computed on demand. *)\n\n    type split_bis =\n      | Found\n      | NotFound of t * (unit -> t)\n\n    let rec split_bis x = function\n        Empty ->\n          NotFound (Empty, (fun () -> Empty))\n      | Node{l; v; r; _} ->\n          let c = Ord.compare x v in\n          if c = 0 then Found\n          else if c < 0 then\n            match split_bis x l with\n            | Found -> Found\n            | NotFound (ll, rl) -> NotFound (ll, (fun () -> join (rl ()) v r))\n          else\n            match split_bis x r with\n            | Found -> Found\n            | NotFound (lr, rr) -> NotFound (join l v lr, rr)\n\n    let rec disjoint s1 s2 =\n      match (s1, s2) with\n        (Empty, _) | (_, Empty) -> true\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          if s1 == s2 then false\n          else match split_bis v1 t2 with\n              NotFound(l2, r2) -> disjoint l1 l2 && disjoint r1 (r2 ())\n            | Found -> false\n\n    let rec diff s1 s2 =\n      match (s1, s2) with\n        (Empty, _) -> Empty\n      | (t1, Empty) -> t1\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          match split v1 t2 with\n            (l2, false, r2) ->\n              join (diff l1 l2) v1 (diff r1 r2)\n          | (l2, true, r2) ->\n              concat (diff l1 l2) (diff r1 r2)\n\n    type enumeration = End | More of elt * t * enumeration\n\n    let rec cons_enum s e =\n      match s with\n        Empty -> e\n      | Node{l; v; r} -> cons_enum l (More(v, r, e))\n\n    let rec compare_aux e1 e2 =\n        match (e1, e2) with\n        (End, End) -> 0\n      | (End, _)  -> -1\n      | (_, End) -> 1\n      | (More(v1, r1, e1), More(v2, r2, e2)) ->\n          let c = Ord.compare v1 v2 in\n          if c <> 0\n          then c\n          else compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n\n    let compare s1 s2 =\n      compare_aux (cons_enum s1 End) (cons_enum s2 End)\n\n    let equal s1 s2 =\n      compare s1 s2 = 0\n\n    let rec subset s1 s2 =\n      match (s1, s2) with\n        Empty, _ ->\n          true\n      | _, Empty ->\n          false\n      | Node {l=l1; v=v1; r=r1}, (Node {l=l2; v=v2; r=r2} as t2) ->\n          let c = Ord.compare v1 v2 in\n          if c = 0 then\n            subset l1 l2 && subset r1 r2\n          else if c < 0 then\n            subset (Node {l=l1; v=v1; r=Empty; h=0}) l2 && subset r1 t2\n          else\n            subset (Node {l=Empty; v=v1; r=r1; h=0}) r2 && subset l1 t2\n\n    let rec iter f = function\n        Empty -> ()\n      | Node{l; v; r} -> iter f l; f v; iter f r\n\n    let rec fold f s accu =\n      match s with\n        Empty -> accu\n      | Node{l; v; r} -> fold f r (f v (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node{l; v; r} -> p v && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node{l; v; r} -> p v || exists p l || exists p r\n\n    let rec filter p = function\n        Empty -> Empty\n      | (Node{l; v; r}) as t ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pv = p v in\n          let r' = filter p r in\n          if pv then\n            if l==l' && r==r' then t else join l' v r'\n          else concat l' r'\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node{l; v; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pv = p v in\n          let (rt, rf) = partition p r in\n          if pv\n          then (join lt v rt, concat lf rf)\n          else (concat lt rt, join lf v rf)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node{l; r} -> cardinal l + 1 + cardinal r\n\n    let rec elements_aux accu = function\n        Empty -> accu\n      | Node{l; v; r} -> elements_aux (v :: elements_aux accu r) l\n\n    let elements s =\n      elements_aux [] s\n\n    let choose = min_elt\n\n    let choose_opt = min_elt_opt\n\n    let rec find x = function\n        Empty -> raise Not_found\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then v\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 f = function\n        Empty ->\n          v0\n      | Node{l; v; r} ->\n          if f v then\n            find_first_aux v f l\n          else\n            find_first_aux v0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node{l; v; r} ->\n          if f v then\n            find_first_aux v f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 f = function\n        Empty ->\n          Some v0\n      | Node{l; v; r} ->\n          if f v then\n            find_first_opt_aux v f l\n          else\n            find_first_opt_aux v0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node{l; v; r} ->\n          if f v then\n            find_first_opt_aux v f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 f = function\n        Empty ->\n          v0\n      | Node{l; v; r} ->\n          if f v then\n            find_last_aux v f r\n          else\n            find_last_aux v0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node{l; v; r} ->\n          if f v then\n            find_last_aux v f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 f = function\n        Empty ->\n          Some v0\n      | Node{l; v; r} ->\n          if f v then\n            find_last_opt_aux v f r\n          else\n            find_last_opt_aux v0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node{l; v; r} ->\n          if f v then\n            find_last_opt_aux v f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty -> None\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some v\n          else find_opt x (if c < 0 then l else r)\n\n    let try_join l v r =\n      (* [join l v r] can only be called when (elements of l < v <\n         elements of r); use [try_join l v r] when this property may\n         not hold, but you hope it does hold in the common case *)\n      if (l = Empty || Ord.compare (max_elt l) v < 0)\n      && (r = Empty || Ord.compare v (min_elt r) < 0)\n      then join l v r\n      else union l (add v r)\n\n    let rec map f = function\n      | Empty -> Empty\n      | Node{l; v; r} as t ->\n         (* enforce left-to-right evaluation order *)\n         let l' = map f l in\n         let v' = f v in\n         let r' = map f r in\n         if l == l' && v == v' && r == r' then t\n         else try_join l' v' r'\n\n    let of_sorted_list l =\n      let rec sub n l =\n        match n, l with\n        | 0, l -> Empty, l\n        | 1, x0 :: l -> Node {l=Empty; v=x0; r=Empty; h=1}, l\n        | 2, x0 :: x1 :: l ->\n            Node{l=Node{l=Empty; v=x0; r=Empty; h=1}; v=x1; r=Empty; h=2}, l\n        | 3, x0 :: x1 :: x2 :: l ->\n            Node{l=Node{l=Empty; v=x0; r=Empty; h=1}; v=x1;\n                 r=Node{l=Empty; v=x2; r=Empty; h=1}; h=2}, l\n        | n, l ->\n          let nl = n / 2 in\n          let left, l = sub nl l in\n          match l with\n          | [] -> assert false\n          | mid :: l ->\n            let right, l = sub (n - nl - 1) l in\n            create left mid right, l\n      in\n      fst (sub (List.length l) l)\n\n    let of_list l =\n      match l with\n      | [] -> empty\n      | [x0] -> singleton x0\n      | [x0; x1] -> add x1 (singleton x0)\n      | [x0; x1; x2] -> add x2 (add x1 (singleton x0))\n      | [x0; x1; x2; x3] -> add x3 (add x2 (add x1 (singleton x0)))\n      | [x0; x1; x2; x3; x4] -> add x4 (add x3 (add x2 (add x1 (singleton x0))))\n      | _ -> of_sorted_list (List.sort_uniq Ord.compare l)\n\n    let add_seq i m =\n      Seq.fold_left (fun s x -> add x s) m i\n\n    let of_seq i = add_seq i empty\n\n    let rec seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (x, t, rest) -> Seq.Cons (x, seq_of_enum_ (cons_enum t rest))\n\n    let to_seq c = seq_of_enum_ (cons_enum c End)\n\n    let to_seq_from low s =\n      let rec aux low s c = match s with\n        | Empty -> c\n        | Node {l; r; v; _} ->\n            begin match Ord.compare v low with\n              | 0 -> More (v, r, c)\n              | n when n<0 -> aux low r c\n              | _ -> aux low l (More (v, r, c))\n            end\n      in\n      seq_of_enum_ (aux low s End)\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type +'a t\n    val empty: 'a t\n    val is_empty: 'a t -> bool\n    val mem:  key -> 'a t -> bool\n    val add: key -> 'a -> 'a t -> 'a t\n    val update: key -> ('a option -> 'a option) -> 'a t -> 'a t\n    val singleton: key -> 'a -> 'a t\n    val remove: key -> 'a t -> 'a t\n    val merge:\n          (key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t\n    val union: (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t\n    val compare: ('a -> 'a -> int) -> 'a t -> 'a t -> int\n    val equal: ('a -> 'a -> bool) -> 'a t -> 'a t -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val for_all: (key -> 'a -> bool) -> 'a t -> bool\n    val exists: (key -> 'a -> bool) -> 'a t -> bool\n    val filter: (key -> 'a -> bool) -> 'a t -> 'a t\n    val partition: (key -> 'a -> bool) -> 'a t -> 'a t * 'a t\n    val cardinal: 'a t -> int\n    val bindings: 'a t -> (key * 'a) list\n    val min_binding: 'a t -> (key * 'a)\n    val min_binding_opt: 'a t -> (key * 'a) option\n    val max_binding: 'a t -> (key * 'a)\n    val max_binding_opt: 'a t -> (key * 'a) option\n    val choose: 'a t -> (key * 'a)\n    val choose_opt: 'a t -> (key * 'a) option\n    val split: key -> 'a t -> 'a t * 'a option * 'a t\n    val find: key -> 'a t -> 'a\n    val find_opt: key -> 'a t -> 'a option\n    val find_first: (key -> bool) -> 'a t -> key * 'a\n    val find_first_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val find_last: (key -> bool) -> 'a t -> key * 'a\n    val find_last_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val map: ('a -> 'b) -> 'a t -> 'b t\n    val mapi: (key -> 'a -> 'b) -> 'a t -> 'b t\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t\n    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule Make(Ord: OrderedType) = struct\n\n    type key = Ord.t\n\n    type 'a t =\n        Empty\n      | Node of {l:'a t; v:key; d:'a; r:'a t; h:int}\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    let create l x d r =\n      let hl = height l and hr = height r in\n      Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let singleton x d = Node{l=Empty; v=x; d; r=Empty; h=1}\n\n    let bal l x d r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=ll; v=lv; d=ld; r=lr} ->\n            if height ll >= height lr then\n              create ll lv ld (create lr x d r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=lrl; v=lrv; d=lrd; r=lrr}->\n                  create (create ll lv ld lrl) lrv lrd (create lrr x d r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=rl; v=rv; d=rd; r=rr} ->\n            if height rr >= height rl then\n              create (create l x d rl) rv rd rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=rll; v=rlv; d=rld; r=rlr} ->\n                  create (create l x d rll) rlv rld (create rlr rv rd rr)\n            end\n      end else\n        Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec add x data = function\n        Empty ->\n          Node{l=Empty; v=x; d=data; r=Empty; h=1}\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then\n            if d == data then m else Node{l; v=x; d=data; r; h}\n          else if c < 0 then\n            let ll = add x data l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = add x data r in\n            if r == rr then m else bal l v d rr\n\n    let rec find x = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then d\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first_aux v0 d0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt_aux v0 d0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last_aux v0 d0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt_aux v0 d0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some d\n          else find_opt x (if c < 0 then l else r)\n\n    let rec mem x = function\n        Empty ->\n          false\n      | Node {l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec min_binding = function\n        Empty -> raise Not_found\n      | Node {l=Empty; v; d} -> (v, d)\n      | Node {l} -> min_binding l\n\n    let rec min_binding_opt = function\n        Empty -> None\n      | Node {l=Empty; v; d} -> Some (v, d)\n      | Node {l}-> min_binding_opt l\n\n    let rec max_binding = function\n        Empty -> raise Not_found\n      | Node {v; d; r=Empty} -> (v, d)\n      | Node {r} -> max_binding r\n\n    let rec max_binding_opt = function\n        Empty -> None\n      | Node {v; d; r=Empty} -> Some (v, d)\n      | Node {r} -> max_binding_opt r\n\n    let rec remove_min_binding = function\n        Empty -> invalid_arg \"Map.remove_min_elt\"\n      | Node {l=Empty; r} -> r\n      | Node {l; v; d; r} -> bal (remove_min_binding l) v d r\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          bal t1 x d (remove_min_binding t2)\n\n    let rec remove x = function\n        Empty ->\n          Empty\n      | (Node {l; v; d; r} as m) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else if c < 0 then\n            let ll = remove x l in if l == ll then m else bal ll v d r\n          else\n            let rr = remove x r in if r == rr then m else bal l v d rr\n\n    let rec update x f = function\n        Empty ->\n          begin match f None with\n          | None -> Empty\n          | Some data -> Node{l=Empty; v=x; d=data; r=Empty; h=1}\n          end\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then begin\n            match f (Some d) with\n            | None -> merge l r\n            | Some data ->\n                if d == data then m else Node{l; v=x; d=data; r; h}\n          end else if c < 0 then\n            let ll = update x f l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = update x f r in\n            if r == rr then m else bal l v d rr\n\n    let rec iter f = function\n        Empty -> ()\n      | Node {l; v; d; r} ->\n          iter f l; f v d; iter f r\n\n    let rec map f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = map f l in\n          let d' = f d in\n          let r' = map f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec mapi f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = mapi f l in\n          let d' = f v d in\n          let r' = mapi f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec fold f m accu =\n      match m with\n        Empty -> accu\n      | Node {l; v; d; r} ->\n          fold f r (f v d (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node {l; v; d; r} -> p v d && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node {l; v; d; r} -> p v d || exists p l || exists p r\n\n    (* Beware: those two functions assume that the added k is *strictly*\n       smaller (or bigger) than all the present keys in the tree; it\n       does not test for equality with the current min (or max) key.\n\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal (add_min_binding k x l) v d r\n\n    let rec add_max_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal l v d (add_max_binding k x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v d r =\n      match (l, r) with\n        (Empty, _) -> add_min_binding v d r\n      | (_, Empty) -> add_max_binding v d l\n      | (Node{l=ll; v=lv; d=ld; r=lr; h=lh},\n         Node{l=rl; v=rv; d=rd; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv ld (join lr v d r) else\n          if rh > lh + 2 then bal (join l v d rl) rv rd rr else\n          create l v d r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          join t1 x d (remove_min_binding t2)\n\n    let concat_or_join t1 v d t2 =\n      match d with\n      | Some d -> join t1 v d t2\n      | None -> concat t1 t2\n\n    let rec split x = function\n        Empty ->\n          (Empty, None, Empty)\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, Some d, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)\n          else\n            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)\n\n    let rec merge f s1 s2 =\n      match (s1, s2) with\n        (Empty, Empty) -> Empty\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, _) when h1 >= height s2 ->\n          let (l2, d2, r2) = split v1 s2 in\n          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)\n      | (_, Node {l=l2; v=v2; d=d2; r=r2}) ->\n          let (l1, d1, r1) = split v2 s1 in\n          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)\n      | _ ->\n          assert false\n\n    let rec union f s1 s2 =\n      match (s1, s2) with\n      | (Empty, s) | (s, Empty) -> s\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1},\n         Node {l=l2; v=v2; d=d2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            let (l2, d2, r2) = split v1 s2 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d2 with\n            | None -> join l v1 d1 r\n            | Some d2 -> concat_or_join l v1 (f v1 d1 d2) r\n          else\n            let (l1, d1, r1) = split v2 s1 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d1 with\n            | None -> join l v2 d2 r\n            | Some d1 -> concat_or_join l v2 (f v2 d1 d2) r\n\n    let rec filter p = function\n        Empty -> Empty\n      | Node {l; v; d; r} as m ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pvd = p v d in\n          let r' = filter p r in\n          if pvd then if l==l' && r==r' then m else join l' v d r'\n          else concat l' r'\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node {l; v; d; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pvd = p v d in\n          let (rt, rf) = partition p r in\n          if pvd\n          then (join lt v d rt, concat lf rf)\n          else (concat lt rt, join lf v d rf)\n\n    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration\n\n    let rec cons_enum m e =\n      match m with\n        Empty -> e\n      | Node {l; v; d; r} -> cons_enum l (More(v, d, r, e))\n\n    let compare cmp m1 m2 =\n      let rec compare_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> 0\n        | (End, _)  -> -1\n        | (_, End) -> 1\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            let c = Ord.compare v1 v2 in\n            if c <> 0 then c else\n            let c = cmp d1 d2 in\n            if c <> 0 then c else\n            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in compare_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let equal cmp m1 m2 =\n      let rec equal_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> true\n        | (End, _)  -> false\n        | (_, End) -> false\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            Ord.compare v1 v2 = 0 && cmp d1 d2 &&\n            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in equal_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node {l; r} -> cardinal l + 1 + cardinal r\n\n    let rec bindings_aux accu = function\n        Empty -> accu\n      | Node {l; v; d; r} -> bindings_aux ((v, d) :: bindings_aux accu r) l\n\n    let bindings s =\n      bindings_aux [] s\n\n    let choose = min_binding\n\n    let choose_opt = min_binding_opt\n\n    let add_seq i m =\n      Seq.fold_left (fun m (k,v) -> add k v m) m i\n\n    let of_seq i = add_seq i empty\n\n    let rec seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (k,v,t,rest) -> Seq.Cons ((k,v), seq_of_enum_ (cons_enum t rest))\n\n    let to_seq m =\n      seq_of_enum_ (cons_enum m End)\n\n    let to_seq_from low m =\n      let rec aux low m c = match m with\n        | Empty -> c\n        | Node {l; v; d; r; _} ->\n            begin match Ord.compare v low with\n              | 0 -> More (v, d, r, c)\n              | n when n<0 -> aux low r c\n              | _ -> aux low l (More (v, d, r, c))\n            end\n      in\n      seq_of_enum_ (aux low m End)\nend\n","(** Module [js] provides an entrypoint to the lang_narrow checker and evaluator\n    to be called from JavaScript, when compiled to JavaScript. *)\n\nopen Lang_narrow\nopen Lang_narrow.CodegenC\nopen Lang_narrow.Eval\nopen Lang_narrow.Language\nopen Lang_narrow.Typecheck\nopen Lexing\nopen Js_of_ocaml\nopen Js_of_ocaml.Js\n\nlet string_of_position lexbuf =\n  let pos = lexbuf.lex_curr_p in\n  Printf.sprintf \"%s:%d:%d\" pos.pos_fname pos.pos_lnum\n    (pos.pos_cnum - pos.pos_bol + 1)\n\nlet pr_binding what ty = Printf.sprintf \"%s :: %s\" what (string_of_ty ty)\n\nlet process_fn (ctx, bindings) (Fn (name, _, _, _) as fn) =\n  let ty = typecheck_fn ctx fn in\n  let bind = pr_binding name ty in\n  (Ctx.add_fn fn ty ctx, bindings @ [ bind ])\n\nlet lang_narrow program =\n  let ctx = Ctx.empty in\n  let lexbuf = Lexing.from_string ~with_positions:true program in\n  let { fns; expr } =\n    try Parser.program Lexer.read lexbuf with\n    | Lexer.SyntaxError msg ->\n        raise\n          (Failure\n             (Printf.sprintf \"Syntax error: %s at %s\\n\" msg\n                (string_of_position lexbuf)))\n    | _ ->\n        raise\n          (Failure\n             (Printf.sprintf \"Parse error at %s\\n\" (string_of_position lexbuf)))\n  in\n  Parsing.clear_parser ();\n  let ctx, bindings = List.fold_left process_fn (ctx, []) fns in\n  let bindings, expr =\n    match expr with\n    | None -> (bindings, None)\n    | Some e ->\n        let ety = typecheck ctx e in\n        let evaled = eval ctx e in\n        let ebind = pr_binding (string_of_expr evaled) ety in\n        (bindings @ [ ebind ], Some e)\n  in\n  let codegen = codegen_c fns expr in\n  (String.concat \"\\n\" bindings, codegen)\n\nlet _ =\n  Js.export_all\n    (object%js\n       method langNarrow program =\n         try\n           let bindings, codegen = lang_narrow (Js.to_string program) in\n           object%js\n             val bindings = Js.string bindings [@@readonly]\n\n             val codegen = Js.string codegen [@@readonly]\n           end\n         with Failure msg ->\n           Js.raise_js_error (new%js error_constr (Js.string msg))\n    end)\n","type primitive_ty = TyNat | TyString | TyBool\n\nmodule rec Ty : sig\n  type ty =\n    | TyUnknown  (** Top type *)\n    | TyNever  (** Bottom type *)\n    | TyPrim of primitive_ty\n    | TyFn of Ty.ty list * Ty.ty\n    | TyUnion of TySet.t\n    | TyRecord of (string * Ty.ty) list\n    | TyNarrowed of expr * Ty.ty * Ty.ty\n        (** [TyNarrowing e left right] respresents an expression that has been\n       type-narrowed (see [Narrow] and [RecordNarrow]). [left] is the narrowed\n       type, [right] is the expression type excluding the narrow.\n       *)\n\n  and expr =\n    | Var of string\n    | Nat of int\n    | String of string\n    | Bool of bool\n    | App of expr * expr list  (** Function application *)\n    | Narrow of expr * Ty.ty\n        (** A type narrowing check, for example \"a is string\" *)\n    | If of expr * expr * expr\n    | Record of (string * expr) list\n    | RecordProj of expr * string\n        (** A projection of a record, e.g. {a: 1}.a *)\n    | RecordNarrow of string * expr\n        (** A record narrowing check a la field existence, for example \"a in myRcd\" *)\nend =\n  Ty\n\nand TySet : sig\n  include Set.S with type elt = Ty.ty\nend = Set.Make (struct\n  type t = Ty.ty\n\n  let compare = compare\nend)\n\nopen Ty\n\ntype fn = Fn of string * (string * ty) list * ty * expr\n\ntype program = { fns : fn list; expr : expr option }\n\ntype toplevel = Program of program | Mode of string\n\ntype bind = BindFn of fn * ty | BindVar of ty\n\nmodule Ctx = struct\n  include Map.Make (String)\n\n  let to_string show ctx =\n    fold (fun k v result -> k ^ \": \" ^ show v ^ \";\\n\" ^ result) ctx \"\"\n\n  let print show ctx = print_endline @@ to_string show ctx\n\n  let typeof item ctx =\n    match find_opt item ctx with\n    | Some (BindFn (_, ty)) -> ty\n    | Some (BindVar ty) -> ty\n    | None -> failwith (Printf.sprintf \"item \\\"%s\\\" is unbound\" item)\n\n  let add_fn (Fn (name, _, _, _) as fn) ty ctx = add name (BindFn (fn, ty)) ctx\n\n  let add_var var ty ctx = add var (BindVar ty) ctx\nend\n\n(*                    *)\n(* Printing utilities *)\n(*                    *)\n\nlet rec string_of_ty t =\n  match t with\n  | TyUnknown -> \"unknown\"\n  | TyNever -> \"never\"\n  | TyPrim TyNat -> \"nat\"\n  | TyPrim TyString -> \"string\"\n  | TyPrim TyBool -> \"bool\"\n  | TyFn (p, r) ->\n      Printf.sprintf \"(%s): %s\"\n        (String.concat \", \" (List.map string_of_ty p))\n        (string_of_ty r)\n  | TyUnion fields ->\n      String.concat \"|\"\n        (TySet.to_seq fields |> List.of_seq |> List.map string_of_ty)\n  | TyNarrowed (e, tyL, tyR) ->\n      Printf.sprintf \"%s[[L:%s, R:%s]]\" (string_of_expr e) (string_of_ty tyL)\n        (string_of_ty tyR)\n  | TyRecord fields ->\n      Printf.sprintf \"{%s}\"\n        (String.concat \", \"\n           (List.map\n              (fun (f, t) -> Printf.sprintf \"%s: %s\" f (string_of_ty t))\n              fields))\n\nand string_of_expr e =\n  match e with\n  | Var n -> n\n  | String s -> Printf.sprintf \"\\\"%s\\\"\" (String.escaped s)\n  | Bool b -> string_of_bool b\n  | Nat n -> string_of_int n\n  | App (n, args) ->\n      Printf.sprintf \"%s(%s)\" (string_of_expr n)\n        (String.concat \", \" (List.map string_of_expr args))\n  | Narrow (e, ty) ->\n      Printf.sprintf \"%s is %s\" (string_of_expr e) (string_of_ty ty)\n  | If (c, t, e) ->\n      Printf.sprintf \"if %s then %s else %s\" (string_of_expr c)\n        (string_of_expr t) (string_of_expr e)\n  | Record fields ->\n      Printf.sprintf \"{%s}\"\n        (String.concat \", \"\n           (List.map\n              (fun (f, e) -> Printf.sprintf \"%s: %s\" f (string_of_expr e))\n              fields))\n  | RecordProj (recv, key) -> Printf.sprintf \"%s.%s\" (string_of_expr recv) key\n  | RecordNarrow (field, rcd) ->\n      Printf.sprintf \"%s in %s\" field (string_of_expr rcd)\n","open Language\nopen Ty\n\nlet fail_not_function_ty e =\n  failwith\n    (Printf.sprintf\n       \"Application of \\\"%s\\\" is unsound as it is not a function type\"\n       (string_of_expr e))\n\nlet fail_param_mismatch e args argTys =\n  failwith\n    (Printf.sprintf\n       \"Application of \\\"%s\\\" with \\\"(%s)\\\" is unsound as the call differs \\\n        from the function signature\"\n       (string_of_expr e)\n       (String.concat \", \"\n          (List.map2\n             (fun p t ->\n               Printf.sprintf \"%s: %s\" (string_of_expr p) (string_of_ty t))\n             args argTys)))\n\nlet fail_mistyped name expected real =\n  failwith\n    (Printf.sprintf\n       \"\\\"%s\\\" is mistyped: typed as \\\"%s\\\", but verified as \\\"%s\\\"\" name\n       (string_of_ty expected) (string_of_ty real))\n\nlet fail_if_narrow_of_non_var e =\n  failwith\n    (Printf.sprintf\n       \"Use of non-variable expression \\\"%s\\\" in conditional expression is not \\\n        permitted\"\n       (string_of_expr e))\n\nlet fail_if_wrong_type t =\n  failwith\n    (Printf.sprintf\n       \"Type of \\\"if\\\" condition must be a bool or narrowing type; found \\\"%s\\\"\"\n       (string_of_ty t))\n\nlet fail_rcd_key_nexist rcd key =\n  failwith\n    (Printf.sprintf \"Key \\\"%s\\\" does not exist on record \\\"%s\\\"\" key\n       (string_of_expr rcd))\n\nlet fail_proj_non_record rcd t =\n  failwith\n    (Printf.sprintf \"Non-record \\\"%s\\\" of type \\\"%s\\\" cannot be projected\"\n       (string_of_expr rcd) (string_of_ty t))\n\nlet fail_rcd_narrow_always is field rcd =\n  failwith\n    (Printf.sprintf\n       \"Record narrowing of %s on %s is redundant, as this is always %s\" field\n       (string_of_expr rcd) (string_of_bool is))\n\n(*                                            *)\n(* Error messages above, below real typecheck *)\n(*                                            *)\n\nlet simplifyUnion tys =\n  match TySet.to_seq tys |> List.of_seq with\n  | [] -> TyNever\n  | [ ty ] -> ty\n  | _ -> TyUnion tys\n\nlet is_record_of_field field ty =\n  match ty with TyRecord fields -> List.mem_assoc field fields | _ -> false\n\nlet rec tyeq t1 t2 =\n  match (t1, t2) with\n  | TyUnknown, TyUnknown | TyNever, TyNever -> true\n  | TyPrim a, TyPrim b -> a = b\n  | TyFn (p1, r1), TyFn (p2, r2) -> List.for_all2 tyeq p1 p2 && tyeq r1 r2\n  | TyUnion f1, TyUnion f2 when TySet.cardinal f1 = TySet.cardinal f2 ->\n      TySet.for_all (fun t1 -> TySet.exists (tyeq t1) f2) f1\n  | TyRecord f1, TyRecord f2 when List.length f1 = List.length f2 ->\n      List.for_all\n        (fun (n1, t1) ->\n          match List.assoc_opt n1 f2 with\n          | Some t2 -> tyeq t1 t2\n          | None -> false)\n        f1\n  | TyNarrowed _, _ | _, TyNarrowed _ ->\n      failwith \"Narrowed types cannot be compared\"\n  | _, _ -> false\n\n(** Returns [true] iff [tyS <: tyT] *)\nlet rec is_subtype ctx tyS tyT =\n  tyeq tyS tyT\n  ||\n  match (tyS, tyT) with\n  | _, TyUnknown -> true\n  | TyNever, _ -> true\n  | TyUnion fieldsS, tyT ->\n      TySet.for_all (fun tyS -> is_subtype ctx tyS tyT) fieldsS\n  | ty, TyUnion fields -> TySet.exists (is_subtype ctx ty) fields\n  | TyRecord fieldsS, TyRecord fieldsT ->\n      List.for_all\n        (fun (name, tyT) ->\n          match List.assoc_opt name fieldsS with\n          | Some tyS -> is_subtype ctx tyS tyT\n          | None -> false)\n        fieldsT\n  | TyFn (pS, rS), TyFn (pT, rT) ->\n      (* Admission of functions is contravariant on parameters and covariant on return types:\n           (nat|string): nat <: (nat): nat|string\n      *)\n      List.length pS = List.length pT\n      && List.for_all2 (fun pS pT -> is_subtype ctx pT pS) pS pT\n      && is_subtype ctx rS rT\n  | _, _ -> false\n\n(** [join ctx ty1 ty2] finds the least upper bound (common supertype) of two types. *)\nlet rec join ctx ty1 ty2 =\n  if is_subtype ctx ty1 ty2 then ty2\n  else if is_subtype ctx ty2 ty1 then ty1\n  else\n    match (ty1, ty2) with\n    | TyFn (p1, r1), TyFn (p2, r2) when List.length p1 = List.length p2 ->\n        (* [(nat|string|bool)->(string|bool)] J [(string|bool)->string] yields [(string|bool)->(string|bool)] *)\n        let joinParams = List.map2 (meet ctx) p1 p2 in\n        let joinRet = join ctx r1 r2 in\n        TyFn (joinParams, joinRet)\n    | TyUnion f1, TyUnion f2 ->\n        (* nat|string ^ string|bool yields nat|string|bool *)\n        let allFields =\n          TySet.union f1\n            (TySet.filter (fun l -> not (TySet.exists (tyeq l) f1)) f2)\n        in\n        simplifyUnion allFields\n    | (TyUnion _ as uTy), singleTy | singleTy, (TyUnion _ as uTy) ->\n        join ctx uTy (TyUnion (TySet.singleton singleTy))\n    | TyRecord f1, TyRecord f2 ->\n        let joinedFields =\n          List.filter_map\n            (fun (n, t1) ->\n              Option.map (fun t2 -> (n, join ctx t1 t2)) (List.assoc_opt n f2))\n            f1\n        in\n        TyRecord joinedFields\n    | singleTy1, singleTy2 -> TyUnion (TySet.of_list [ singleTy1; singleTy2 ])\n\n(** [meet ctx ty1 ty2] finds the greatest lower bound (common subtype) of two types. *)\nand meet ctx ty1 ty2 =\n  if is_subtype ctx ty1 ty2 then ty1\n  else if is_subtype ctx ty2 ty1 then ty2\n  else\n    match (ty1, ty2) with\n    | TyFn (p1, r1), TyFn (p2, r2) when List.length p1 = List.length p2 ->\n        (* [(nat|string|bool)->(string|bool)] ^ [(string|bool)->string] yields [(nat|string|bool)->string] *)\n        let meetParams = List.map2 (join ctx) p1 p2 in\n        let meetRet = meet ctx r1 r2 in\n        TyFn (meetParams, meetRet)\n    | TyUnion f1, TyUnion f2 ->\n        (* nat|string ^ string|bool yields string *)\n        let common = TySet.filter (fun l -> TySet.exists (tyeq l) f2) f1 in\n        simplifyUnion common\n    | (TyUnion _ as uTy), singleTy | singleTy, (TyUnion _ as uTy) ->\n        meet ctx uTy (TyUnion (TySet.singleton singleTy))\n    | TyRecord f1, TyRecord f2 ->\n        let allFields =\n          List.map fst\n          @@ List.append f1\n               (List.filter (fun (n, _) -> not (List.mem_assoc n f1)) f2)\n        in\n        let metFields =\n          List.map\n            (fun n ->\n              match (List.assoc_opt n f1, List.assoc_opt n f2) with\n              | Some t1, Some t2 -> (n, meet ctx t1 t2)\n              | Some t1, None -> (n, t1)\n              | None, Some t2 -> (n, t2)\n              | None, None -> failwith \"metFields: impossible state\")\n            allFields\n        in\n        TyRecord metFields\n    | _, _ -> TyNever\n\n(** [exclude ctx tyB tyE] excludes from [tyB] the type [tyE].\n  TODO: should we distribute over unions rather than operating on them?\n  *)\nlet rec exclude ctx tyB tyE =\n  (* [exclude nat nat|string] should be [never].\n     Similarly for [exclude T unknown], as everything is a subtype of [unknown]. *)\n  if is_subtype ctx tyB tyE then TyNever\n  else\n    match (tyB, tyE) with\n    | TyFn (pB, rB), TyFn (pE, rE) when List.length pB = List.length pE ->\n        (* [(nat|string) -> (string|bool)] - [(nat) -> bool] yields [(string) -> bool] (i think?) *)\n        let excParams = List.map2 (exclude ctx) pB pE in\n        let excRet = exclude ctx rB rE in\n        TyFn (excParams, excRet)\n    | TyUnion fB, TyUnion fE ->\n        (* (nat|string) - string yields nat *)\n        let filtered =\n          TySet.filter (fun l -> not (TySet.exists (tyeq l) fE)) fB\n        in\n        simplifyUnion filtered\n    | (TyUnion _ as uTy), singleTy ->\n        exclude ctx uTy (TyUnion (TySet.singleton singleTy))\n    | singleTy, (TyUnion _ as uTy) ->\n        exclude ctx (TyUnion (TySet.singleton singleTy)) uTy\n    | TyRecord fB, TyRecord fE ->\n        let wittled =\n          List.filter_map\n            (fun (n, tB) ->\n              match List.assoc_opt n fE with\n              | Some tE -> (\n                  match exclude ctx tB tE with\n                  | TyNever -> None\n                  | tWittle -> Some (n, tWittle) )\n              | None -> Some (n, tB))\n            fB\n        in\n        TyRecord wittled\n    | tyB, _ -> tyB\n\n(** [typecheck ctx expr] returns the type of [expr], raising [Failure] if there\n are any type errors. *)\nlet rec typecheck ctx expr =\n  match expr with\n  | Var n when Ctx.mem n ctx -> Ctx.typeof n ctx\n  | Var n -> failwith (\"Unbound variable \\\"\" ^ n ^ \"\\\"\")\n  | String _ -> TyPrim TyString\n  | Nat _ -> TyPrim TyNat\n  | Bool _ -> TyPrim TyBool\n  | App (n, args) -> (\n      match typecheck ctx n with\n      | TyFn (params, ret) ->\n          let argTys = List.map (typecheck ctx) args in\n          if\n            List.length params = List.length argTys\n            && List.for_all2 (is_subtype ctx) argTys params\n          then ret\n          else fail_param_mismatch n args argTys\n      | _ -> fail_not_function_ty n )\n  | Narrow (expr, ty) ->\n      (* Consider the type narrowings\n\n           a: string|nat\n           a is string #-> TyNarrow (a, string, nat)\n\n           b: string\n           b is nat    #-> TyNarrow (b, never, nat)\n\n         When the type is narrowed to the narrowing type, the resulting left\n         (narrowed) type is the meet of the expression type and the narrowing\n         type\n\n           a_L: string|nat ^ string = string\n           b_L: string     ^ nat    = never\n\n         The right (unnarrowed) type is expression type excluding the narrowing type\n\n           a_R: string|nat - string = nat\n           b_R: string     - nat    = string\n      *)\n      let tyExpr = typecheck ctx expr in\n      let tyLeft = meet ctx tyExpr ty in\n      let tyRight = exclude ctx tyExpr ty in\n      TyNarrowed (expr, tyLeft, tyRight)\n  | If (cond, left, right) -> (\n      match typecheck ctx cond with\n      | TyNarrowed (Var n, tyLeft, tyRight) ->\n          let ctxLeft = Ctx.add_var n tyLeft ctx in\n          let tyLeft = typecheck ctxLeft left in\n          let ctxRight = Ctx.add_var n tyRight ctx in\n          let tyRight = typecheck ctxRight right in\n          join ctx tyLeft tyRight\n      | TyNarrowed (e, _, _) -> fail_if_narrow_of_non_var e\n      | TyPrim TyBool ->\n          let tyLeft = typecheck ctx left in\n          let tyRight = typecheck ctx right in\n          join ctx tyLeft tyRight\n      | t -> fail_if_wrong_type t )\n  | Record fields ->\n      let fieldTys = List.map (fun (f, v) -> (f, typecheck ctx v)) fields in\n      TyRecord fieldTys\n  | RecordProj (rcd, field) -> (\n      match typecheck ctx rcd with\n      (* TODO: We can permit projections of types without the field just by\n         typing the projection as [never]. Is this worth it? *)\n      | TyRecord fields -> (\n          match List.assoc_opt field fields with\n          | Some ty -> ty\n          | None -> fail_rcd_key_nexist rcd field )\n      | TyUnion fields as t ->\n          let combinedProjTypes =\n            TySet.map\n              (function\n                | TyRecord rcdFields when List.mem_assoc field rcdFields ->\n                    List.assoc field rcdFields\n                | _ -> fail_proj_non_record rcd t)\n              fields\n          in\n          simplifyUnion combinedProjTypes\n      | t -> fail_proj_non_record rcd t )\n  | RecordNarrow (field, rcd) -> (\n      (* TODO: All of this could be a lot more elegant, come up with formal typing rules. *)\n      (* TODO: should we just distribute over unions instead? *)\n      match typecheck ctx rcd with\n      | TyRecord fields ->\n          fail_rcd_narrow_always (List.mem_assoc field fields) field rcd\n      | TyUnion fields ->\n          let left, right =\n            TySet.partition\n              (fun variantTy ->\n                is_subtype ctx variantTy (TyRecord [ (field, TyUnknown) ]))\n              fields\n          in\n          TyNarrowed (rcd, simplifyUnion left, simplifyUnion right)\n      | ty -> TyNarrowed (rcd, TyNever, ty) )\n\n(** [typecheck_fn ctx fn] returns the type of [fn], raising [Failure] if there\n are any type errors. *)\nlet typecheck_fn ctx (Fn (name, params, retTy, body)) =\n  let ctx = List.fold_left (fun e (p, t) -> Ctx.add_var p t e) ctx params in\n  let bodyTy = typecheck ctx body in\n  let paramTys = List.map snd params in\n  if is_subtype ctx bodyTy retTy then TyFn (paramTys, retTy)\n  else fail_mistyped name (TyFn (paramTys, retTy)) (TyFn (paramTys, bodyTy))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype 'a t = 'a option = None | Some of 'a\n\nlet none = None\nlet some v = Some v\nlet value o ~default = match o with Some v -> v | None -> default\nlet get = function Some v -> v | None -> invalid_arg \"option is None\"\nlet bind o f = match o with None -> None | Some v -> f v\nlet join = function Some o -> o | None -> None\nlet map f o = match o with None -> None | Some v -> Some (f v)\nlet fold ~none ~some = function Some v -> some v | None -> none\nlet iter f = function Some v -> f v | None -> ()\nlet is_none = function None -> true | Some _ -> false\nlet is_some = function None -> false | Some _ -> true\n\nlet equal eq o0 o1 = match o0, o1 with\n| Some v0, Some v1 -> eq v0 v1\n| None, None -> true\n| _ -> false\n\nlet compare cmp o0 o1 = match o0, o1 with\n| Some v0, Some v1 -> cmp v0 v1\n| None, None -> 0\n| None, Some _ -> -1\n| Some _, None -> 1\n\nlet to_result ~none = function None -> Error none | Some v -> Ok v\nlet to_list = function None -> [] | Some v -> [v]\nlet to_seq = function None -> Seq.empty | Some v -> Seq.return v\n","/* Taken from https://github.com/OhadRau/RelevantPromises/blob/master/src/parser.mly */\n\n%{\n  open Language\n  open Ty\n%}\n\n%token <bool>   BOOL\n%token <int>    NAT\n%token <string> STRING\n%token <string> IDENT\n\n%token FN\n%token IF THEN ELSE\n%token IS IN\n%token TYPE_BOOL TYPE_NAT TYPE_STRING\n%token LPAREN RPAREN\n%token LCURLY RCURLY\n%token COMMA\n%token COLON\n%token VBAR\n%token DOT\n\n%token MODE\n%token EOF\n\n%start toplevel\n%type <Language.toplevel> toplevel\n%start program\n%type <Language.program> program\n%%\n\ntoplevel:\n  | COLON MODE IDENT EOF   { Mode $3 }\n  | program                { Program $1 }\n\nprogram:\n  | EOF                          { { fns=[]; expr=None } }\n  | e = Expr; EOF                { { fns=[]; expr=Some e } }\n  | f = Func; prog = program     { { prog with fns=f::prog.fns } }\n;\n\nFunc:\n  | FN; name = IDENT; LPAREN; p = Params; RPAREN COLON; ty = Type; LCURLY; e = Expr; RCURLY\n    { Fn (name, p, ty, e) }\n;\n\nType:\n  | AtomicType  { $1 }\n  | AtomicType VBAR AtomicType UnionSeqType { TyUnion ($4 |> TySet.add $1 |> TySet.add $3) }\n;\n\nAtomicType:\n  | TYPE_NAT              { TyPrim TyNat }\n  | TYPE_STRING           { TyPrim TyString }\n  | TYPE_BOOL             { TyPrim TyBool }\n  | LCURLY RcdType RCURLY { TyRecord($2) }\n  | LPAREN Type RPAREN    { $2 }\n;\n\nUnionSeqType:\n  | { TySet.empty }\n  | VBAR AtomicType UnionSeqType { TySet.add $2 $3 }\n;\n\nRcdType:\n  | { [] }\n  | IDENT COLON Type { [($1, $3)] }\n  | IDENT COLON Type COMMA; rest = RcdType { ($1, $3)::rest }\n;\n\nParams:\n  | { [] }\n  | id = IDENT; COLON; ty = Type { [(id, ty)] }  \n  | id = IDENT; COLON; ty = Type; COMMA; rest = Params { (id, ty)::rest }\n;\n\nAtomicExpr:\n  | IDENT  { Var $1 }\n  | NAT    { Nat $1 }\n  | STRING { String $1 }\n  | BOOL   { Bool $1 }\n  | IDENT LPAREN ArgList RPAREN\n           { App (Var $1, $3) }\n  | LCURLY RcdList RCURLY\n           { Record($2) }\n  | LPAREN Expr RPAREN\n           { $2 }\n  | AtomicExpr DOT IDENT\n           { RecordProj($1, $3) }\n  /* Can only narrow variables; pointless to do so on values directly (why?) */\n  | IDENT IS Type\n           { Narrow((Var $1), $3) }\n  | IDENT IN IDENT\n           { RecordNarrow($1, (Var $3)) }\n;\n\nExpr:\n  | AtomicExpr { $1 }\n  | IF AtomicExpr THEN Expr ELSE Expr { If($2, $4, $6) }\n;\n\nArgList:\n  | { [] }\n  | expr = Expr { [expr] }\n  | expr = Expr; COMMA; rest = ArgList { expr::rest }\n;\n\nRcdList:\n  | { [] }\n  | IDENT COLON Expr { [($1, $3)] }\n  | IDENT COLON Expr COMMA; rest = RcdList { ($1, $3)::rest }\n;\n","(* Taken from https://github.com/OhadRau/RelevantPromises/blob/master/src/lexer.mll *)\n\n{\nopen Lexing\nopen Parser\n\nexception SyntaxError of string\n\nlet next_line lexbuf =\n  let pos = lexbuf.lex_curr_p in\n  lexbuf.lex_curr_p <- { pos with\n    pos_bol = lexbuf.lex_curr_pos;\n    pos_lnum = pos.pos_lnum + 1\n  }\n}\n\nlet whitespace = [' ' '\\t']+\nlet newline = '\\r' | '\\n' | \"\\r\\n\"\n\nlet nat = ['0'-'9']+\n\nlet boolean = \"true\" | \"false\"\n\nlet id = ['a'-'z' 'A'-'Z' '_'] ['a'-'z' 'A'-'Z' '0'-'9' '_' '\\'']*\n\nrule line_comment = parse\n  | newline\n    { next_line lexbuf; read lexbuf }\n  | _\n    { line_comment lexbuf }\n\nand string_literal strbuf = parse\n  | eof\n    { EOF }\n  | \"\\\\\\\"\" as q\n    { Buffer.add_string strbuf q;\n      string_literal strbuf lexbuf }\n  | '\"'\n    { STRING (Buffer.contents strbuf |> Scanf.unescaped) }\n  | '\\n'\n    { new_line lexbuf;\n      Buffer.add_char strbuf '\\n';\n      string_literal strbuf lexbuf }\n  | _ as c\n    { Buffer.add_char strbuf c;\n      string_literal strbuf lexbuf }\n\nand read = parse\n  | whitespace     { read lexbuf }\n  | newline   { next_line lexbuf; read lexbuf }\n\n  | nat as b      { NAT  (int_of_string b) }\n  | '\"'\n    { string_literal (Buffer.create 100) lexbuf }\n  | boolean as b  { BOOL (bool_of_string b) }\n\n  | \"mode\"    { MODE }\n\n  | \"fn\"      { FN }\n  | \"if\"      { IF }\n  | \"then\"    { THEN }\n  | \"else\"    { ELSE }\n\n  (* Type narrowing *)\n  | \"is\"      { IS }\n  | \"in\"      { IN }\n\n  | \"bool\"    { TYPE_BOOL }\n  | \"nat\"     { TYPE_NAT }\n  | \"string\"  { TYPE_STRING }\n\n  | id as id  { IDENT id }\n\n  | '('       { LPAREN }\n  | ')'       { RPAREN }\n  | '{'       { LCURLY }\n  | '}'       { RCURLY }\n  | ','       { COMMA }\n  | ':'       { COLON }\n  | '|'       { VBAR }\n  | '.'       { DOT }\n\n  | \"//\"      { line_comment lexbuf }\n\n  | eof       { EOF }\n\n  | _ as c    { raise (SyntaxError (\"Unexpected char or sequence: \" ^ (String.make 1 c))) }\n","open Language\nopen Ty\nopen Typecheck\n\nexception No_rule_applies\n\n(** [subst bod x y] applies the substitution [x->y]bod\n    Note: presently we do not check for name conflicts.\n    We should use de Bruijn indeces or something here, but I want to keep this\n    simple.\n *)\nlet rec subst bod x y =\n  match bod with\n  | Var n when n = x -> y\n  | (Var _ as e) | (String _ as e) | (Nat _ as e) | (Bool _ as e) -> e\n  | App (fn, args) -> App (subst fn x y, List.map (fun a -> subst a x y) args)\n  | Narrow (e, ty) -> Narrow (subst e x y, ty)\n  | If (cond, left, right) ->\n      If (subst cond x y, subst left x y, subst right x y)\n  | Record fields -> Record (List.map (fun (n, v) -> (n, subst v x y)) fields)\n  | RecordProj (rcd, key) -> RecordProj (subst rcd x y, key)\n  | RecordNarrow (key, rcd) -> RecordNarrow (key, subst rcd x y)\n\nlet is_val t =\n  match t with String _ | Nat _ | Bool _ | Record _ -> true | _ -> false\n\nlet rec small_step ctx t =\n  match t with\n  | Var _ | String _ | Nat _ | Bool _ | Record _ -> raise No_rule_applies\n  | App (Var fn, args) when List.for_all is_val args -> (\n      match Ctx.find_opt fn ctx with\n      | Some (BindFn (Fn (_, params, _, body), _)) ->\n          let body1 = List.fold_left2 subst body (List.map fst params) args in\n          body1\n      | _ -> raise No_rule_applies )\n  | App (fn, args) ->\n      let rec lower_single seq =\n        match seq with\n        | [] -> []\n        | a :: rest when not (is_val a) -> small_step ctx a :: rest\n        | a :: rest -> a :: lower_single rest\n      in\n      App (fn, lower_single args)\n  | Narrow (e, ty) when is_val e ->\n      if tyeq (typecheck ctx e) ty then Bool true else Bool false\n  | Narrow (e, ty) -> Narrow (small_step ctx e, ty)\n  | If (Bool true, left, _) -> left\n  | If (Bool false, _, right) -> right\n  | If (cond, left, right) -> If (small_step ctx cond, left, right)\n  | RecordProj (Record fields, key) -> List.assoc key fields\n  | RecordProj (rcd, key) -> RecordProj (small_step ctx rcd, key)\n  | RecordNarrow (field, Record fields) -> Bool (List.mem_assoc field fields)\n  | RecordNarrow (field, rcd) -> RecordNarrow (field, small_step ctx rcd)\n\nlet rec eval ctx t =\n  try\n    let t' = small_step ctx t in\n    eval ctx t'\n  with No_rule_applies -> t\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\ntype +'a t\n\ntype (-'a, +'b) meth_callback\n\nmodule Unsafe = struct\n  type top\n\n  type any = top t\n\n  type any_js_array = any\n\n  external inject : 'a -> any = \"%identity\"\n\n  external coerce : _ t -> _ t = \"%identity\"\n\n  external get : 'a -> 'b -> 'c = \"caml_js_get\"\n\n  external set : 'a -> 'b -> 'c -> unit = \"caml_js_set\"\n\n  external delete : 'a -> 'b -> unit = \"caml_js_delete\"\n\n  external call : 'a -> 'b -> any array -> 'c = \"caml_js_call\"\n\n  external fun_call : 'a -> any array -> 'b = \"caml_js_fun_call\"\n\n  external meth_call : 'a -> string -> any array -> 'b = \"caml_js_meth_call\"\n\n  external new_obj : 'a -> any array -> 'b = \"caml_js_new\"\n\n  external new_obj_arr : 'a -> any_js_array -> 'b = \"caml_ojs_new_arr\"\n\n  external obj : (string * any) array -> 'a = \"caml_js_object\"\n\n  external equals : 'a -> 'b -> bool = \"caml_js_equals\"\n\n  external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n  external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n  external js_expr : string -> 'a = \"caml_js_expr\"\n\n  external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n  let global = pure_js_expr \"joo_global_object\"\n\n  external callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback = \"%identity\"\n\n  external callback_with_arguments :\n    (any_js_array -> 'b) -> ('c, any_js_array -> 'b) meth_callback\n    = \"caml_js_wrap_callback_arguments\"\n\n  external callback_with_arity : int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback_strict\"\n\n  external meth_callback : ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_unsafe\"\n\n  external meth_callback_with_arity : int -> ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_strict\"\n\n  external meth_callback_with_arguments :\n    ('b -> any_js_array -> 'a) -> ('b, any_js_array -> 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_arguments\"\n\n  (* DEPRECATED *)\n  external variable : string -> 'a = \"caml_js_var\"\nend\n\n(****)\n\ntype 'a opt = 'a\n\ntype 'a optdef = 'a\n\nexternal debugger : unit -> unit = \"debugger\"\n\nlet null : 'a opt = Unsafe.pure_js_expr \"null\"\n\nexternal some : 'a -> 'a opt = \"%identity\"\n\nlet undefined : 'a optdef = Unsafe.pure_js_expr \"undefined\"\n\nexternal def : 'a -> 'a optdef = \"%identity\"\n\nmodule type OPT = sig\n  type 'a t\n\n  val empty : 'a t\n\n  val return : 'a -> 'a t\n\n  val map : 'a t -> ('a -> 'b) -> 'b t\n\n  val bind : 'a t -> ('a -> 'b t) -> 'b t\n\n  val test : 'a t -> bool\n\n  val iter : 'a t -> ('a -> unit) -> unit\n\n  val case : 'a t -> (unit -> 'b) -> ('a -> 'b) -> 'b\n\n  val get : 'a t -> (unit -> 'a) -> 'a\n\n  val option : 'a option -> 'a t\n\n  val to_option : 'a t -> 'a option\nend\n\nmodule Opt : OPT with type 'a t = 'a opt = struct\n  type 'a t = 'a opt\n\n  let empty = null\n\n  let return = some\n\n  let map x f = if Unsafe.equals x null then null else return (f x)\n\n  let bind x f = if Unsafe.equals x null then null else f x\n\n  let test x = not (Unsafe.equals x null)\n\n  let iter x f = if not (Unsafe.equals x null) then f x\n\n  let case x f g = if Unsafe.equals x null then f () else g x\n\n  let get x f = if Unsafe.equals x null then f () else x\n\n  let option x =\n    match x with\n    | None -> empty\n    | Some x -> return x\n\n  let to_option x = case x (fun () -> None) (fun x -> Some x)\nend\n\nmodule Optdef : OPT with type 'a t = 'a optdef = struct\n  type 'a t = 'a optdef\n\n  let empty = undefined\n\n  let return = def\n\n  let map x f = if x == undefined then undefined else return (f x)\n\n  let bind x f = if x == undefined then undefined else f x\n\n  let test x = x != undefined\n\n  let iter x f = if x != undefined then f x\n\n  let case x f g = if x == undefined then f () else g x\n\n  let get x f = if x == undefined then f () else x\n\n  let option x =\n    match x with\n    | None -> empty\n    | Some x -> return x\n\n  let to_option x = case x (fun () -> None) (fun x -> Some x)\nend\n\n(****)\n\nlet coerce x f g = Opt.get (f x) (fun () -> g x)\n\nlet coerce_opt x f g = Opt.get (Opt.bind x f) (fun () -> g x)\n\n(****)\n\ntype +'a meth\n\ntype +'a gen_prop\n\ntype 'a readonly_prop = < get : 'a > gen_prop\n\ntype 'a writeonly_prop = < set : 'a -> unit > gen_prop\n\ntype 'a prop = < get : 'a ; set : 'a -> unit > gen_prop\n\ntype 'a optdef_prop = < get : 'a optdef ; set : 'a -> unit > gen_prop\n\ntype +'a constr\n\n(****)\n\ntype 'a callback = (unit, 'a) meth_callback\n\nexternal wrap_callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n  = \"caml_js_wrap_callback\"\n\nexternal wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback\n  = \"caml_js_wrap_meth_callback\"\n\n(****)\n\nlet _true = Unsafe.pure_js_expr \"true\"\n\nlet _false = Unsafe.pure_js_expr \"false\"\n\ntype match_result_handle\n\ntype string_array\n\nclass type js_string =\n  object\n    method toString : js_string t meth\n\n    method valueOf : js_string t meth\n\n    method charAt : int -> js_string t meth\n\n    method charCodeAt : int -> float meth\n\n    (* This may return NaN... *)\n    method concat : js_string t -> js_string t meth\n\n    method concat_2 : js_string t -> js_string t -> js_string t meth\n\n    method concat_3 : js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method concat_4 :\n      js_string t -> js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method indexOf : js_string t -> int meth\n\n    method indexOf_from : js_string t -> int -> int meth\n\n    method lastIndexOf : js_string t -> int meth\n\n    method lastIndexOf_from : js_string t -> int -> int meth\n\n    method localeCompare : js_string t -> float meth\n\n    method _match : regExp t -> match_result_handle t opt meth\n\n    method replace : regExp t -> js_string t -> js_string t meth\n\n    method replace_string : js_string t -> js_string t -> js_string t meth\n\n    method search : regExp t -> int meth\n\n    method slice : int -> int -> js_string t meth\n\n    method slice_end : int -> js_string t meth\n\n    method split : js_string t -> string_array t meth\n\n    method split_limited : js_string t -> int -> string_array t meth\n\n    method split_regExp : regExp t -> string_array t meth\n\n    method split_regExpLimited : regExp t -> int -> string_array t meth\n\n    method substring : int -> int -> js_string t meth\n\n    method substring_toEnd : int -> js_string t meth\n\n    method toLowerCase : js_string t meth\n\n    method toLocaleLowerCase : js_string t meth\n\n    method toUpperCase : js_string t meth\n\n    method toLocaleUpperCase : js_string t meth\n\n    method trim : js_string t meth\n\n    method length : int readonly_prop\n  end\n\nand regExp =\n  object\n    method exec : js_string t -> match_result_handle t opt meth\n\n    method test : js_string t -> bool t meth\n\n    method toString : js_string t meth\n\n    method source : js_string t readonly_prop\n\n    method global : bool t readonly_prop\n\n    method ignoreCase : bool t readonly_prop\n\n    method multiline : bool t readonly_prop\n\n    method lastIndex : int prop\n  end\n\nclass type string_constr =\n  object\n    method fromCharCode : int -> js_string t meth\n  end\n\nlet string_constr = Unsafe.global##._String\n\nlet regExp = Unsafe.global##._RegExp\n\nlet regExp_copy = regExp\n\nlet regExp_withFlags = regExp\n\nclass type ['a] js_array =\n  object\n    method toString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method concat : 'a js_array t -> 'a js_array t meth\n\n    method join : js_string t -> js_string t meth\n\n    method pop : 'a optdef meth\n\n    method push : 'a -> int meth\n\n    method push_2 : 'a -> 'a -> int meth\n\n    method push_3 : 'a -> 'a -> 'a -> int meth\n\n    method push_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method reverse : 'a js_array t meth\n\n    method shift : 'a optdef meth\n\n    method slice : int -> int -> 'a js_array t meth\n\n    method slice_end : int -> 'a js_array t meth\n\n    method sort : ('a -> 'a -> float) callback -> 'a js_array t meth\n\n    method sort_asStrings : 'a js_array t meth\n\n    method splice : int -> int -> 'a js_array t meth\n\n    method splice_1 : int -> int -> 'a -> 'a js_array t meth\n\n    method splice_2 : int -> int -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_3 : int -> int -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method splice_4 : int -> int -> 'a -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n    method unshift : 'a -> int meth\n\n    method unshift_2 : 'a -> 'a -> int meth\n\n    method unshift_3 : 'a -> 'a -> 'a -> int meth\n\n    method unshift_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n    method some : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method every : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n    method forEach : ('a -> int -> 'a js_array t -> unit) callback -> unit meth\n\n    method map : ('a -> int -> 'a js_array t -> 'b) callback -> 'b js_array t meth\n\n    method filter : ('a -> int -> 'a js_array t -> bool t) callback -> 'a js_array t meth\n\n    method reduce_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduce : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method reduceRight_init :\n      ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n    method reduceRight : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n    method length : int prop\n  end\n\nlet object_constructor = Unsafe.global##._Object\n\nlet object_keys o : js_string t js_array t = object_constructor##keys o\n\nlet array_constructor = Unsafe.global##._Array\n\nlet array_empty = array_constructor\n\nlet array_length = array_constructor\n\nlet array_get : 'a #js_array t -> int -> 'a optdef = Unsafe.get\n\nlet array_set : 'a #js_array t -> int -> 'a -> unit = Unsafe.set\n\nlet array_map_poly :\n    'a #js_array t -> ('a -> int -> 'a #js_array t -> 'b) callback -> 'b #js_array t =\n fun a cb -> (Unsafe.coerce a)##map cb\n\nlet array_map f a = array_map_poly a (wrap_callback (fun x _idx _ -> f x))\n\nlet array_mapi f a = array_map_poly a (wrap_callback (fun x idx _ -> f idx x))\n\nclass type match_result =\n  object\n    inherit [js_string t] js_array\n\n    method index : int readonly_prop\n\n    method input : js_string t readonly_prop\n  end\n\nlet str_array : string_array t -> js_string t js_array t = Unsafe.coerce\n\nlet match_result : match_result_handle t -> match_result t = Unsafe.coerce\n\nclass type number =\n  object\n    method toString : js_string t meth\n\n    method toString_radix : int -> js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toFixed : int -> js_string t meth\n\n    method toExponential : js_string t meth\n\n    method toExponential_digits : int -> js_string t meth\n\n    method toPrecision : int -> js_string t meth\n  end\n\nexternal number_of_float : float -> number t = \"caml_js_from_float\"\n\nexternal float_of_number : number t -> float = \"caml_js_to_float\"\n\nclass type date =\n  object\n    method toString : js_string t meth\n\n    method toDateString : js_string t meth\n\n    method toTimeString : js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toLocaleDateString : js_string t meth\n\n    method toLocaleTimeString : js_string t meth\n\n    method valueOf : float meth\n\n    method getTime : float meth\n\n    method getFullYear : int meth\n\n    method getUTCFullYear : int meth\n\n    method getMonth : int meth\n\n    method getUTCMonth : int meth\n\n    method getDate : int meth\n\n    method getUTCDate : int meth\n\n    method getDay : int meth\n\n    method getUTCDay : int meth\n\n    method getHours : int meth\n\n    method getUTCHours : int meth\n\n    method getMinutes : int meth\n\n    method getUTCMinutes : int meth\n\n    method getSeconds : int meth\n\n    method getUTCSeconds : int meth\n\n    method getMilliseconds : int meth\n\n    method getUTCMilliseconds : int meth\n\n    method getTimezoneOffset : int meth\n\n    method setTime : float -> float meth\n\n    method setFullYear : int -> float meth\n\n    method setUTCFullYear : int -> float meth\n\n    method setMonth : int -> float meth\n\n    method setUTCMonth : int -> float meth\n\n    method setDate : int -> float meth\n\n    method setUTCDate : int -> float meth\n\n    method setDay : int -> float meth\n\n    method setUTCDay : int -> float meth\n\n    method setHours : int -> float meth\n\n    method setUTCHours : int -> float meth\n\n    method setMinutes : int -> float meth\n\n    method setUTCMinutes : int -> float meth\n\n    method setSeconds : int -> float meth\n\n    method setUTCSeconds : int -> float meth\n\n    method setMilliseconds : int -> float meth\n\n    method setUTCMilliseconds : int -> float meth\n\n    method toUTCString : js_string t meth\n\n    method toISOString : js_string t meth\n\n    method toJSON : 'a -> js_string t meth\n  end\n\nclass type date_constr =\n  object\n    method parse : js_string t -> float meth\n\n    method _UTC_month : int -> int -> float meth\n\n    method _UTC_day : int -> int -> float meth\n\n    method _UTC_hour : int -> int -> int -> int -> float meth\n\n    method _UTC_min : int -> int -> int -> int -> int -> float meth\n\n    method _UTC_sec : int -> int -> int -> int -> int -> int -> float meth\n\n    method _UTC_ms : int -> int -> int -> int -> int -> int -> int -> float meth\n\n    method now : float meth\n  end\n\nlet date_constr = Unsafe.global##._Date\n\nlet date : date_constr t = date_constr\n\nlet date_now : date t constr = date_constr\n\nlet date_fromTimeValue : (float -> date t) constr = date_constr\n\nlet date_month : (int -> int -> date t) constr = date_constr\n\nlet date_day : (int -> int -> int -> date t) constr = date_constr\n\nlet date_hour : (int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_min : (int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_sec : (int -> int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_ms : (int -> int -> int -> int -> int -> int -> int -> date t) constr =\n  date_constr\n\nclass type math =\n  object\n    method _E : float readonly_prop\n\n    method _LN2 : float readonly_prop\n\n    method _LN10 : float readonly_prop\n\n    method _LOG2E : float readonly_prop\n\n    method _LOG10E : float readonly_prop\n\n    method _PI : float readonly_prop\n\n    method _SQRT1_2_ : float readonly_prop\n\n    method _SQRT2 : float readonly_prop\n\n    method abs : float -> float meth\n\n    method acos : float -> float meth\n\n    method asin : float -> float meth\n\n    method atan : float -> float meth\n\n    method atan2 : float -> float -> float meth\n\n    method ceil : float -> float meth\n\n    method cos : float -> float meth\n\n    method exp : float -> float meth\n\n    method floor : float -> float meth\n\n    method log : float -> float meth\n\n    method max : float -> float -> float meth\n\n    method max_3 : float -> float -> float -> float meth\n\n    method max_4 : float -> float -> float -> float -> float meth\n\n    method min : float -> float -> float meth\n\n    method min_3 : float -> float -> float -> float meth\n\n    method min_4 : float -> float -> float -> float -> float meth\n\n    method pow : float -> float -> float meth\n\n    method random : float meth\n\n    method round : float -> float meth\n\n    method sin : float -> float meth\n\n    method sqrt : float -> float meth\n\n    method tan : float -> float meth\n  end\n\nlet math = Unsafe.global##._Math\n\nclass type error =\n  object\n    method name : js_string t prop\n\n    method message : js_string t prop\n\n    method stack : js_string t optdef prop\n\n    method toString : js_string t meth\n  end\n\nexception Error of error t\n\nlet error_constr = Unsafe.global##._Error\n\nlet _ = Callback.register_exception \"jsError\" (Error (Unsafe.obj [||]))\n\nlet raise_js_error : error t -> 'a = Unsafe.js_expr \"(function (exn) { throw exn })\"\n\nclass type json =\n  object\n    method parse : js_string t -> 'a meth\n\n    method stringify : 'a -> js_string t meth\n  end\n\nlet _JSON : json t = Unsafe.global##._JSON\n\nlet decodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURI [| Unsafe.inject s |]\n\nlet decodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURIComponent [| Unsafe.inject s |]\n\nlet encodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURI [| Unsafe.inject s |]\n\nlet encodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURIComponent [| Unsafe.inject s |]\n\nlet escape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.escape [| Unsafe.inject s |]\n\nlet unescape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.unescape [| Unsafe.inject s |]\n\nexternal bool : bool -> bool t = \"caml_js_from_bool\"\n\nexternal to_bool : bool t -> bool = \"caml_js_to_bool\"\n\nexternal string : string -> js_string t = \"caml_jsstring_of_string\"\n\nexternal to_string : js_string t -> string = \"caml_string_of_jsstring\"\n\nexternal array : 'a array -> 'a js_array t = \"caml_js_from_array\"\n\nexternal to_array : 'a js_array t -> 'a array = \"caml_js_to_array\"\n\nexternal bytestring : string -> js_string t = \"caml_jsbytes_of_string\"\n\nexternal to_bytestring : js_string t -> string = \"caml_string_of_jsbytes\"\n\nexternal typeof : _ t -> js_string t = \"caml_js_typeof\"\n\nexternal instanceof : _ t -> _ constr -> bool = \"caml_js_instanceof\"\n\nlet isNaN (i : 'a) : bool =\n  to_bool (Unsafe.fun_call Unsafe.global##.isNaN [| Unsafe.inject i |])\n\nlet parseInt (s : js_string t) : int =\n  let s = Unsafe.fun_call Unsafe.global##.parseInt [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseInt\" else s\n\nlet parseFloat (s : js_string t) : float =\n  let s = Unsafe.fun_call Unsafe.global##.parseFloat [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseFloat\" else s\n\nlet _ =\n  Printexc.register_printer (function\n      | Error e -> Some (to_string e##toString)\n      | _ -> None)\n\nlet _ =\n  Printexc.register_printer (fun e ->\n      let e : < .. > t = Obj.magic e in\n      if instanceof e array_constructor then None else Some (to_string e##toString))\n\nlet string_of_error e = to_string e##toString\n\nexternal get_export_var : unit -> < .. > t = \"caml_js_export_var\"\n\nlet export_js (field : js_string t) x = Unsafe.set (get_export_var ()) field x\n\nlet export field x = export_js (string field) x\n\nlet export_all obj =\n  let keys = object_keys obj in\n  keys##forEach\n    (wrap_callback (fun (key : js_string t) _ _ -> export_js key (Unsafe.get obj key)))\n\n(****)\n\n(* DEPRECATED *)\n\ntype float_prop = float prop\n\nexternal float : float -> float = \"%identity\"\n\nexternal to_float : float -> float = \"%identity\"\n",null,"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n"]}