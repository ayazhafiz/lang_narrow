// Generated by js_of_ocaml 3.6.0
(function(joo_global_object)
   {"use strict";
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    var caml_global_data=[0];
    function caml_CamlinternalMod_init_mod(loc,shape)
     {function undef_module(_x)
       {caml_raise_with_arg(caml_global_data.Undefined_recursive_module,loc)}
      function loop(shape,struct,idx)
       {if(typeof shape === "number")
         switch(shape)
          {case 0:struct[idx] = {fun:undef_module};break;
           case 1:struct[idx] = [246,undef_module];break;
           default:struct[idx] = []}
        else
         switch(shape[0])
          {case 0:
            struct[idx] = [0];
            for(var i=1;i < shape[1].length;i++)
             loop(shape[1][i],struct[idx],i);
            break;
           default:struct[idx] = shape[1]}}
      var res=[];
      loop(shape,res,0);
      return res[0]}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_CamlinternalMod_update_mod(shape,real,x)
     {if(typeof shape === "number")
       switch(shape){case 0:case 1:case 2:default:caml_update_dummy(real,x)}
      else
       switch(shape[0])
        {case 0:
          for(var i=1;i < shape[1].length;i++)
           caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);
          break
         }
      return 0}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_bytes_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return caml_utf16_of_utf8(this.c)
        }};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toString()}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = caml_jsbytes_of_string(name);
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
          caml_raise_sys_error
           (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var
       a=new (joo_global_object.Uint8Array)(1),
       buffer=joo_global_object.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try
       {return this.fs.existsSync(this.nm(name))?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.readdir
    =
    function(name)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name))}
      catch(err){caml_raise_sys_error(err.toString())}
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_export_var()
     {return typeof module !== "undefined" && module && module.exports
              ?module.exports
              :joo_global_object}
    function caml_js_wrap_callback(f)
     {return function()
       {var len=arguments.length;
        if(len > 0)
         {var args=new Array(len);
          for(var i=0;i < len;i++)args[i] = arguments[i];
          return caml_call_gen(f,args)}
        else
         return caml_call_gen(f,[undefined])}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_backend_type()
     {return [0,caml_string_of_jsbytes("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     opt=[0,103],
     fmt=[0,[3,0,[10,0]],caml_string_of_jsbytes("%S%!")],
     fmt$0=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Internal failure -- please contact the parser generator's developers.\n"),
        [10,0]],
       caml_string_of_jsbytes
        ("Internal failure -- please contact the parser generator's developers.\n%!")],
     v$0=[0,1],
     v$1=[0,0],
     v$2=[0,2],
     v$3=[0,0,0],
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ('\0\0\xfe\xff\xff\xff\x01\0\x02\0\xfb\xff\xfc\xff\xfd\xff\0\0\xff\xff\xfe\xff\x1e\0\xe5\xff\xe6\xff\0\0\xe8\xff\xe9\xff\xea\xff\xeb\xff\xec\xff\xed\xff\xee\xff\xef\xffu\0\xde\x002\x01\x86\x01\xda\x01.\x02\x82\x02\xd6\x02*\x03\xfc\xff\0\0\xfe\xff\x04\0\0\0~\x03\xd2\x03&\x04z\x04\xce\x04"\x05v\x05\xca\x05\x1e\x06r\x06\xc6\x06\x1a\x07n\x07\xc2\x07\x16\bj\b\xbe\b\x12\tf\t\xba\t\x0e\nb\n\xb6\n\n\x0b^\x0b\xb2\x0b\x06\fZ\f\xae\f\xe7\xff'),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\xff\xff\x02\0\xff\xff\x01\0\0\0\x0f\0\x0f\0\x0f\0\x04\0\x0f\0\b\0\x06\0\x0f\0\x0f\0\x0f\0\x0f\0\x0f\0\x05\0\x0b\0\n\0\x07\0\x0f\0\x0f\0\t\0\x0f\0\x0f\0\f\0\x0f\0\r\0\x0f\0\x0f\0\x0f\0\x0f\0\x0e\0\xff\xff"),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\xff\xff\x05\0\0\0\0\0\0\0\xff\xff\0\0\0\0\f\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0"),
       caml_string_of_jsbytes
        ('\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\x02\0\x02\0\x06\0\x03\0"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\n\0\0\0\x07\0\0\0\0\0$\0"\0\0\0\0\0#\0\0\0\0\0\0\0B\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\0\0\0\0\0\0\0\0$\0\0\0 \0\0\0\0\0\0\0\0\0\0\0\x16\0\x15\0\0\0\0\0\x12\0\0\0\x0f\0\x0e\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\x11\0\0\0\0\0\0\0\0\0\0\0\b\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x1a\0\x17\0\x17\0\x1b\0\x1e\0\x17\0\x17\0\x1c\0\x17\0\x17\0\x17\0\x1d\0\x19\0\x17\0\x17\0\x17\0\x17\0\x18\0\x1f\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x14\0\x10\0\x13\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\t\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0=\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0;\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\x008\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\x005\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\x004\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\x002\0\x17\0\x17\0\x17\0\x17\x003\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0/\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0,\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0+\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0%\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0&\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0)\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\'\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0(\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0*\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0-\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0.\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0(\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\x000\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\x001\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\x006\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\x007\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\x009\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0:\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0<\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0>\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0?\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0@\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0A\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\x17\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0\0\0\x03\0\x04\0\0\0#\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff$\0\xff\xff\b\0\xff\xff\x04\0\xff\xff\xff\xff\x0b\0\x0b\0\xff\xff\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\x0e\0!\0!\0!\0!\0!\0!\0!\0!\0!\0!\0\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\x0b\0\xff\xff\xff\xff\x0b\0\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\x17\0\xff\xff\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x04\0\xff\xff\xff\xff\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\xff\xff\xff\xff\xff\xff\xff\xff\x18\0\xff\xff\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x18\0\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x19\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\xff\xff\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\xff\xff\xff\xff\xff\xff\xff\xff\x1b\0\xff\xff\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1b\0\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\xff\xff\xff\xff\xff\xff\xff\xff\x1c\0\xff\xff\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1c\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\xff\xff\xff\xff\xff\xff\xff\xff\x1d\0\xff\xff\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1d\0\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1e\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\xff\xff\xff\xff\xff\xff\xff\xff\x1f\0\xff\xff\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0\x1f\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0\xff\xff\xff\xff\xff\xff\xff\xff%\0\xff\xff%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0%\0&\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0\xff\xff\xff\xff\xff\xff\xff\xff&\0\xff\xff&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0&\0'\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\xff\xff\xff\xff\xff\xff\xff\xff'\0\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xff(\0\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0)\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0\xff\xff\xff\xff\xff\xff\xff\xff)\0\xff\xff)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0)\0*\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0\xff\xff\xff\xff\xff\xff\xff\xff*\0\xff\xff*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0*\0+\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0\xff\xff\xff\xff\xff\xff\xff\xff+\0\xff\xff+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0+\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0\xff\xff\xff\xff\xff\xff\xff\xff-\0\xff\xff-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0-\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0\xff\xff\xff\xff\xff\xff\xff\xff.\0\xff\xff.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0\xff\xff\xff\xff\xff\xff\xff\xff/\0\xff\xff/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\0\xff\xff\xff\xff\xff\xff\xff\xff0\0\xff\xff0\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff1\0\xff\xff1\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff\xff\xff\xff\xff\xff\xff2\0\xff\xff2\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\0\xff\xff\xff\xff\xff\xff\xff\xff3\0\xff\xff3\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff4\0\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff5\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xff\xff\xff\xff\xff\xff\xff6\0\xff\xff6\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\0\xff\xff\xff\xff\xff\xff\xff\xff7\0\xff\xff7\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\xff\xff\xff\xff\xff\xff\xff\xff8\0\xff\xff8\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff\xff\xff\xff\xff9\0\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0\xff\xff\xff\xff\xff\xff\xff\xff:\0\xff\xff:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0\xff\xff\xff\xff\xff\xff\xff\xff;\0\xff\xff;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0;\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0\xff\xff\xff\xff\xff\xff\xff\xff<\0\xff\xff<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0<\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\xff\xff\xff\xff\xff\xff\xff\xff=\0\xff\xff=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0\xff\xff\xff\xff\xff\xff\xff\xff>\0\xff\xff>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0\xff\xff\xff\xff\xff\xff\xff\xff@\0\xff\xff@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0@\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xffA\0\xff\xffA\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     mainN=[0,-895044912,caml_string_of_jsbytes("main")],
     footer=caml_string_of_jsbytes("}"),
     tagsTy=[0,3257921,[0,-578066109,4198970]],
     ty=[0,-578066109,4198970];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _g_=caml_string_of_jsbytes("input"),
     _d_=caml_string_of_jsbytes("false"),
     _e_=caml_string_of_jsbytes("true"),
     _f_=caml_string_of_jsbytes("bool_of_string"),
     _b_=caml_string_of_jsbytes("true"),
     _c_=caml_string_of_jsbytes("false"),
     _a_=caml_string_of_jsbytes("char_of_int"),
     _h_=caml_string_of_jsbytes("\\\\"),
     _i_=caml_string_of_jsbytes("\\'"),
     _j_=caml_string_of_jsbytes("\\b"),
     _k_=caml_string_of_jsbytes("\\t"),
     _l_=caml_string_of_jsbytes("\\n"),
     _m_=caml_string_of_jsbytes("\\r"),
     _n_=caml_string_of_jsbytes("List.map2"),
     _o_=caml_string_of_jsbytes("List.fold_left2"),
     _p_=caml_string_of_jsbytes("List.for_all2"),
     _s_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _r_=caml_string_of_jsbytes("Bytes.blit"),
     _q_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _v_=caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     _u_=caml_string_of_jsbytes(""),
     _t_=caml_string_of_jsbytes("String.concat"),
     _w_=caml_string_of_jsbytes("Array.fill"),
     _x_=caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     _C_=caml_string_of_jsbytes("Set.remove_min_elt"),
     _D_=[0,0,0,0],
     _E_=[0,0,0],
     _F_=[0,caml_string_of_jsbytes("set.ml"),547,18],
     _y_=caml_string_of_jsbytes("Set.bal"),
     _z_=caml_string_of_jsbytes("Set.bal"),
     _A_=caml_string_of_jsbytes("Set.bal"),
     _B_=caml_string_of_jsbytes("Set.bal"),
     _K_=caml_string_of_jsbytes("Map.remove_min_elt"),
     _L_=[0,0,0,0],
     _M_=[0,caml_string_of_jsbytes("map.ml"),398,10],
     _G_=caml_string_of_jsbytes("Map.bal"),
     _H_=caml_string_of_jsbytes("Map.bal"),
     _I_=caml_string_of_jsbytes("Map.bal"),
     _J_=caml_string_of_jsbytes("Map.bal"),
     _P_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _O_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _N_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _Z_=caml_string_of_jsbytes("%c"),
     ___=caml_string_of_jsbytes("%s"),
     _$_=caml_string_of_jsbytes("%i"),
     _aa_=caml_string_of_jsbytes("%li"),
     _ab_=caml_string_of_jsbytes("%ni"),
     _ac_=caml_string_of_jsbytes("%Li"),
     _ad_=caml_string_of_jsbytes("%f"),
     _ae_=caml_string_of_jsbytes("%B"),
     _af_=caml_string_of_jsbytes("%{"),
     _ag_=caml_string_of_jsbytes("%}"),
     _ah_=caml_string_of_jsbytes("%("),
     _ai_=caml_string_of_jsbytes("%)"),
     _aj_=caml_string_of_jsbytes("%a"),
     _ak_=caml_string_of_jsbytes("%t"),
     _al_=caml_string_of_jsbytes("%?"),
     _am_=caml_string_of_jsbytes("%r"),
     _an_=caml_string_of_jsbytes("%_r"),
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _az_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ar_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _aA_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _as_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _aB_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _at_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _aC_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _au_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _aD_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _av_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ax_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _ay_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aw_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bz_=caml_string_of_jsbytes("%u"),
     _bx_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _by_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bA_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bB_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bC_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bD_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bE_=caml_string_of_jsbytes("@{"),
     _bF_=caml_string_of_jsbytes("@["),
     _bG_=caml_string_of_jsbytes("@{"),
     _bH_=caml_string_of_jsbytes("@["),
     _cy_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _bN_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _bQ_=caml_string_of_jsbytes("0"),
     _bO_=caml_string_of_jsbytes("padding"),
     _bP_=[0,1,0],
     _bR_=[0,0],
     _bS_=caml_string_of_jsbytes("precision"),
     _bT_=[1,0],
     _bU_=[1,1],
     _b4_=caml_string_of_jsbytes("'*'"),
     _b1_=caml_string_of_jsbytes("'-'"),
     _b2_=caml_string_of_jsbytes("'0'"),
     _b3_=caml_string_of_jsbytes("'*'"),
     _bY_=caml_string_of_jsbytes("0"),
     _bZ_=[1,1],
     _b0_=caml_string_of_jsbytes("0"),
     _bV_=caml_string_of_jsbytes("precision"),
     _bW_=[1,1],
     _bX_=caml_string_of_jsbytes("precision"),
     _cd_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _b5_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _b6_=caml_string_of_jsbytes("'+'"),
     _b7_=caml_string_of_jsbytes("'#'"),
     _b8_=caml_string_of_jsbytes("' '"),
     _b9_=[0,0],
     _b__=caml_string_of_jsbytes("`padding'"),
     _b$_=[0,0],
     _ca_=caml_string_of_jsbytes("`precision'"),
     _cb_=caml_string_of_jsbytes("'+'"),
     _cc_=caml_string_of_jsbytes("'_'"),
     _ce_=[0,[12,64,0]],
     _cf_=[0,caml_string_of_jsbytes("@ "),1,0],
     _cg_=[0,caml_string_of_jsbytes("@,"),0,0],
     _ch_=[2,60],
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _cj_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _cl_=caml_string_of_jsbytes("digit"),
     _ck_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _cm_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _cn_=caml_string_of_jsbytes("character ')'"),
     _co_=caml_string_of_jsbytes("character '}'"),
     _cp_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _cu_=caml_string_of_jsbytes("'#'"),
     _cq_=caml_string_of_jsbytes("'+'"),
     _cr_=caml_string_of_jsbytes("'+'"),
     _cs_=caml_string_of_jsbytes("' '"),
     _ct_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _cw_=caml_string_of_jsbytes("'+'"),
     _cv_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _cx_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _bM_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _bL_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _bK_=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     _bJ_=caml_string_of_jsbytes("unexpected end of format"),
     _bI_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _bw_=caml_string_of_jsbytes("nan"),
     _bu_=caml_string_of_jsbytes("neg_infinity"),
     _bv_=caml_string_of_jsbytes("infinity"),
     _bt_=caml_string_of_jsbytes("."),
     _bh_=caml_string_of_jsbytes("%+nd"),
     _bi_=caml_string_of_jsbytes("% nd"),
     _bk_=caml_string_of_jsbytes("%+ni"),
     _bl_=caml_string_of_jsbytes("% ni"),
     _bm_=caml_string_of_jsbytes("%nx"),
     _bn_=caml_string_of_jsbytes("%#nx"),
     _bo_=caml_string_of_jsbytes("%nX"),
     _bp_=caml_string_of_jsbytes("%#nX"),
     _bq_=caml_string_of_jsbytes("%no"),
     _br_=caml_string_of_jsbytes("%#no"),
     _bg_=caml_string_of_jsbytes("%nd"),
     _bj_=caml_string_of_jsbytes("%ni"),
     _bs_=caml_string_of_jsbytes("%nu"),
     _a6_=caml_string_of_jsbytes("%+ld"),
     _a7_=caml_string_of_jsbytes("% ld"),
     _a9_=caml_string_of_jsbytes("%+li"),
     _a__=caml_string_of_jsbytes("% li"),
     _a$_=caml_string_of_jsbytes("%lx"),
     _ba_=caml_string_of_jsbytes("%#lx"),
     _bb_=caml_string_of_jsbytes("%lX"),
     _bc_=caml_string_of_jsbytes("%#lX"),
     _bd_=caml_string_of_jsbytes("%lo"),
     _be_=caml_string_of_jsbytes("%#lo"),
     _a5_=caml_string_of_jsbytes("%ld"),
     _a8_=caml_string_of_jsbytes("%li"),
     _bf_=caml_string_of_jsbytes("%lu"),
     _aT_=caml_string_of_jsbytes("%+Ld"),
     _aU_=caml_string_of_jsbytes("% Ld"),
     _aW_=caml_string_of_jsbytes("%+Li"),
     _aX_=caml_string_of_jsbytes("% Li"),
     _aY_=caml_string_of_jsbytes("%Lx"),
     _aZ_=caml_string_of_jsbytes("%#Lx"),
     _a0_=caml_string_of_jsbytes("%LX"),
     _a1_=caml_string_of_jsbytes("%#LX"),
     _a2_=caml_string_of_jsbytes("%Lo"),
     _a3_=caml_string_of_jsbytes("%#Lo"),
     _aS_=caml_string_of_jsbytes("%Ld"),
     _aV_=caml_string_of_jsbytes("%Li"),
     _a4_=caml_string_of_jsbytes("%Lu"),
     _aG_=caml_string_of_jsbytes("%+d"),
     _aH_=caml_string_of_jsbytes("% d"),
     _aJ_=caml_string_of_jsbytes("%+i"),
     _aK_=caml_string_of_jsbytes("% i"),
     _aL_=caml_string_of_jsbytes("%x"),
     _aM_=caml_string_of_jsbytes("%#x"),
     _aN_=caml_string_of_jsbytes("%X"),
     _aO_=caml_string_of_jsbytes("%#X"),
     _aP_=caml_string_of_jsbytes("%o"),
     _aQ_=caml_string_of_jsbytes("%#o"),
     _aF_=caml_string_of_jsbytes("%d"),
     _aI_=caml_string_of_jsbytes("%i"),
     _aR_=caml_string_of_jsbytes("%u"),
     _R_=caml_string_of_jsbytes("@]"),
     _S_=caml_string_of_jsbytes("@}"),
     _T_=caml_string_of_jsbytes("@?"),
     _U_=caml_string_of_jsbytes("@\n"),
     _V_=caml_string_of_jsbytes("@."),
     _W_=caml_string_of_jsbytes("@@"),
     _X_=caml_string_of_jsbytes("@%"),
     _Y_=caml_string_of_jsbytes("@"),
     _Q_=[0,0,0],
     _aE_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _c7_=[0,91],
     _c6_=[0,123],
     _c8_=caml_string_of_jsbytes("end of input not found"),
     _c9_=caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     _c__=caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     _c$_=caml_string_of_jsbytes("scanf: missing reader"),
     _da_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _db_=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     _dc_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _dd_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _de_=caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     _df_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _di_=caml_string_of_jsbytes('"'),
     _dj_=caml_string_of_jsbytes('"'),
     _dg_=caml_string_of_jsbytes('"'),
     _dh_=caml_string_of_jsbytes(' in format "'),
     _c5_=[0,37,caml_string_of_jsbytes("")],
     _c4_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _c3_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _c0_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _cZ_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _cW_=caml_string_of_jsbytes("an"),
     _cY_=caml_string_of_jsbytes("x"),
     _cX_=caml_string_of_jsbytes("nfinity"),
     _cR_=caml_string_of_jsbytes("digits"),
     _cS_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _cP_=caml_string_of_jsbytes("decimal digits"),
     _cQ_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _cL_=caml_string_of_jsbytes("0b"),
     _cM_=caml_string_of_jsbytes("0o"),
     _cN_=caml_string_of_jsbytes("0u"),
     _cO_=caml_string_of_jsbytes("0x"),
     _cK_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _cH_=caml_string_of_jsbytes("false"),
     _cI_=caml_string_of_jsbytes("true"),
     _cJ_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _cG_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _cF_=caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     _cE_=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     _cD_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _cC_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _cB_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _cz_=caml_string_of_jsbytes("-"),
     _cA_=caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     _cT_=caml_string_of_jsbytes("binary"),
     _cU_=caml_string_of_jsbytes("octal"),
     _cV_=caml_string_of_jsbytes("hexadecimal"),
     _c1_=caml_string_of_jsbytes("a Char"),
     _c2_=caml_string_of_jsbytes("a String"),
     _dw_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]],
       caml_string_of_jsbytes("%s: %s")],
     _do_=caml_string_of_jsbytes("unknown"),
     _dp_=caml_string_of_jsbytes("never"),
     _dq_=caml_string_of_jsbytes("nat"),
     _dr_=caml_string_of_jsbytes("string"),
     _ds_=caml_string_of_jsbytes("bool"),
     _dt_=caml_string_of_jsbytes(", "),
     _du_=
      [0,
       [12,40,[2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("(%s): %s")],
     _dv_=caml_string_of_jsbytes("|"),
     _dx_=caml_string_of_jsbytes(", "),
     _dy_=[0,[12,123,[2,0,[12,125,0]]],caml_string_of_jsbytes("{%s}")],
     _dz_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("[[L:"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(", R:"),
           [2,0,[11,caml_string_of_jsbytes("]]"),0]]]]]],
       caml_string_of_jsbytes("%s[[L:%s, R:%s]]")],
     _dF_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]],
       caml_string_of_jsbytes("%s: %s")],
     _dA_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _dB_=caml_string_of_jsbytes(", "),
     _dC_=[0,[2,0,[12,40,[2,0,[12,41,0]]]],caml_string_of_jsbytes("%s(%s)")],
     _dD_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" is "),[2,0,0]]],
       caml_string_of_jsbytes("%s is %s")],
     _dE_=
      [0,
       [11,
        caml_string_of_jsbytes("if "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" then "),
          [2,0,[11,caml_string_of_jsbytes(" else "),[2,0,0]]]]]],
       caml_string_of_jsbytes("if %s then %s else %s")],
     _dG_=caml_string_of_jsbytes(", "),
     _dH_=[0,[12,123,[2,0,[12,125,0]]],caml_string_of_jsbytes("{%s}")],
     _dI_=[0,[2,0,[12,46,[2,0,0]]],caml_string_of_jsbytes("%s.%s")],
     _dJ_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" in "),[2,0,0]]],
       caml_string_of_jsbytes("%s in %s")],
     _dn_=
      [0,
       [11,
        caml_string_of_jsbytes('item "'),
        [2,0,[11,caml_string_of_jsbytes('" is unbound'),0]]],
       caml_string_of_jsbytes('item "%s" is unbound')],
     _dk_=[0,[0]],
     _dl_=[0,caml_string_of_jsbytes("src/language.ml"),43,2],
     _dm_=[0,[0]],
     _dU_=caml_string_of_jsbytes("Narrowed types cannot be compared"),
     _dV_=caml_string_of_jsbytes('"'),
     _dW_=caml_string_of_jsbytes('Unbound variable "'),
     _dX_=[0,0],
     _dY_=[0,1],
     _dZ_=[0,2],
     _dT_=
      [0,
       [11,
        caml_string_of_jsbytes("Record narrowing of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" on "),
          [2,
           0,
           [11,
            caml_string_of_jsbytes(" is redundant, as this is always "),
            [2,0,0]]]]]],
       caml_string_of_jsbytes
        ("Record narrowing of %s on %s is redundant, as this is always %s")],
     _dS_=
      [0,
       [11,
        caml_string_of_jsbytes('Non-record "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" of type "'),
          [2,0,[11,caml_string_of_jsbytes('" cannot be projected'),0]]]]],
       caml_string_of_jsbytes
        ('Non-record "%s" of type "%s" cannot be projected')],
     _dR_=
      [0,
       [11,
        caml_string_of_jsbytes('Key "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" does not exist on record "'),
          [2,0,[12,34,0]]]]],
       caml_string_of_jsbytes('Key "%s" does not exist on record "%s"')],
     _dQ_=
      [0,
       [11,
        caml_string_of_jsbytes
         ('Type of "if" condition must be a bool or narrowing type; found "'),
        [2,0,[12,34,0]]],
       caml_string_of_jsbytes
        ('Type of "if" condition must be a bool or narrowing type; found "%s"')],
     _dP_=
      [0,
       [11,
        caml_string_of_jsbytes('Use of non-variable expression "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ('" in conditional expression is not permitted'),
          0]]],
       caml_string_of_jsbytes
        ('Use of non-variable expression "%s" in conditional expression is not permitted')],
     _dO_=
      [0,
       [12,
        34,
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" is mistyped: typed as "'),
          [2,
           0,
           [11,caml_string_of_jsbytes('", but verified as "'),[2,0,[12,34,0]]]]]]],
       caml_string_of_jsbytes
        ('"%s" is mistyped: typed as "%s", but verified as "%s"')],
     _dL_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]],
       caml_string_of_jsbytes("%s: %s")],
     _dM_=caml_string_of_jsbytes(", "),
     _dN_=
      [0,
       [11,
        caml_string_of_jsbytes('Application of "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" with "('),
          [2,
           0,
           [11,
            caml_string_of_jsbytes
             (')" is unsound as the call differs from the function signature'),
            0]]]]],
       caml_string_of_jsbytes
        ('Application of "%s" with "(%s)" is unsound as the call differs from the function signature')],
     _dK_=
      [0,
       [11,
        caml_string_of_jsbytes('Application of "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('" is unsound as it is not a function type'),
          0]]],
       caml_string_of_jsbytes
        ('Application of "%s" is unsound as it is not a function type')],
     _d0_=[0,caml_string_of_jsbytes("src/parser.ml"),152,8],
     _d1_=[0,caml_string_of_jsbytes("src/parser.ml"),277,8],
     _d2_=[0,caml_string_of_jsbytes("src/parser.ml"),300,16],
     _d3_=[0,caml_string_of_jsbytes("src/parser.ml"),304,12],
     _d4_=[0,caml_string_of_jsbytes("src/parser.ml"),239,8],
     _d5_=[0,caml_string_of_jsbytes("src/parser.ml"),252,16],
     _d6_=[0,caml_string_of_jsbytes("src/parser.ml"),270,12],
     _d7_=[0,caml_string_of_jsbytes("src/parser.ml"),162,8],
     _d8_=[0,caml_string_of_jsbytes("src/parser.ml"),175,16],
     _d9_=[0,caml_string_of_jsbytes("src/parser.ml"),193,12],
     _d__=[0,caml_string_of_jsbytes("src/parser.ml"),200,8],
     _d$_=[0,caml_string_of_jsbytes("src/parser.ml"),217,12],
     _ea_=[0,caml_string_of_jsbytes("src/parser.ml"),334,8],
     _eb_=[0,caml_string_of_jsbytes("src/parser.ml"),351,12],
     _ec_=[0,caml_string_of_jsbytes("src/parser.ml"),381,8],
     _ed_=[0,caml_string_of_jsbytes("src/parser.ml"),398,12],
     _ee_=[0,caml_string_of_jsbytes("src/parser.ml"),423,8],
     _ef_=[0,caml_string_of_jsbytes("src/parser.ml"),444,12],
     _ej_=[0,caml_string_of_jsbytes("src/parser.ml"),510,8],
     _ek_=[0,caml_string_of_jsbytes("src/parser.ml"),518,12],
     _el_=[0,caml_string_of_jsbytes("src/parser.ml"),497,8],
     _em_=[0,caml_string_of_jsbytes("src/parser.ml"),505,12],
     _eg_=[0,caml_string_of_jsbytes("src/parser.ml"),458,8],
     _eh_=[0,caml_string_of_jsbytes("src/parser.ml"),477,16],
     _ei_=[0,caml_string_of_jsbytes("src/parser.ml"),490,12],
     _en_=[0,caml_string_of_jsbytes("src/parser.ml"),559,12],
     _eo_=[0,caml_string_of_jsbytes("src/parser.ml"),563,8],
     _ep_=[0,caml_string_of_jsbytes("src/parser.ml"),591,8],
     _eq_=[0,caml_string_of_jsbytes("src/parser.ml"),615,20],
     _er_=[0,caml_string_of_jsbytes("src/parser.ml"),619,16],
     _es_=[0,caml_string_of_jsbytes("src/parser.ml"),625,12],
     _et_=[0,caml_string_of_jsbytes("src/parser.ml"),636,4],
     _ew_=[0,caml_string_of_jsbytes("src/parser.ml"),798,8],
     _ex_=[0,caml_string_of_jsbytes("src/parser.ml"),823,12],
     _ey_=[0,caml_string_of_jsbytes("src/parser.ml"),845,16],
     _ez_=[0,caml_string_of_jsbytes("src/parser.ml"),849,12],
     _eA_=[0,caml_string_of_jsbytes("src/parser.ml"),689,8],
     _eB_=[0,caml_string_of_jsbytes("src/parser.ml"),712,16],
     _eC_=[0,caml_string_of_jsbytes("src/parser.ml"),716,12],
     _eG_=[0,caml_string_of_jsbytes("src/parser.ml"),736,8],
     _eH_=[0,caml_string_of_jsbytes("src/parser.ml"),749,16],
     _eI_=[0,caml_string_of_jsbytes("src/parser.ml"),767,12],
     _eJ_=[0,caml_string_of_jsbytes("src/parser.ml"),774,8],
     _eK_=[0,caml_string_of_jsbytes("src/parser.ml"),791,12],
     _eD_=[0,caml_string_of_jsbytes("src/parser.ml"),644,8],
     _eE_=[0,caml_string_of_jsbytes("src/parser.ml"),669,16],
     _eF_=[0,caml_string_of_jsbytes("src/parser.ml"),682,12],
     _eu_=[0,caml_string_of_jsbytes("src/parser.ml"),856,8],
     _ev_=[0,caml_string_of_jsbytes("src/parser.ml"),871,12],
     _eL_=[0,caml_string_of_jsbytes("src/parser.ml"),902,8],
     _eM_=[0,caml_string_of_jsbytes("src/parser.ml"),947,12],
     _eN_=[0,caml_string_of_jsbytes("src/parser.ml"),951,8],
     _eO_=[0,caml_string_of_jsbytes("src/parser.ml"),1019,8],
     _eP_=[0,caml_string_of_jsbytes("src/parser.ml"),1034,8],
     _eQ_=[0,caml_string_of_jsbytes("src/parser.ml"),1073,12],
     _eR_=[0,caml_string_of_jsbytes("src/parser.ml"),1077,8],
     _eU_=[0,caml_string_of_jsbytes("src/parser.ml"),1143,8],
     _eV_=[0,caml_string_of_jsbytes("src/parser.ml"),1168,16],
     _eW_=[0,caml_string_of_jsbytes("src/parser.ml"),1172,12],
     _eS_=[0,caml_string_of_jsbytes("src/parser.ml"),1121,8],
     _eT_=[0,caml_string_of_jsbytes("src/parser.ml"),1136,12],
     _eX_=[0,caml_string_of_jsbytes("src/parser.ml"),1241,8],
     _eY_=[0,caml_string_of_jsbytes("src/parser.ml"),1256,8],
     _eZ_=[0,caml_string_of_jsbytes("src/parser.ml"),1279,8],
     _e1_=[0,caml_string_of_jsbytes("src/parser.ml"),1366,12],
     _e2_=[0,caml_string_of_jsbytes("src/parser.ml"),1341,12],
     _e3_=[0,caml_string_of_jsbytes("src/parser.ml"),1320,12],
     _e0_=[0,caml_string_of_jsbytes("src/parser.ml"),1383,8],
     _e5_=[0,caml_string_of_jsbytes("src/parser.ml"),1411,16],
     _e6_=[0,caml_string_of_jsbytes("src/parser.ml"),1415,12],
     _e4_=[0,caml_string_of_jsbytes("src/parser.ml"),1421,8],
     _e7_=[0,caml_string_of_jsbytes("src/parser.ml"),1619,8],
     _e9_=caml_string_of_jsbytes("Unexpected char or sequence: "),
     _e8_=caml_string_of_jsbytes("Lang_narrow.Lexer.SyntaxError"),
     _e__=caml_string_of_jsbytes("Lang_narrow.Eval.No_rule_applies"),
     _fp_=caml_string_of_jsbytes("tmp"),
     _fq_=[0,0,0],
     _fr_=caml_string_of_jsbytes("record not typed during checking"),
     _fs_=caml_string_of_jsbytes("_tagged_any"),
     _ft_=caml_string_of_jsbytes("char"),
     _fu_=caml_string_of_jsbytes("_tag"),
     _fv_=caml_string_of_jsbytes("int"),
     _fx_=[0,[2,0,[12,42,0]],caml_string_of_jsbytes("%s*")],
     _fy_=
      [0,
       [11,caml_string_of_jsbytes("const "),[2,0,0]],
       caml_string_of_jsbytes("const %s")],
     _fw_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("[]"),0]],
       caml_string_of_jsbytes("%s[]")],
     _fF_=
      [0,
       [12,46,[2,0,[11,caml_string_of_jsbytes(" = "),[2,0,0]]]],
       caml_string_of_jsbytes(".%s = %s")],
     _fz_=caml_string_of_jsbytes(", "),
     _fA_=[0,[12,123,[2,0,[12,125,0]]],caml_string_of_jsbytes("{%s}")],
     _fB_=caml_string_of_jsbytes(", "),
     _fC_=[0,[2,0,[12,40,[2,0,[12,41,0]]]],caml_string_of_jsbytes("%s(%s)")],
     _fD_=caml_string_of_jsbytes("1"),
     _fE_=caml_string_of_jsbytes("0"),
     _fI_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _fG_=caml_string_of_jsbytes(", "),
     _fH_=[0,[12,123,[2,0,[12,125,0]]],caml_string_of_jsbytes("{%s}")],
     _fQ_=
      [0,
       [11,caml_string_of_jsbytes("return "),[2,0,[12,59,0]]],
       caml_string_of_jsbytes("return %s;")],
     _fR_=[0,[2,0,[12,59,0]],caml_string_of_jsbytes("%s;")],
     _fS_=[0,[2,0,[12,59,0]],caml_string_of_jsbytes("%s;")],
     _fT_=[0,caml_string_of_jsbytes("}"),0],
     _fU_=[0,caml_string_of_jsbytes("} else {"),0],
     _fV_=
      [0,
       [11,
        caml_string_of_jsbytes("if ("),
        [2,0,[11,caml_string_of_jsbytes(") {"),0]]],
       caml_string_of_jsbytes("if (%s) {")],
     _fO_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" = "),[2,0,[12,59,0]]]],
       caml_string_of_jsbytes("%s = %s;")],
     _fP_=caml_string_of_jsbytes("\n"),
     _f0_=[0,caml_string_of_jsbytes("result")],
     _f1_=caml_string_of_jsbytes("\n"),
     _fW_=[0,[2,0,[12,59,0]],caml_string_of_jsbytes("%s;")],
     _fX_=caml_string_of_jsbytes(", "),
     _fY_=
      [0,
       [2,0,[12,32,[2,0,[12,40,[2,0,[11,caml_string_of_jsbytes(") {"),0]]]]]],
       caml_string_of_jsbytes("%s %s(%s) {")],
     _fZ_=caml_string_of_jsbytes("\n"),
     _fK_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("[]"),0]],
       caml_string_of_jsbytes("%s[]")],
     _fJ_=[0,[2,0,[12,32,[2,0,0]]],caml_string_of_jsbytes("%s %s")],
     _fL_=
      [0,
       [11,caml_string_of_jsbytes(" = "),[2,0,0]],
       caml_string_of_jsbytes(" = %s")],
     _fN_=caml_string_of_jsbytes(""),
     _fM_=[0,[2,0,[2,0,0]],caml_string_of_jsbytes("%s%s")],
     _fo_=[0,-895044912,caml_string_of_jsbytes("_in")],
     _fm_=caml_string_of_jsbytes("tags"),
     _fn_=[0,-895044912,caml_string_of_jsbytes("_is")],
     _fl_=[0,-895044912,caml_string_of_jsbytes("_print")],
     _fk_=[0,-895044912,caml_string_of_jsbytes("_record_proj")],
     _fj_=[0,-895044912,caml_string_of_jsbytes("_make_record")],
     _fi_=[0,-895044912,caml_string_of_jsbytes("_make_bool")],
     _fh_=[0,-895044912,caml_string_of_jsbytes("_make_string")],
     _fg_=[0,-895044912,caml_string_of_jsbytes("_make_nat")],
     _fc_=[0,[0,-895044912,caml_string_of_jsbytes("_NAT")],0],
     _fd_=[0,[0,-895044912,caml_string_of_jsbytes("_STRING")],0],
     _fe_=[0,[0,-895044912,caml_string_of_jsbytes("_BOOL")],0],
     _fb_=
      [0,
       [11,
        caml_string_of_jsbytes('No runtime type tag for "'),
        [2,0,[12,34,0]]],
       caml_string_of_jsbytes('No runtime type tag for "%s"')],
     _ff_=caml_string_of_jsbytes("v"),
     _fa_=caml_string_of_jsbytes("ty_tag"),
     _e$_=caml_string_of_jsbytes("cannot exit top-level scope"),
     _f2_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _f5_=[0,1],
     _f6_=
      [0,
       [11,
        caml_string_of_jsbytes("Syntax error: "),
        [2,0,[11,caml_string_of_jsbytes(" at "),[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("Syntax error: %s at %s\n")],
     _f7_=
      [0,
       [11,caml_string_of_jsbytes("Parse error at "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Parse error at %s\n")],
     _f8_=caml_string_of_jsbytes("\n"),
     _f4_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" :: "),[2,0,0]]],
       caml_string_of_jsbytes("%s :: %s")],
     _f3_=
      [0,
       [2,0,[12,58,[4,0,0,0,[12,58,[4,0,0,0,0]]]]],
       caml_string_of_jsbytes("%s:%d:%d")];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    var max_int=2147483647;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(_a_)}
    function string_of_bool(b){return b?_b_:_c_}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var ic=caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var oc=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var match=caml_call1(seq$0,0);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    typeof match === "number";
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function fold_left$0(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function map2(f,l1,l2)
     {if(l1)
       {if(l2)
         {var l2$0=l2[2],a2=l2[1],l1$0=l1[2],a1=l1[1],r=caml_call2(f,a1,a2);
          return [0,r,map2(f,l1$0,l2$0)]}}
      else
       if(! l2)return 0;
      return invalid_arg(_n_)}
    function for_all2(p,l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {if(l2$0)
           {var
             l2$1=l2$0[2],
             a2=l2$0[1],
             l1$1=l1$0[2],
             a1=l1$0[1],
             _qy_=caml_call2(p,a1,a2);
            if(_qy_){var l1$0=l1$1,l2$0=l2$1;continue}
            return _qy_}}
        else
         if(! l2$0)return 1;
        return invalid_arg(_p_)}}
    function concat_map(f,param)
     {var acc=0,param$0=param;
      for(;;)
       {if(param$0)
         {var
           l=param$0[2],
           x=param$0[1],
           xs=caml_call1(f,x),
           acc$0=rev_append(xs,acc),
           acc=acc$0,
           param$0=l;
          continue}
        return rev(acc)}}
    function to_seq(l)
     {function aux(l,param)
       {if(l)
         {var tail=l[2],x=l[1];
          return [0,x,function(_qx_){return aux(tail,_qx_)}]}
        return 0}
      return function(_qw_){return aux(l,_qw_)}}
    function of_seq(seq)
     {function direct(depth,seq)
       {if(0 === depth)
         {var _qv_=0;
          return rev(fold_left(function(acc,x){return [0,x,acc]},_qv_,seq))}
        var match=caml_call1(seq,0);
        if(match)
         {var next=match[2],x=match[1];
          return [0,x,direct(depth - 1 | 0,next)]}
        return 0}
      return direct(500,seq)}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_q_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_r_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_s_)}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _qs_=param[1];
            if(param[2])
             {var
               tl=param[2],
               x=(caml_ml_string_length(_qs_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(_t_),
               acc=acc$0,
               param=tl;
              continue}
            var _qu_=caml_ml_string_length(_qs_) + acc | 0}
          else
           var _qu_=acc;
          var dst=caml_create_bytes(_qu_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _qt_=param$0[1];
              if(param$0[2])
               {var tl$0=param$0[2];
                caml_blit_string(_qt_,0,dst,pos,caml_ml_string_length(_qt_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_qt_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_qt_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=tl$0;
                continue}
              caml_blit_string(_qt_,0,dst,pos,caml_ml_string_length(_qt_))}
            return caml_string_of_bytes(dst)}}}
      return _u_}
    function iter$0(f,s)
     {var _qq_=caml_ml_string_length(s) - 1 | 0,_qp_=0;
      if(! (_qq_ < 0))
       {var i=_qp_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _qr_=i + 1 | 0;
          if(_qq_ !== i){var i=_qr_;continue}
          break}}
      return 0}
    function escaped(s$0)
     {var n$0=caml_ml_string_length(s$0),i$1=0;
      for(;;)
       {if(n$0 <= i$1)return s$0;
        var
         match$0=caml_string_unsafe_get(s$0,i$1),
         _qn_=match$0 - 32 | 0,
         switch$0=0;
        if(59 < _qn_ >>> 0)
         {if(33 < (_qn_ - 61 | 0) >>> 0)switch$0 = 1}
        else
         if(2 === _qn_)switch$0 = 1;
        if(switch$0)
         {var
           s$1=caml_bytes_of_string(s$0),
           n=[0,0],
           _qg_=caml_ml_bytes_length(s$1) - 1 | 0,
           _qf_=0;
          if(! (_qg_ < 0))
           {var i$0=_qf_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$1,i$0),switch$1=0;
              if(32 <= match)
               {var _qk_=match - 34 | 0,switch$2=0;
                if(58 < _qk_ >>> 0)
                 {if(93 <= _qk_)switch$2 = 1}
                else
                 if(56 < (_qk_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _ql_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _ql_=4;break;case 1:var _ql_=2;break}
              n[1] = n[1] + _ql_ | 0;
              var _qm_=i$0 + 1 | 0;
              if(_qg_ !== i$0){var i$0=_qm_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$1))
           var _qo_=copy(s$1);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _qi_=caml_ml_bytes_length(s$1) - 1 | 0,_qh_=0;
            if(! (_qi_ < 0))
             {var i=_qh_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$1,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _qj_=i + 1 | 0;
                if(_qi_ !== i){var i=_qj_;continue}
                break}}
            var _qo_=s}
          return caml_string_of_bytes(_qo_)}
        var i$2=i$1 + 1 | 0,i$1=i$2;
        continue}}
    function index_from(s,i$1,c)
     {var lim=caml_ml_string_length(s);
      if(0 <= i$1 && ! (lim < i$1))
       {var i=i$1;
        for(;;)
         {if(lim <= i)throw Not_found;
          if(caml_string_unsafe_get(s,i) === c)return i;
          var i$0=i + 1 | 0,i=i$0;
          continue}}
      return invalid_arg(_v_)}
    var compare=caml_string_compare;
    caml_fresh_oo_id(0);
    function engine(tbl,state,buf)
     {var
       result=caml_lex_engine(tbl,state,buf),
       _qc_=0 <= result?1:0,
       _qd_=_qc_?buf[12] !== dummy_pos?1:0:_qc_;
      if(_qd_)
       {buf[11] = buf[12];
        var _qe_=buf[12];
        buf[12] = [0,_qe_[1],_qe_[2],_qe_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_string(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _p4_=with_positions?zero_pos:dummy_pos,
       _p5_=with_positions?zero_pos:dummy_pos,
       _p6_=[0],
       _p7_=1,
       _p8_=0,
       _p9_=0,
       _p__=0,
       _p$_=0,
       _qa_=0,
       _qb_=caml_ml_string_length(s),
       _p3_=copy(caml_bytes_of_string(s));
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _p3_,
              _qb_,
              _qa_,
              _p$_,
              _p__,
              _p9_,
              _p8_,
              _p7_,
              _p6_,
              _p5_,
              _p4_]}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_char(lexbuf,i){return caml_bytes_get(lexbuf[2],i)}
    caml_fresh_oo_id(0);
    var
     eRR=[248,_x_,caml_fresh_oo_id(0)],
     env=
      [0,
       caml_make_vect(100,0),
       caml_make_vect(100,0),
       caml_make_vect(100,dummy_pos),
       caml_make_vect(100,dummy_pos),
       100,
       0,
       0,
       0,
       dummy_pos,
       dummy_pos,
       0,
       0,
       0,
       0,
       0,
       0];
    function clear_parser(param)
     {var _p1_=env[5],_p2_=env[2],switch$0=0;
      if(0 <= _p1_ && ! ((_p2_.length - 1 - _p1_ | 0) < 0))
       {caml_array_fill(_p2_,0,_p1_,0);switch$0 = 1}
      if(! switch$0)invalid_arg(_w_);
      env[8] = 0;
      return 0}
    function create$1(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_P_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_N_]}
        throw [0,Assert_failure,_O_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_p0_=[0,ndec];else var _p0_=0;
          return [0,[8,_Q_,pad_of_pad_opt(pad_opt$5),_p0_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       y=buf[1] + overhead | 0,
       _pY_=len < y?1:0;
      if(_pY_)
       {var
         x=len * 2 | 0,
         new_len=caml_greaterequal(x,y)?x:y,
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _pZ_=0}
      else
       var _pZ_=_pY_;
      return _pZ_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _R_;
         case 1:return _S_;
         case 2:return _T_;
         case 3:return _U_;
         case 4:return _V_;
         case 5:return _W_;
         default:return _X_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(_Y_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_ab_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_ad_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_ae_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_af_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_ag_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_ah_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ai_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_aj_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_ak_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_al_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_am_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_an_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _pA_=function(param){return 0},
         _pB_=function(param){return 0},
         _pC_=function(param){return 0};
        return [0,function(param){return 0},_pC_,_pB_,_pA_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _pD_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_pD_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _pE_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _pE_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _pF_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _pF_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _pG_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _pG_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _pH_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _pH_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _pI_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _pI_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _pJ_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _pJ_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _pK_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _pK_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _pL_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _pL_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _pM_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _pN_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _pO_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _pO_,
                  _pN_,
                  _pM_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _pP_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _pP_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _pQ_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _pQ_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _pR_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _pR_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _pS_=function(param){caml_call1(de$12,0);return 0},
           _pT_=function(param){caml_call1(ed$12,0);return 0},
           _pU_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _pU_,
                  _pT_,
                  _pS_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _pV_=function(param){caml_call1(de$13,0);return 0},
           _pW_=function(param){caml_call1(ed$13,0);return 0},
           _pX_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _pX_,
                  _pW_,
                  _pV_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_ao_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_ph_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_ph_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_pi_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_pi_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_pj_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_pj_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_pk_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_pk_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_pl_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_pl_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_pm_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_pm_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_pn_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_pn_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_po_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_po_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_pp_=ty1[2],_pq_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_pr_=trans(_pp_,rest2$7);
              return [8,trans(_pq_,ty2),_pr_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_ax_];
          break;
         case 9:
          var switch$10=0,_ps_=ty1[3],_pt_=ty1[2],_pu_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_pt_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_pu_,ty22,trans(_ps_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_ay_];
          break;
         case 10:
          var _pv_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_pv_,rest2$9)]}
          throw [0,Assert_failure,_az_];
         case 11:
          var switch$11=0,_pw_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_pw_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_aA_];
          break;
         case 12:
          var switch$12=0,_px_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_px_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_aB_];
          break;
         case 13:
          var switch$13=0,_py_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_py_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_aC_];
          break;
         default:
          var switch$14=0,_pz_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_pz_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_aD_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ar_];
        case 1:throw [0,Assert_failure,_as_];
        case 2:throw [0,Assert_failure,_at_];
        case 3:throw [0,Assert_failure,_au_];
        case 4:throw [0,Assert_failure,_av_];
        case 5:throw [0,Assert_failure,_ap_];
        case 6:throw [0,Assert_failure,_aq_];
        default:throw [0,Assert_failure,_aw_]}}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _pf_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_pg_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _pg_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_pg_,_pf_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    var Type_mismatch=[248,_aE_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _pe_=match[2];
          if(typeof _pe_ !== "number" && 2 === _pe_[0])
           {var rest=_pe_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_format(fmt,fmtty)
     {var _pd_=type_format_gen(fmt,fmtty);
      if(typeof _pd_[2] === "number"){var fmt$0=_pd_[1];return fmt$0}
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _oY_=match$1[2],
           _oX_=match$1[1];
          if(typeof _oY_ !== "number" && 1 === _oY_[0])
           {var
             fmtty_rest$1=_oY_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_oX_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _o0_=match$3[2],
           _oZ_=match$3[1];
          if(typeof _o0_ !== "number" && 1 === _o0_[0])
           {var
             fmtty_rest$2=_o0_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_oZ_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _o2_=match$5[3],
           _o1_=match$5[1];
          if(typeof _o2_ !== "number" && 2 === _o2_[0])
           {var
             fmtty_rest$3=_o2_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_o1_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _o4_=match$7[3],
           _o3_=match$7[1];
          if(typeof _o4_ !== "number" && 3 === _o4_[0])
           {var
             fmtty_rest$4=_o4_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_o3_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _o6_=match$9[3],
           _o5_=match$9[1];
          if(typeof _o6_ !== "number" && 4 === _o6_[0])
           {var
             fmtty_rest$5=_o6_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_o5_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _o8_=match$11[3],
           _o7_=match$11[1];
          if(typeof _o8_ !== "number" && 5 === _o8_[0])
           {var
             fmtty_rest$6=_o8_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_o7_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _o__=match$13[3],
           _o9_=match$13[1];
          if(typeof _o__ !== "number" && 6 === _o__[0])
           {var
             fmtty_rest$7=_o__[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_o9_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _pa_=match$15[2],
           _o$_=match$15[1];
          if(typeof _pa_ !== "number" && 7 === _pa_[0])
           {var
             fmtty_rest$8=_pa_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_o$_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _pb_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_pb_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _pc_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_pc_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_pc_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _oV_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_oV_))
             throw Type_mismatch;
            var _oW_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_oW_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _oU_=2 === padty$0?48:32,res=make(width$0,_oU_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                if
                 (120
                  ===
                  caml_string_get(str,1)
                  ||
                  88
                  ===
                  caml_string_get(str,1))
                 switch$2 = 1;
                if(switch$2)
                 {var res$1=make(prec$0 + 2 | 0,48);
                  caml_bytes_set(res$1,1,caml_string_get(str,1));
                  blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                  return caml_string_of_bytes(res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit$0(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_oP_=caml_ml_string_length(s) - 1 | 0,_oO_=0;
        if(! (_oP_ < 0))
         {var i$0=_oO_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _oT_=i$0 + 1 | 0;
            if(_oP_ !== i$0){var i$0=_oT_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _oR_=caml_ml_string_length(s) - 1 | 0,
         _oQ_=0;
        if(! (_oR_ < 0))
         {var i=_oQ_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _oS_=i + 1 | 0;
            if(_oR_ !== i){var i=_oS_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _oN_=_aG_;break;
        case 2:var _oN_=_aH_;break;
        case 4:var _oN_=_aJ_;break;
        case 5:var _oN_=_aK_;break;
        case 6:var _oN_=_aL_;break;
        case 7:var _oN_=_aM_;break;
        case 8:var _oN_=_aN_;break;
        case 9:var _oN_=_aO_;break;
        case 10:var _oN_=_aP_;break;
        case 11:var _oN_=_aQ_;break;
        case 0:
        case 13:var _oN_=_aF_;break;
        case 3:
        case 14:var _oN_=_aI_;break;
        default:var _oN_=_aR_}
      return transform_int_alt(iconv,caml_format_int(_oN_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _oM_=_a6_;break;
        case 2:var _oM_=_a7_;break;
        case 4:var _oM_=_a9_;break;
        case 5:var _oM_=_a__;break;
        case 6:var _oM_=_a$_;break;
        case 7:var _oM_=_ba_;break;
        case 8:var _oM_=_bb_;break;
        case 9:var _oM_=_bc_;break;
        case 10:var _oM_=_bd_;break;
        case 11:var _oM_=_be_;break;
        case 0:
        case 13:var _oM_=_a5_;break;
        case 3:
        case 14:var _oM_=_a8_;break;
        default:var _oM_=_bf_}
      return transform_int_alt(iconv,caml_format_int(_oM_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _oL_=_bh_;break;
        case 2:var _oL_=_bi_;break;
        case 4:var _oL_=_bk_;break;
        case 5:var _oL_=_bl_;break;
        case 6:var _oL_=_bm_;break;
        case 7:var _oL_=_bn_;break;
        case 8:var _oL_=_bo_;break;
        case 9:var _oL_=_bp_;break;
        case 10:var _oL_=_bq_;break;
        case 11:var _oL_=_br_;break;
        case 0:
        case 13:var _oL_=_bg_;break;
        case 3:
        case 14:var _oL_=_bj_;break;
        default:var _oL_=_bs_}
      return transform_int_alt(iconv,caml_format_int(_oL_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _oK_=_aT_;break;
        case 2:var _oK_=_aU_;break;
        case 4:var _oK_=_aW_;break;
        case 5:var _oK_=_aX_;break;
        case 6:var _oK_=_aY_;break;
        case 7:var _oK_=_aZ_;break;
        case 8:var _oK_=_a0_;break;
        case 9:var _oK_=_a1_;break;
        case 10:var _oK_=_a2_;break;
        case 11:var _oK_=_a3_;break;
        case 0:
        case 13:var _oK_=_aS_;break;
        case 3:
        case 14:var _oK_=_aV_;break;
        default:var _oK_=_a4_}
      return transform_int_alt(iconv,caml_int64_format(_oK_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_bu_:_bv_:4 <= match?_bw_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i$0=0;
         for(;;)
          {if(i$0 === len)
            var _oI_=0;
           else
            {var
              match=caml_string_get(str,i$0),
              _oH_=match - 46 | 0,
              switch$0=0;
             if(23 < _oH_ >>> 0)
              {if(55 === _oH_)switch$0 = 1}
             else
              if(21 < (_oH_ - 1 | 0) >>> 0)switch$0 = 1;
             if(! switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
             var _oI_=1}
           var _oJ_=_oI_?str:symbol(str,_bt_);
           return caml_special_val(_oJ_)}
        case 6:return hex(0);
        case 7:
         var s$0=hex(0),s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
         if(0 === l)
          var _oG_=s;
         else
          {var r=caml_create_bytes(l),_oD_=l - 1 | 0,_oC_=0;
           if(! (_oD_ < 0))
            {var i=_oC_;
             for(;;)
              {var c=caml_bytes_unsafe_get(s,i),switch$1=0;
               if(97 <= c && ! (122 < c)){var _oE_=c - 32 | 0;switch$1 = 1}
               if(! switch$1)var _oE_=c;
               caml_bytes_unsafe_set(r,i,_oE_);
               var _oF_=i + 1 | 0;
               if(_oD_ !== i){var i=_oF_;continue}
               break}}
           var _oG_=r}
         return caml_string_of_bytes(_oG_);
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _oz_=pad[2],_oA_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_oA_,_oz_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_oA_,_oz_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_oA_,_oz_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _oB_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_oB_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_oB_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_oB_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_h_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_i_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_j_;break;
                  case 9:var str=_k_;break;
                  case 10:var str=_l_;break;
                  case 13:var str=_m_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _ow_=pad$5[2],_ox_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_ox_,_ow_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_ox_,_ow_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_ox_,_ow_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _oy_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_oy_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_oy_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_oy_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,
                      acc$0,
                      concat_fmt(type_format(fmt,erase_rel(symm(fmtty))),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _ou_=fmt$0[1];
           if(0 === _ou_[0])
            {var
              rest$13=fmt$0[2],
              match=_ou_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_ou_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bx_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_by_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bz_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bA_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _ov_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_ov_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_ov_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_ot_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bB_];
         default:throw [0,Assert_failure,_bC_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _os_=[8,acc,_bD_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_os_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_os_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _or_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_or_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_or_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _op_=acc$0[2],_oq_=acc$0[1];
           if(0 === _op_[0])
            {var acc$1=_op_[1];
             output_acc(o,_oq_);
             output_string(o,_bE_);
             var acc$0=acc$1;
             continue}
           var acc$2=_op_[1];
           output_acc(o,_oq_);
           output_string(o,_bF_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _on_=acc$0[2],_oo_=acc$0[1];
           if(0 === _on_[0])
            {var acc$1=_on_[1];
             strput_acc(b,_oo_);
             add_string(b,_bG_);
             var acc$0=acc$1;
             continue}
           var acc$2=_on_[1];
           strput_acc(b,_oo_);
           add_string(b,_bH_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$1(256);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_bI_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,_bJ_)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_bL_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_bM_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _om_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_om_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_ce_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 {var switcher$0=c - 91 | 0;
                  switch(switcher$0)
                   {case 0:
                     var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$4=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$3=match$4[1],
                      match$0=[0,[17,0,fmt_rest$3]]}}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 {var switcher$1=c - 32 | 0;
                  switch(switcher$1)
                   {case 0:
                     var
                      match$6=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$5=match$6[1],
                      match$0=[0,[17,_cf_,fmt_rest$5]];
                     break;
                    case 5:
                     var switch$1=0;
                     if
                      ((str_ind$0 + 1 | 0)
                       <
                       end_ind
                       &&
                       37
                       ===
                       caml_string_get(str,str_ind$0 + 1 | 0))
                      {var
                        match$7=parse(str_ind$0 + 2 | 0,end_ind),
                        fmt_rest$6=match$7[1],
                        match$0=[0,[17,6,fmt_rest$6]];
                       switch$1 = 1}
                     if(! switch$1)
                      var
                       match$8=parse(str_ind$0,end_ind),
                       fmt_rest$7=match$8[1],
                       match$0=[0,[12,64,fmt_rest$7]];
                     break;
                    case 12:
                     var
                      match$9=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$8=match$9[1],
                      match$0=[0,[17,_cg_,fmt_rest$8]];
                     break;
                    case 14:
                     var
                      match$10=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$9=match$10[1],
                      match$0=[0,[17,4,fmt_rest$9]];
                     break;
                    case 27:
                     var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 28:
                     var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                     break;
                    case 31:
                     var
                      match$11=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$10=match$11[1],
                      match$0=[0,[17,2,fmt_rest$10]];
                     break;
                    case 32:
                     var
                      match$12=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$11=match$12[1],
                      match$0=[0,[17,5,fmt_rest$11]];
                     break;
                    default:switch$0 = 1}}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,_bV_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_bW_
                      :incompatible_flag(pct_ind,str_ind,48,_bX_)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,_bY_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_bZ_
                      :incompatible_flag(pct_ind,str_ind,symb,_b0_)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,_b1_);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,_b2_)}
            return incompatible_flag(pct_ind,str_ind,c,_b3_)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _nV_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _nV_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_nV_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _nX_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_nX_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_n3_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _n3_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_n3_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _n4_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _n4_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_n4_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set$1=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set$1,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set$1,char_of_int(i));
                    var _ol_=i + 1 | 0;
                    if(c !== i){var i=_ol_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_ci_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _ok_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_ok_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_ok_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _oi_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_oi_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_oi_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _oj_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_oj_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_oj_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _oh_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_oh_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_oh_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set=caml_string_of_bytes(copy(char_set$1));
            if(reverse)
             {var char_set$0=create_char_set(0),i=0;
              for(;;)
               {caml_bytes_set
                 (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
                var _nv_=i + 1 | 0;
                if(31 !== i){var i=_nv_;continue}
                var char_set$2=caml_string_of_bytes(char_set$0);
                break}}
            else
             var char_set$2=char_set;
            var match$21=parse(next_ind,end_ind),fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$2],
              _n9_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _n9_=[0,[20,get_pad_opt(91),char_set$2,fmt_rest$19]];
            var fmt_result=_n9_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _n__=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _n$_=_n__;
              else
               var
                _n$_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message(str_ind,_bK_);
              var _oa_=_n$_}
            else
             var _oa_=char_format(fmt_rest$21);
            var fmt_result=_oa_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _ob_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_ob_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _oc_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _oc_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_oc_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _od_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _od_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_od_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _nW_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _nW_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_nW_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _oe_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _oe_ >>> 0))
               switch(_oe_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _n2_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _n2_=0;
              if(_n2_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 {var switcher$0=symb - 108 | 0;
                  switch(switcher$0)
                   {case 0:var counter=0;switch$3 = 1;break;
                    case 1:break;
                    default:var counter=1;switch$3 = 1}}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_cp_];
              if(get_ign(0))
               var ignored$5=[11,counter],_n1_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _n1_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_n1_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_cd_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _n5_=get_space(0),
             _n6_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_n6_,_n5_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _n7_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _n8_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_n8_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _n7_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_n7_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,_cw_)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher$1=symb - 101 | 0;
              if(3 < switcher$1 >>> 0)
               switch$4 = 1;
              else
               {switch(switcher$1)
                 {case 0:var _of_=1;break;
                  case 1:var _of_=0;break;
                  case 2:var _of_=3;break;
                  default:var _of_=6}
                var kind=_of_}}
            else
             if(69 <= symb)
              {var switcher$2=symb - 69 | 0,switch$5=0;
               switch(switcher$2)
                {case 0:var _og_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _og_=4;break;
                 default:var _og_=7}
               if(! switch$5)var kind=_og_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_cv_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _nY_=match?incompatible_flag(pct_ind,str_ind,95,_b4_):0;
              else
               var ndec=match[1],_nY_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_nY_],
               _nZ_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _n0_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_n0_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _nZ_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_nZ_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switcher=symb - 108 | 0,switch$8=0;
             switch(switcher)
              {case 0:
                var
                 _nF_=caml_string_get(str,str_ind),
                 _nG_=get_space(0),
                 _nH_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_nH_,_nG_,_nF_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _nI_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _nK_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_nK_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _nI_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _nJ_=_nI_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _nL_=caml_string_get(str,str_ind),
                 _nM_=get_space(0),
                 _nN_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_nN_,_nM_,_nL_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _nO_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _nP_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_nP_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _nO_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _nJ_=_nO_}
             if(! switch$8)var fmt_result=_nJ_}
          else
           if(76 === symb)
            {var
              _nQ_=caml_string_get(str,str_ind),
              _nR_=get_space(0),
              _nS_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_nS_,_nR_,_nQ_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _nT_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _nU_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_nU_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _nT_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_nT_}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_b5_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _nw_=1 - plus_used[1],plus$0=_nw_?plus:_nw_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,_b6_);
          var _nx_=1 - hash_used[1],hash$0=_nx_?hash:_nx_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,_b7_);
          var _ny_=1 - space_used[1],space$0=_ny_?space:_ny_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,_b8_);
          var _nz_=1 - pad_used[1],_nA_=_nz_?caml_notequal([0,pad],_b9_):_nz_;
          if(_nA_)incompatible_flag(pct_ind,str_ind,symb,_b__);
          var
           _nB_=1 - prec_used[1],
           _nC_=_nB_?caml_notequal([0,prec],_b$_):_nB_;
          if(_nC_)
           {var _nD_=ign?95:symb;incompatible_flag(pct_ind,str_ind,_nD_,_ca_)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,_cb_)}
        var _nE_=1 - ign_used[1],ign$0=_nE_?ign:_nE_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,_cc_)}
        return fmt_result}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number" && ! match)return parse_conv(0);
          if(minus)
           {if(typeof match === "number")return parse_conv(_bT_);
            var n=match[1];
            return parse_conv([0,0,n])}
          if(typeof match === "number")return parse_conv(_bU_);
          var n$0=match[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            {var switcher=symb$0 - 42 | 0;
             switch(switcher)
              {case 0:
                return parse_after_precision
                        (pct_ind,
                         str_ind$0 + 1 | 0,
                         end_ind,
                         minus,
                         plus,
                         hash,
                         space,
                         ign,
                         pad,
                         1);
               case 1:
               case 3:
                if(legacy_behavior$0)
                 {var
                   _nu_=str_ind$0 + 1 | 0,
                   minus$0=minus || (45 === symb$0?1:0);
                  return parse_literal(minus$0,_nu_)}
                break
               }}
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _bR_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,_bS_)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _nr_=flag[1],_ns_=_nr_?1 - legacy_behavior$0:_nr_;
          if(_ns_)
           {var _nt_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_bN_),str,str_ind,_nt_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _nm_=space[1],
           _nn_=hash[1],
           _no_=plus[1],
           _np_=minus[1],
           _nq_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _nq_
             ?_np_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,_bQ_)
               :2
             :_np_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _np_,
                       _no_,
                       _nn_,
                       _nm_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _np_,
                     _no_,
                     _nn_,
                     _nm_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,_bO_);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_np_,_no_,_nn_,_nm_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_np_,_no_,_nn_,_nm_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_np_,_no_,_nn_,_nm_,ign,_bP_)}}}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _nk_=[0,[18,formatting$0,fmt_rest$0]];
            return _nk_}
          throw Not_found}
        catch(_nl_)
         {_nl_ = caml_wrap_exception(_nl_);
          if(_nl_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _nl_}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _nd_=str_ind === end_ind?1:0,
           _ne_=_nd_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_ne_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _nf_=[0,s,width,0],
             _ng_=str_ind_3 + 1 | 0,
             formatting_lit$0=_nf_,
             next_ind=_ng_;
           else
            switch$1 = 1;
          else
           {var switcher$0=switcher - 1 | 0;
            if(1 < switcher$0 >>> 0)
             {var
               match$3=parse_integer(str_ind_3,end_ind),
               offset=match$3[2],
               str_ind_4=match$3[1],
               str_ind_5=parse_spaces(str_ind_4,end_ind);
              if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
              var
               s$0=
                sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
               _nh_=[0,s$0,width,offset],
               _ni_=str_ind_5 + 1 | 0,
               formatting_lit$0=_nh_,
               next_ind=_ni_}
            else
             switch$1 = 1}
          if(switch$1)throw Not_found}
        catch(_nj_)
         {_nj_ = caml_wrap_exception(_nj_);
          if(_nj_ !== Not_found && _nj_[1] !== Failure)throw _nj_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _nb_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _nb_=0;
          var _na_=_nb_}
        catch(_nc_)
         {_nc_ = caml_wrap_exception(_nc_);
          if(_nc_ !== Not_found && _nc_[1] !== Failure)throw _nc_;
          var _na_=0}
        if(_na_)
         {var
           match=_na_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_ch_,fmt_rest$0]]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0),switcher=c - 48 | 0;
          if(9 < switcher >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_cj_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0),switcher=c - 48 | 0;
           if(9 < switcher >>> 0)
            return expected_character(str_ind + 1 | 0,_cl_,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_ck_]}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_cm_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 {var switcher=match$0 - 123 | 0;
                  switch(switcher)
                   {case 0:
                     var
                      sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                      str_ind$2=sub_end + 2 | 0,
                      str_ind$0=str_ind$2;
                     continue;
                    case 1:break;
                    default:
                     return expected_character(str_ind$0 + 1 | 0,_cn_,125)}}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,_co_,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_cx_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,_cu_)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,_cq_)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_cr_)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_cs_)}
          throw [0,Assert_failure,_ct_]}}
      return parse(0,caml_ml_string_length(str))}
    function sprintf(fmt$0)
     {var fmt=fmt$0[1];
      function k(acc)
       {var buf=create$1(64);strput_acc(buf,acc);return contents(buf)}
      return make_printf(k,0,fmt)}
    var printers=[0,0];
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_m$_)
       {_m$_ = caml_wrap_exception(_m$_);
        if(_m$_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _m$_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib)
     {var _m__=ib[8];
      _m__[2] = 0;
      _m__[1] = _m__[4];
      _m__[3] = caml_ml_bytes_length(_m__[1]);
      return 0}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      token_buffer[2] = 0;
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$2(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$1(default_token_buffer_size),
              iname]}
    var
     iname=[1,_cz_,ic],
     s=caml_create_bytes(1024),
     i=[0,0],
     lim=[0,0],
     eof=[0,0];
    function next(param)
     {if(i[1] < lim[1]){var c=caml_bytes_get(s,i[1]);i[1]++;return c}
      if(eof[1])throw End_of_file;
      var
       _m9_=
        (caml_ml_bytes_length(s) - 1024 | 0) < 0
         ?invalid_arg(_g_)
         :caml_ml_input(ic,s,0,1024);
      lim[1] = _m9_;
      if(0 === lim[1]){eof[1] = 1;throw End_of_file}
      i[1] = 1;
      return caml_bytes_get(s,0)}
    create$2(iname,next);
    var Scan_failure=[248,_cA_,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_cB_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_cC_),message))}
    function bad_float(param){return bad_input(_cE_)}
    function bad_hex_float(param){return bad_input(_cF_)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_cG_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_m7_=1 - ib[1];
         if(_m7_)
          {var _m8_=c - 9 | 0,switch$0=0;
           if(4 < _m8_ >>> 0)
            {if(23 === _m8_)switch$0 = 1}
           else
            if(1 < (_m8_ - 2 | 0) >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _m7_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,_cH_)
              ?caml_string_notequal(s,_cI_)
                ?bad_input(caml_call1(sprintf(_cJ_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_cK_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=symbol(_cL_,token_string(ib));break;
        case 3:var tok=symbol(_cM_,token_string(ib));break;
        case 4:var tok=symbol(_cN_,token_string(ib));break;
        case 5:var tok=symbol(_cO_,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(_cP_);
      var c=checked_peek_char(ib),switcher=c - 48 | 0;
      if(9 < switcher >>> 0)return bad_input(caml_call1(sprintf(_cQ_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(_cR_);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_cS_),c$0,basis))}
    function is_binary_digit(param)
     {var switcher=param - 48 | 0;return 1 < switcher >>> 0?0:1}
    function scan_binary_int(_m5_,_m6_)
     {return scan_digit_plus(_cT_,is_binary_digit,_m5_,_m6_)}
    function is_octal_digit(param)
     {var switcher=param - 48 | 0;return 7 < switcher >>> 0?0:1}
    function scan_octal_int(_m3_,_m4_)
     {return scan_digit_plus(_cU_,is_octal_digit,_m3_,_m4_)}
    function is_hexa_digit(param)
     {var _m2_=param - 48 | 0,switch$0=0;
      if(22 < _m2_ >>> 0)
       {if(! (5 < (_m2_ - 49 | 0) >>> 0))switch$0 = 1}
      else
       if(6 < (_m2_ - 10 | 0) >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_m0_,_m1_)
     {return scan_digit_plus(_cV_,is_hexa_digit,_m0_,_m1_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_unsigned_decimal_int(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_unsigned_decimal_int(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      var switcher=c - 48 | 0;
      return 9 < switcher >>> 0
              ?width
              :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {var switcher=c - 65 | 0;
        return 25 < switcher >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _mX_=len - 1 | 0,
       _mW_=0;
      if(! (_mX_ < 0))
       {var i=_mW_;
        for(;;)
         {var c=peek_char(ib),_mY_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _mY_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _mZ_=i + 1 | 0;
          if(_mX_ !== i){var i=_mZ_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _mJ_=0 === width?1:0,_mK_=_mJ_ || end_of_input(ib);
      if(_mK_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _mL_=0 === width$0?1:0,
       _mM_=_mL_ || end_of_input(ib);
      if(_mM_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _mN_=0 === width$1?1:0,
             _mO_=_mN_ || end_of_input(ib);
            if(_mO_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,_cW_)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _mR_=0 === width$3?1:0,
           _mS_=_mR_ || end_of_input(ib);
          if(_mS_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,_cY_);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_mT_=match - 46 | 0,switch$1=0;
            if(34 < _mT_ >>> 0)
             {if(66 === _mT_)switch$1 = 1}
            else
             if(32 < (_mT_ - 1 | 0) >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _mU_=0 === width$9?1:0,
                 _mV_=_mU_ || end_of_input(ib);
                if(_mV_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _mP_=0 === width$2?1:0,
         _mQ_=_mP_ || end_of_input(ib);
        if(_mQ_)bad_hex_float(0);
        return check_case_insensitive_string(width$2,ib,bad_hex_float,_cX_)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _mF_=0 === width?1:0,_mG_=_mF_ || end_of_input(ib);
      if(_mG_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _mH_=0 === width$0?1:0,
       _mI_=_mH_ || end_of_input(ib);
      if(_mI_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       {var switcher$0=switcher - 1 | 0;
        if(30 < switcher$0 >>> 0)return scan_exponent_part(width$0,ib)}
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _mr_=0 === width?1:0,_ms_=_mr_ || end_of_input(ib);
      if(_ms_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _mt_=0 === width$0?1:0,
       _mu_=_mt_ || end_of_input(ib);
      if(_mu_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _mv_=0 === width$1?1:0,
           _mw_=_mv_ || end_of_input(ib);
          if(_mw_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _mx_=0 === width$2?1:0,
          _my_=_mx_ || end_of_input(ib);
         if(_my_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _mz_=0 === width$3?1:0,
          _mA_=_mz_ || end_of_input(ib);
         if(_mA_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _mB_=0 === width$4?1:0,
          _mC_=_mB_ || end_of_input(ib);
         if(_mC_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          {var switcher$0=switcher - 1 | 0;
           if(30 < switcher$0 >>> 0)var width$7=width$4;else switch$0 = 1}
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _mD_=0 === width$9?1:0,
            _mE_=_mD_ || end_of_input(ib);
           if(_mE_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _mq_=c - 9 | 0,switch$0=0;
        if(4 < _mq_ >>> 0)
         {if(23 === _mq_)switch$0 = 1}
        else
         if(1 < (_mq_ - 2 | 0) >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_cD_),message)):c}
    function check_next_char_for_char(_mo_,_mp_)
     {return check_next_char(_c1_,_mo_,_mp_)}
    function check_next_char_for_string(_mm_,_mn_)
     {return check_next_char(_c2_,_mm_,_mn_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher$0=c0 - 92 | 0;
          if(! (28 < switcher$0 >>> 0))
           switch(switcher$0)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_ml_=c - 48 | 0,switch$0=0;
                  if(22 < _ml_ >>> 0)
                   {if(! (5 < (_ml_ - 49 | 0) >>> 0))switch$0 = 1}
                  else
                   if(6 < (_ml_ - 10 | 0) >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _mh_=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _mh_ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _mj_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _mj_=bad_input(caml_call2(sprintf(_c0_),c1,c2));
              return store_char(width - 2 | 0,ib,_mj_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib),switcher=c - 48 | 0;
               return 9 < switcher >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _mk_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _mk_=bad_input(caml_call3(sprintf(_cZ_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_mk_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          {var switcher=c0 - 110 | 0;
           switch(switcher)
            {case 0:var _mi_=10;break;
             case 4:var _mi_=13;break;
             case 6:var _mi_=9;break;
             default:switch$3 = 1}}
        else
         if(98 === c0)var _mi_=8;else switch$3 = 1;
        if(switch$3)var _mi_=c0;
        return store_char(width,ib,_mi_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _mf_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_mf_)}
              return caml_trampoline_return(skip_spaces,[0,_mf_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _mg_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_mg_)}
                return caml_trampoline_return(skip_spaces,[0,_mg_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_mc_=0 < i$0?1:0;
          if(_mc_)
           {var _md_=1 - ib[1];
            if(_md_)
             var
              str_ind=c >>> 3 | 0,
              mask=1 << (c & 7),
              _mb_=0 !== (caml_string_get(char_set,str_ind) & mask)?1:0,
              _me_=_mb_?c !== stp?1:0:_mb_;
            else
             var _me_=_md_}
          else
           var _me_=_mc_;
          if(_me_)
           {store_char(max_int,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _me_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _ma_=1 - ib[1];
        if(_ma_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _ma_}
      return scan_chars(width,-1)}
    function ef(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_c4_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_int}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _c5_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_l__=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_l__,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_l__,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _l$_=fmt$0[1];
           if(0 === _l$_[0])
            {var
              rest$0=fmt$0[2],
              match=_l$_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_l$_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(_dc_);
          caml_call3(scan,max_int,max_int,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max_int,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _l9_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(_dd_);
              caml_call3(scan,_l9_,max_int,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_l9_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(_de_)}
        return invalid_arg(_df_)}}
    function make_scanf(ib,fmt$0,readers)
     {var fmt$1=fmt$0;
      for(;;)
       if(typeof fmt$1 === "number")
        return 0;
       else
        switch(fmt$1[0])
         {case 0:
           var rest=fmt$1[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$1[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _lV_=fmt$1[1],_lW_=fmt$1[2];
           if(typeof _lW_ !== "number")
            switch(_lW_[0])
             {case 17:
               var
                rest$2=_lW_[2],
                fmting_lit=_lW_[1],
                match$0=stopper_of_formatting_lit(fmting_lit),
                str=match$0[2],
                stp=match$0[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_lV_,0,scan$0,token_string);
              case 18:
               var _lX_=_lW_[1];
               if(0 === _lX_[0])
                {var
                  rest$3=_lW_[2],
                  match$1=_lX_[1],
                  fmt$2=match$1[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_c6_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$2,rest$3),
                          readers,
                          _lV_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_lW_[2],
                match$2=_lX_[1],
                fmt$3=match$2[1],
                scan$2=
                 function(width,param,ib){return scan_string(_c7_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$3,rest$4),
                        readers,
                        _lV_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$1[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_lV_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$1[2],
            pad=fmt$1[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$1[4],
            prec=fmt$1[3],
            pad$0=fmt$1[2],
            iconv=fmt$1[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$1[4],
            prec$0=fmt$1[3],
            pad$1=fmt$1[2],
            iconv$0=fmt$1[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$1[4],
            prec$1=fmt$1[3],
            pad$2=fmt$1[2],
            iconv$1=fmt$1[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$1[4],
            prec$2=fmt$1[3],
            pad$3=fmt$1[2],
            iconv$2=fmt$1[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$1[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$1[4],prec$4=fmt$1[3],pad$5=fmt$1[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$1[4],prec$5=fmt$1[3],pad$6=fmt$1[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$1[4],prec$3=fmt$1[3],pad$4=fmt$1[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$1[2],
            pad$7=fmt$1[1],
            scan$8=
             function(param,_l8_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_c3_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$1[1];
           if(end_of_input(ib)){var fmt$1=rest$14;continue}
           return bad_input(_c8_);
          case 11:
           var rest$15=fmt$1[2],str$0=fmt$1[1];
           iter$0(function(_l7_){return check_char(ib,_l7_)},str$0);
           var fmt$1=rest$15;
           continue;
          case 12:
           var rest$16=fmt$1[2],chr=fmt$1[1];
           check_char(ib,chr);
           var fmt$1=rest$16;
           continue;
          case 13:
           var rest$17=fmt$1[3],fmtty=fmt$1[2],pad_opt=fmt$1[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var str$1=token_string(ib);
           try
            {var match=fmt_ebb_of_string(0,str$1),fmt=match[1];
             try
              {var _lU_=[0,type_format(fmt,fmtty),str$1],_lY_=_lU_}
             catch(_l6_)
              {_l6_ = caml_wrap_exception(_l6_);
               if(_l6_ !== Type_mismatch)throw _l6_;
               var
                _lT_=string_of_fmtty(fmtty),
                _lY_=caml_call2(failwith_message(_cy_),str$1,_lT_)}
             var fmt$4=_lY_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$4=bad_input(msg)}
           return [0,fmt$4,make_scanf(ib,rest$17,readers)];
          case 14:
           var rest$18=fmt$1[3],fmtty$0=fmt$1[2],pad_opt$0=fmt$1[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s=token_string(ib);
           try
            {var
              match$3=fmt_ebb_of_string(0,s),
              fmt$7=match$3[1],
              match$4=fmt_ebb_of_string(0,s),
              fmt$8=match$4[1],
              fmt$9=type_format(fmt$8,erase_rel(symm(fmtty$0))),
              _l0_=type_format(fmt$7,erase_rel(fmtty$0)),
              fmt$6=fmt$9,
              fmt$5=_l0_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _lZ_=bad_input(msg$0),
              fmt$6=_lZ_[2],
              fmt$5=_lZ_[1]}
           return [0,
                   [0,fmt$5,s],
                   make_scanf(ib,concat_fmt(fmt$6,rest$18),readers)];
          case 15:return invalid_arg(_c9_);
          case 16:return invalid_arg(_c__);
          case 17:
           var
            rest$19=fmt$1[2],
            formatting_lit=fmt$1[1],
            _l1_=string_of_formatting_lit(formatting_lit);
           iter$0(function(_l5_){return check_char(ib,_l5_)},_l1_);
           var fmt$1=rest$19;
           continue;
          case 18:
           var _l2_=fmt$1[1];
           if(0 === _l2_[0])
            {var rest$20=fmt$1[2],match$5=_l2_[1],fmt$10=match$5[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$11=concat_fmt(fmt$10,rest$20),fmt$1=fmt$11;
             continue}
           var rest$21=fmt$1[2],match$6=_l2_[1],fmt$12=match$6[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$13=concat_fmt(fmt$12,rest$21),fmt$1=fmt$13;
           continue;
          case 19:
           var fmt_rest=fmt$1[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(_c$_);
          case 20:
           var _l3_=fmt$1[1],_l4_=fmt$1[3];
           if(typeof _l4_ !== "number" && 17 === _l4_[0])
            {var
              rest$23=_l4_[2],
              fmting_lit$0=_l4_[1],
              char_set$0=fmt$1[2],
              match$7=stopper_of_formatting_lit(fmting_lit$0),
              str$2=match$7[2],
              stp$0=match$7[1],
              width$0=width_of_pad_opt(_l3_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$1=token_string(ib),str_rest$0=[11,str$2,rest$23];
             return [0,s$1,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$1[3],
            char_set=fmt$1[2],
            width=width_of_pad_opt(_l3_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$0=token_string(ib);
           return [0,s$0,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$1[2],
            counter=fmt$1[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$1[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$1[2],
            ign=fmt$1[1],
            match$8=param_format_of_ignored_format(ign,rest$26),
            fmt$14=match$8[1],
            match$9=make_scanf(ib,fmt$14,readers);
           if(match$9){var arg_rest=match$9[2];return arg_rest}
           throw [0,Assert_failure,_da_];
          default:return invalid_arg(_db_)}}
    var
     update_mod=caml_CamlinternalMod_update_mod,
     init_mod=caml_CamlinternalMod_init_mod;
    function height$0(param){if(param){var h=param[5];return h}return 0}
    function create$0(l,x,d,r)
     {var hl=height$0(l),hr=height$0(r),_lS_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,x,d,r,_lS_]}
    function singleton$0(x,d){return [0,0,x,d,0,1]}
    function bal$0(l,x,d,r)
     {if(l)var h=l[5],hl=h;else var hl=0;
      if(r)var h$0=r[5],hr=h$0;else var hr=0;
      if((hr + 2 | 0) < hl)
       {if(l)
         {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_lN_=height$0(lr);
          if(_lN_ <= height$0(ll))
           return create$0(ll,lv,ld,create$0(lr,x,d,r));
          if(lr)
           {var
             lrr=lr[4],
             lrd=lr[3],
             lrv=lr[2],
             lrl=lr[1],
             _lO_=create$0(lrr,x,d,r);
            return create$0(create$0(ll,lv,ld,lrl),lrv,lrd,_lO_)}
          return invalid_arg(_G_)}
        return invalid_arg(_H_)}
      if((hl + 2 | 0) < hr)
       {if(r)
         {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_lP_=height$0(rl);
          if(_lP_ <= height$0(rr))
           return create$0(create$0(l,x,d,rl),rv,rd,rr);
          if(rl)
           {var
             rlr=rl[4],
             rld=rl[3],
             rlv=rl[2],
             rll=rl[1],
             _lQ_=create$0(rlr,rv,rd,rr);
            return create$0(create$0(l,x,d,rll),rlv,rld,_lQ_)}
          return invalid_arg(_I_)}
        return invalid_arg(_J_)}
      var _lR_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,x,d,r,_lR_]}
    var m=0;
    function add$0(x,data,m)
     {if(m)
       {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=compare(x,v);
        if(0 === c)return d === data?m:[0,l,x,data,r,h];
        if(0 <= c){var rr=add$0(x,data,r);return r === rr?m:bal$0(l,v,d,rr)}
        var ll=add$0(x,data,l);
        return l === ll?m:bal$0(ll,v,d,r)}
      return [0,0,x,data,0,1]}
    function find(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           c=compare(x,v);
          if(0 === c)return d;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        throw Not_found}}
    function find_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           c=compare(x,v);
          if(0 === c)return [0,d];
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           v=param$0[2],
           l=param$0[1],
           c=compare(x,v),
           _lM_=0 === c?1:0;
          if(_lM_)return _lM_;
          var param$1=0 <= c?r:l,param$0=param$1;
          continue}
        return 0}}
    function remove_min_binding(param)
     {if(param)
       {var _lL_=param[1];
        if(_lL_)
         {var r=param[4],d=param[3],v=param[2];
          return bal$0(remove_min_binding(_lL_),v,d,r)}
        var r$0=param[4];
        return r$0}
      return invalid_arg(_K_)}
    function map$1(f,param)
     {if(param)
       {var
         h=param[5],
         r=param[4],
         d=param[3],
         v=param[2],
         l=param[1],
         l$0=map$1(f,l),
         d$0=caml_call1(f,d),
         r$0=map$1(f,r);
        return [0,l$0,v,d$0,r$0,h]}
      return 0}
    function for_all$0(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var
           r=param$0[4],
           d=param$0[3],
           v=param$0[2],
           l=param$0[1],
           _lI_=caml_call2(p,v,d);
          if(_lI_)
           {var _lJ_=for_all$0(p,l);
            if(_lJ_){var param$0=r;continue}
            var _lK_=_lJ_}
          else
           var _lK_=_lI_;
          return _lK_}
        return 1}}
    function add_min_binding(k,x,param)
     {if(param)
       {var r=param[4],d=param[3],v=param[2],l=param[1];
        return bal$0(add_min_binding(k,x,l),v,d,r)}
      return singleton$0(k,x)}
    function add_max_binding(k,x,param)
     {if(param)
       {var r=param[4],d=param[3],v=param[2],l=param[1];
        return bal$0(l,v,d,add_max_binding(k,x,r))}
      return singleton$0(k,x)}
    function join$0(l,v,d,r)
     {if(l)
       {if(r)
         {var
           rh=r[5],
           rr=r[4],
           rd=r[3],
           rv=r[2],
           rl=r[1],
           lh=l[5],
           lr=l[4],
           ld=l[3],
           lv=l[2],
           ll=l[1];
          return (rh + 2 | 0) < lh
                  ?bal$0(ll,lv,ld,join$0(lr,v,d,r))
                  :(lh + 2 | 0) < rh
                    ?bal$0(join$0(l,v,d,rl),rv,rd,rr)
                    :create$0(l,v,d,r)}
        return add_max_binding(v,d,l)}
      return add_min_binding(v,d,r)}
    function concat$1(t,param$0)
     {if(t)
       {if(param$0)
         {var param=param$0;
          for(;;)
           {if(param)
             {var _lH_=param[1];
              if(_lH_){var param=_lH_;continue}
              var d=param[3],x=param[2];
              return join$0(t,x,d,remove_min_binding(param$0))}
            throw Not_found}}
        return t}
      return param$0}
    function concat_or_join(t1,v,d,t2)
     {if(d){var d$0=d[1];return join$0(t1,v,d$0,t2)}return concat$1(t1,t2)}
    function split$0(x,param)
     {if(param)
       {var r=param[4],d=param[3],v=param[2],l=param[1],c=compare(x,v);
        if(0 === c)return [0,l,[0,d],r];
        if(0 <= c)
         {var match=split$0(x,r),rr=match[3],pres=match[2],lr=match[1];
          return [0,join$0(l,v,d,lr),pres,rr]}
        var
         match$0=split$0(x,l),
         rl=match$0[3],
         pres$0=match$0[2],
         ll=match$0[1];
        return [0,ll,pres$0,join$0(rl,v,d,r)]}
      return _L_}
    function merge(f,s1,s2)
     {if(s1)
       {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
        if(height$0(s2) <= h1)
         {var
           match=split$0(v1,s2),
           r2=match[3],
           d2=match[2],
           l2=match[1],
           _lD_=merge(f,r1,r2),
           _lE_=caml_call3(f,v1,[0,d1],d2);
          return concat_or_join(merge(f,l1,l2),v1,_lE_,_lD_)}}
      else
       if(! s2)return 0;
      if(s2)
       {var
         r2$0=s2[4],
         d2$0=s2[3],
         v2=s2[2],
         l2$0=s2[1],
         match$0=split$0(v2,s1),
         r1$0=match$0[3],
         d1$0=match$0[2],
         l1$0=match$0[1],
         _lF_=merge(f,r1$0,r2$0),
         _lG_=caml_call3(f,v2,d1$0,[0,d2$0]);
        return concat_or_join(merge(f,l1$0,l2$0),v2,_lG_,_lF_)}
      throw [0,Assert_failure,_M_]}
    function union$0(f,s1,s2)
     {if(s1)
       {if(s2)
         {var
           h2=s2[5],
           r2=s2[4],
           d2=s2[3],
           v2=s2[2],
           l2=s2[1],
           h1=s1[5],
           r1=s1[4],
           d1=s1[3],
           v1=s1[2],
           l1=s1[1];
          if(h2 <= h1)
           {var
             match=split$0(v1,s2),
             r2$0=match[3],
             d2$0=match[2],
             l2$0=match[1],
             l=union$0(f,l1,l2$0),
             r=union$0(f,r1,r2$0);
            if(d2$0)
             {var d2$1=d2$0[1];
              return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
            return join$0(l,v1,d1,r)}
          var
           match$0=split$0(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           l$0=union$0(f,l1$0,l2),
           r$0=union$0(f,r1$0,r2);
          if(d1$0)
           {var d1$1=d1$0[1];
            return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
          return join$0(l$0,v2,d2,r$0)}
        var s=s1}
      else
       var s=s2;
      return s}
    function filter$0(p,m)
     {if(m)
       {var
         r=m[4],
         d=m[3],
         v=m[2],
         l=m[1],
         l$0=filter$0(p,l),
         pvd=caml_call2(p,v,d),
         r$0=filter$0(p,r);
        if(pvd){if(l === l$0 && r === r$0)return m;return join$0(l$0,v,d,r$0)}
        return concat$1(l$0,r$0)}
      return 0}
    function cons_enum$0(m,e)
     {var m$0=m,e$0=e;
      for(;;)
       {if(m$0)
         {var
           r=m$0[4],
           d=m$0[3],
           v=m$0[2],
           m$1=m$0[1],
           e$1=[0,v,d,r,e$0],
           m$0=m$1,
           e$0=e$1;
          continue}
        return e$0}}
    function cardinal$0(param)
     {if(param)
       {var r=param[4],l=param[1],_lC_=cardinal$0(r);
        return (cardinal$0(l) + 1 | 0) + _lC_ | 0}
      return 0}
    function of_seq$0(i)
     {return fold_left
              (function(m,param)
                {var v=param[2],k=param[1];return add$0(k,v,m)},
               m,
               i)}
    function seq_of_enum$0(c,param)
     {if(c)
       {var rest=c[4],t=c[3],v=c[2],k=c[1],_lA_=cons_enum$0(t,rest);
        return [0,[0,k,v],function(_lB_){return seq_of_enum$0(_lA_,_lB_)}]}
      return 0}
    function to_seq$1(m)
     {var _ly_=cons_enum$0(m,0);
      return function(_lz_){return seq_of_enum$0(_ly_,_lz_)}}
    var Ty=caml_call2(init_mod,_dl_,_dk_);
    function height(param){if(param){var h=param[4];return h}return 0}
    function create(l,v,r)
     {if(l)var h=l[4],hl=h;else var hl=0;
      if(r)var h$0=r[4],hr=h$0;else var hr=0;
      var _lx_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,v,r,_lx_]}
    function bal(l,v,r)
     {if(l)var h=l[4],hl=h;else var hl=0;
      if(r)var h$0=r[4],hr=h$0;else var hr=0;
      if((hr + 2 | 0) < hl)
       {if(l)
         {var lr=l[3],lv=l[2],ll=l[1],_ls_=height(lr);
          if(_ls_ <= height(ll))return create(ll,lv,create(lr,v,r));
          if(lr)
           {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_lt_=create(lrr,v,r);
            return create(create(ll,lv,lrl),lrv,_lt_)}
          return invalid_arg(_y_)}
        return invalid_arg(_z_)}
      if((hl + 2 | 0) < hr)
       {if(r)
         {var rr=r[3],rv=r[2],rl=r[1],_lu_=height(rl);
          if(_lu_ <= height(rr))return create(create(l,v,rl),rv,rr);
          if(rl)
           {var rlr=rl[3],rlv=rl[2],rll=rl[1],_lv_=create(rlr,rv,rr);
            return create(create(l,v,rll),rlv,_lv_)}
          return invalid_arg(_A_)}
        return invalid_arg(_B_)}
      var _lw_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
      return [0,l,v,r,_lw_]}
    function add(x,t)
     {if(t)
       {var r=t[3],v=t[2],l=t[1],c=caml_compare(x,v);
        if(0 === c)return t;
        if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
        var ll=add(x,l);
        return l === ll?t:bal(ll,v,r)}
      return [0,0,x,0,1]}
    function singleton(x){return [0,0,x,0,1]}
    function add_min_element(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1];
        return bal(add_min_element(x,l),v,r)}
      return singleton(x)}
    function add_max_element(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1];
        return bal(l,v,add_max_element(x,r))}
      return singleton(x)}
    function join(l,v,r)
     {if(l)
       {if(r)
         {var rh=r[4],rr=r[3],rv=r[2],rl=r[1],lh=l[4],lr=l[3],lv=l[2],ll=l[1];
          return (rh + 2 | 0) < lh
                  ?bal(ll,lv,join(lr,v,r))
                  :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
        return add_max_element(v,l)}
      return add_min_element(v,r)}
    function min_elt(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var _lr_=param$0[1];
          if(_lr_){var param$0=_lr_;continue}
          var v=param$0[2];
          return v}
        throw Not_found}}
    function remove_min_elt(param)
     {if(param)
       {var _lq_=param[1];
        if(_lq_)
         {var r=param[3],v=param[2];return bal(remove_min_elt(_lq_),v,r)}
        var r$0=param[3];
        return r$0}
      return invalid_arg(_C_)}
    function concat$0(t,match)
     {if(t)
       {if(match)
         {var _lp_=remove_min_elt(match);return join(t,min_elt(match),_lp_)}
        return t}
      return match}
    function split(x,param)
     {if(param)
       {var r=param[3],v=param[2],l=param[1],c=caml_compare(x,v);
        if(0 === c)return [0,l,1,r];
        if(0 <= c)
         {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
          return [0,join(l,v,lr),pres,rr]}
        var match$0=split(x,l),rl=match$0[3],pres$0=match$0[2],ll=match$0[1];
        return [0,ll,pres$0,join(rl,v,r)]}
      return _D_}
    var v=0;
    function union(t1,match)
     {if(t1)
       {if(match)
         {var
           h2=match[4],
           r2=match[3],
           v2=match[2],
           l2=match[1],
           h1=t1[4],
           r1=t1[3],
           v1=t1[2],
           l1=t1[1];
          if(h2 <= h1)
           {if(1 === h2)return add(v2,t1);
            var
             match$0=split(v1,match),
             r2$0=match$0[3],
             l2$0=match$0[1],
             _ln_=union(r1,r2$0);
            return join(union(l1,l2$0),v1,_ln_)}
          if(1 === h1)return add(v1,match);
          var
           match$1=split(v2,t1),
           r1$0=match$1[3],
           l1$0=match$1[1],
           _lo_=union(r1$0,r2);
          return join(union(l1$0,l2),v2,_lo_)}
        return t1}
      return match}
    function cons_enum(s,e)
     {var s$0=s,e$0=e;
      for(;;)
       {if(s$0)
         {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
          continue}
        return e$0}}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],_lk_=caml_call1(p,v);
          if(_lk_)
           {var _ll_=for_all(p,l);
            if(_ll_){var param$0=r;continue}
            var _lm_=_ll_}
          else
           var _lm_=_lk_;
          return _lm_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var r=param$0[3],v=param$0[2],l=param$0[1],_lh_=caml_call1(p,v);
          if(_lh_)
           var _li_=_lh_;
          else
           {var _lj_=exists(p,l);
            if(! _lj_){var param$0=r;continue}
            var _li_=_lj_}
          return _li_}
        return 0}}
    function filter(p,t)
     {if(t)
       {var
         r=t[3],
         v=t[2],
         l=t[1],
         l$0=filter(p,l),
         pv=caml_call1(p,v),
         r$0=filter(p,r);
        if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
        return concat$0(l$0,r$0)}
      return 0}
    function partition(p,param)
     {if(param)
       {var
         r=param[3],
         v=param[2],
         l=param[1],
         match=partition(p,l),
         lf=match[2],
         lt=match[1],
         pv=caml_call1(p,v),
         match$0=partition(p,r),
         rf=match$0[2],
         rt=match$0[1];
        if(pv){var _lf_=concat$0(lf,rf);return [0,join(lt,v,rt),_lf_]}
        var _lg_=join(lf,v,rf);
        return [0,concat$0(lt,rt),_lg_]}
      return _E_}
    function cardinal(param)
     {if(param)
       {var r=param[3],l=param[1],_le_=cardinal(r);
        return (cardinal(l) + 1 | 0) + _le_ | 0}
      return 0}
    function map$0(f,t)
     {if(t)
       {var
         r=t[3],
         v$0=t[2],
         l=t[1],
         l$0=map$0(f,l),
         v$1=caml_call1(f,v$0),
         r$0=map$0(f,r);
        if(l === l$0 && v$0 === v$1 && r === r$0)return t;
        var switch$0=0;
        if(0 !== l$0)
         {var param=l$0;
          for(;;)
           {if(! param)throw Not_found;
            if(param[3]){var param$0=param[3],param=param$0;continue}
            var v=param[2];
            if(0 <= caml_compare(v,v$1))switch$0 = 1;
            break}}
        if(! switch$0)
         {var switch$1=0;
          if(0 !== r$0 && 0 <= caml_compare(v$1,min_elt(r$0)))switch$1 = 1;
          if(! switch$1)return join(l$0,v$1,r$0)}
        return union(l$0,add(v$1,r$0))}
      return 0}
    function seq_of_enum(c,param)
     {if(c)
       {var rest=c[3],t=c[2],x=c[1],_lc_=cons_enum(t,rest);
        return [0,x,function(_ld_){return seq_of_enum(_lc_,_ld_)}]}
      return 0}
    function to_seq$0(c)
     {var _la_=cons_enum(c,0);
      return function(_lb_){return seq_of_enum(_la_,_lb_)}}
    caml_call3(update_mod,_dm_,Ty,Ty);
    function add_var(var$0,ty,ctx){return add$0(var$0,[1,ty],ctx)}
    function string_of_ty(t)
     {if(typeof t === "number")
       return 0 === t?_do_:_dp_;
      else
       switch(t[0])
        {case 0:
          switch(t[1])
           {case 0:return _dq_;case 1:return _dr_;default:return _ds_}
         case 1:
          var
           r=t[2],
           p=t[1],
           _k4_=string_of_ty(r),
           _k5_=concat(_dt_,map(string_of_ty,p));
          return caml_call2(sprintf(_du_),_k5_,_k4_);
         case 2:
          var fields=t[1];
          return concat(_dv_,map(string_of_ty,of_seq(to_seq$0(fields))));
         case 3:
          var
           fields$0=t[1],
           _k6_=of_seq(to_seq$1(fields$0)),
           _k7_=
            concat
             (_dx_,
              map
               (function(param)
                 {var t=param[2],f=param[1],_k$_=string_of_ty(t);
                  return caml_call2(sprintf(_dw_),f,_k$_)},
                _k6_));
          return caml_call1(sprintf(_dy_),_k7_);
         default:
          var
           tyR=t[3],
           tyL=t[2],
           e=t[1],
           _k8_=string_of_ty(tyR),
           _k9_=string_of_ty(tyL),
           _k__=string_of_expr(e);
          return caml_call3(sprintf(_dz_),_k__,_k9_,_k8_)}}
    function string_of_expr(e)
     {switch(e[0])
       {case 0:var n=e[1];return n;
        case 1:var n$0=e[1];return caml_string_of_jsbytes("" + n$0);
        case 2:
         var s=e[1],_kR_=escaped(s);return caml_call1(sprintf(_dA_),_kR_);
        case 3:var b=e[1];return string_of_bool(b);
        case 4:
         var
          args=e[2],
          n$1=e[1],
          _kS_=concat(_dB_,map(string_of_expr,args)),
          _kT_=string_of_expr(n$1);
         return caml_call2(sprintf(_dC_),_kT_,_kS_);
        case 5:
         var ty=e[2],e$0=e[1],_kU_=string_of_ty(ty),_kV_=string_of_expr(e$0);
         return caml_call2(sprintf(_dD_),_kV_,_kU_);
        case 6:
         var
          e$1=e[3],
          t=e[2],
          c=e[1],
          _kW_=string_of_expr(e$1),
          _kX_=string_of_expr(t),
          _kY_=string_of_expr(c);
         return caml_call3(sprintf(_dE_),_kY_,_kX_,_kW_);
        case 7:
         var
          fields=e[1],
          _kZ_=of_seq(to_seq$1(fields)),
          _k0_=
           concat
            (_dG_,
             map
              (function(param)
                {var e=param[2],f=param[1],_k3_=string_of_expr(e);
                 return caml_call2(sprintf(_dF_),f,_k3_)},
               _kZ_));
         return caml_call1(sprintf(_dH_),_k0_);
        case 8:
         var key=e[2],recv=e[1],_k1_=string_of_expr(recv);
         return caml_call2(sprintf(_dI_),_k1_,key);
        default:
         var rcd=e[2],field=e[1],_k2_=string_of_expr(rcd);
         return caml_call2(sprintf(_dJ_),field,_k2_)}}
    function fail_proj_non_record(rcd,t)
     {var _kP_=string_of_ty(t),_kQ_=string_of_expr(rcd);
      return failwith(caml_call2(sprintf(_dS_),_kQ_,_kP_))}
    function simplifyUnion(tys)
     {var match=of_seq(to_seq$0(tys));
      if(match){if(match[2])return [2,tys];var ty=match[1];return ty}
      return 1}
    function tyeq(t1,t2)
     {var t1$0=t1,t2$0=t2;
      for(;;)
       {var switch$0=0;
        if(typeof t1$0 === "number")
         {if(0 === t1$0)
           {if(typeof t2$0 === "number")
             {if(1 !== t2$0)switch$0 = 2}
            else
             if(4 === t2$0[0])switch$0 = 1}
          else
           if(typeof t2$0 === "number")
            {if(0 !== t2$0)switch$0 = 2}
           else
            if(4 === t2$0[0])switch$0 = 1}
        else
         switch(t1$0[0])
          {case 0:
            var switch$1=0,_kG_=t1$0[1];
            if(typeof t2$0 !== "number")
             switch(t2$0[0])
              {case 0:var b=t2$0[1];return _kG_ === b?1:0;
               case 4:switch$0 = 1;switch$1 = 1;break
               }
            break;
           case 1:
            var switch$2=0,_kH_=t1$0[2],_kI_=t1$0[1];
            if(typeof t2$0 !== "number")
             switch(t2$0[0])
              {case 1:
                var r2=t2$0[2],p2=t2$0[1],_kJ_=for_all2(tyeq,_kI_,p2);
                if(_kJ_){var t1$0=_kH_,t2$0=r2;continue}
                return _kJ_;
               case 4:switch$0 = 1;switch$2 = 1;break
               }
            break;
           case 2:
            var _kK_=t1$0[1],switch$3=0;
            if(typeof t2$0 === "number")
             switch$3 = 1;
            else
             switch(t2$0[0])
              {case 2:
                var f2=t2$0[1],_kL_=cardinal(f2);
                if(cardinal(_kK_) === _kL_)
                 return for_all
                         (function(t1)
                           {return exists(function(_kO_){return tyeq(t1,_kO_)},f2)},
                          _kK_);
                break;
               case 4:switch$0 = 1;break;
               default:switch$3 = 1}
            break;
           case 3:
            var _kM_=t1$0[1],switch$4=0;
            if(typeof t2$0 === "number")
             switch$4 = 1;
            else
             switch(t2$0[0])
              {case 3:
                var f2$0=t2$0[1],_kN_=cardinal$0(f2$0);
                if(cardinal$0(_kM_) === _kN_)
                 return for_all$0
                         (function(n1,t1)
                           {var match=find_opt(n1,f2$0);
                            if(match){var t2=match[1];return tyeq(t1,t2)}
                            return 0},
                          _kM_);
                break;
               case 4:switch$0 = 1;break;
               default:switch$4 = 1}
            break;
           default:switch$0 = 1}
        switch(switch$0)
         {case 0:return 0;case 2:return 1;default:return failwith(_dU_)}}}
    function is_subtype(ctx,tyS,tyT)
     {var tyS$0=tyS,tyT$0=tyT;
      for(;;)
       {var _kw_=tyeq(tyS$0,tyT$0);
        if(_kw_)
         var _kx_=_kw_;
        else
         {if(typeof tyT$0 === "number" && ! tyT$0)return 1;
          var switch$0=0;
          if(typeof tyS$0 === "number")
           {if(1 === tyS$0)return 1}
          else
           switch(tyS$0[0])
            {case 1:
              var _kz_=tyS$0[1],switch$1=0,_ky_=tyS$0[2];
              if(typeof tyT$0 !== "number")
               switch(tyT$0[0])
                {case 1:
                  var
                   rT=tyT$0[2],
                   pT=tyT$0[1],
                   _kA_=length(pT),
                   _kB_=length(_kz_) === _kA_?1:0;
                  if(_kB_)
                   {var
                     _kC_=
                      for_all2
                       (function(pS,pT){return is_subtype(ctx,pT,pS)},_kz_,pT);
                    if(_kC_){var tyS$0=_ky_,tyT$0=rT;continue}
                    var _kD_=_kC_}
                  else
                   var _kD_=_kB_;
                  return _kD_;
                 case 2:switch$1 = 1;break
                 }
              if(! switch$1)switch$0 = 1;
              break;
             case 2:
              var fieldsS=tyS$0[1];
              return for_all
                      (function(tyS){return is_subtype(ctx,tyS,tyT$0)},fieldsS);
             case 3:
              var switch$2=0,_kE_=tyS$0[1];
              if(typeof tyT$0 !== "number")
               switch(tyT$0[0])
                {case 2:switch$2 = 1;break;
                 case 3:
                  var fieldsT=tyT$0[1];
                  return for_all$0
                          (function(name,tyT)
                            {var match=find_opt(name,_kE_);
                             if(match){var tyS=match[1];return is_subtype(ctx,tyS,tyT)}
                             return 0},
                           fieldsT)
                 }
              if(! switch$2)switch$0 = 1;
              break
             }
          if(! switch$0 && typeof tyT$0 !== "number" && 2 === tyT$0[0])
           {var fields=tyT$0[1];
            return exists
                    (function(_kF_){return is_subtype(ctx,tyS$0,_kF_)},fields)}
          var _kx_=0}
        return _kx_}}
    function join$1(ctx,ty1,ty2)
     {var ty1$0=ty1,ty2$0=ty2;
      for(;;)
       {if(is_subtype(ctx,ty1$0,ty2$0))return ty2$0;
        if(is_subtype(ctx,ty2$0,ty1$0))return ty1$0;
        var switch$0=0;
        if(typeof ty1$0 === "number")
         switch$0 = 1;
        else
         switch(ty1$0[0])
          {case 1:
            var _j6_=ty1$0[1],switch$1=0,_j5_=ty1$0[2];
            if(typeof ty2$0 !== "number")
             switch(ty2$0[0])
              {case 1:
                var r2=ty2$0[2],p2=ty2$0[1],_j7_=length(p2);
                if(length(_j6_) === _j7_)
                 {var
                   joinParams=
                    map2
                     (function(_ku_,_kv_){return meet(ctx,_ku_,_kv_)},_j6_,p2),
                   joinRet=join$1(ctx,_j5_,r2);
                  return [1,joinParams,joinRet]}
                switch$1 = 1;
                break;
               case 2:switch$0 = 1;switch$1 = 1;break
               }
            break;
           case 2:
            var _j8_=ty1$0[1];
            if(typeof ty2$0 !== "number" && 2 === ty2$0[0])
             {var
               f2=ty2$0[1],
               allFields=
                union
                 (_j8_,
                  filter
                   (function(l)
                     {return 1 - exists(function(_kt_){return tyeq(l,_kt_)},_j8_)},
                    f2));
              return simplifyUnion(allFields)}
            var singleTy=ty2$0,uTy=ty1$0;
            switch$0 = 2;
            break;
           case 3:
            var switch$2=0,_j9_=ty1$0[1];
            if(typeof ty2$0 !== "number")
             switch(ty2$0[0])
              {case 2:switch$0 = 1;switch$2 = 1;break;
               case 3:
                var
                 f2$0=ty2$0[1],
                 joined=
                  merge
                   (function(param,t1,match)
                     {if(t1 && match)
                       {var t2=match[1],t1$0=t1[1];return [0,join$1(ctx,t1$0,t2)]}
                      return 0},
                    _j9_,
                    f2$0);
                return [3,joined]
               }
            break;
           default:switch$0 = 1}
        var switch$3=0;
        switch(switch$0)
         {case 1:
           if(typeof ty2$0 !== "number" && 2 === ty2$0[0])
            {var singleTy=ty1$0,uTy=ty2$0;switch$3 = 1}
           break;
          case 0:break;
          default:switch$3 = 1}
        if(switch$3)
         {var ty2$1=[2,singleton(singleTy)],ty1$0=uTy,ty2$0=ty2$1;continue}
        var l=[0,ty1$0,[0,ty2$0,0]];
        if(l)
         {var _jV_=l[2],_jW_=l[1];
          if(_jV_)
           {var _jX_=_jV_[2],_jY_=_jV_[1];
            if(_jX_)
             {var _jZ_=_jX_[2],_j0_=_jX_[1];
              if(_jZ_)
               {var _j1_=_jZ_[2],_j2_=_jZ_[1];
                if(_j1_)
                 if(_j1_[2])
                  var
                   sort=
                    function(n,l)
                     {if(2 === n)
                       {if(l)
                         {var _kk_=l[2];
                          if(_kk_)
                           {var
                             tl=_kk_[2],
                             x2=_kk_[1],
                             x1=l[1],
                             c$0=caml_compare(x1,x2),
                             s=
                              0 === c$0?[0,x1,0]:0 <= c$0?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
                            return [0,s,tl]}}}
                      else
                       if(3 === n && l)
                        {var _km_=l[2];
                         if(_km_)
                          {var _kn_=_km_[2];
                           if(_kn_)
                            {var
                              tl$1=_kn_[2],
                              x3=_kn_[1],
                              x2$0=_km_[1],
                              x1$0=l[1],
                              c$1=caml_compare(x1$0,x2$0);
                             if(0 === c$1)
                              var
                               c$2=caml_compare(x2$0,x3),
                               _ko_=
                                0 === c$2
                                 ?[0,x2$0,0]
                                 :0 <= c$2?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                               s$0=_ko_;
                             else
                              if(0 <= c$1)
                               {var c$3=caml_compare(x1$0,x3);
                                if(0 === c$3)
                                 var _kp_=[0,x2$0,[0,x1$0,0]];
                                else
                                 if(0 <= c$3)
                                  var
                                   c$4=caml_compare(x2$0,x3),
                                   _kq_=
                                    0 === c$4
                                     ?[0,x2$0,[0,x1$0,0]]
                                     :0 <= c$4
                                       ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                                       :[0,x2$0,[0,x3,[0,x1$0,0]]],
                                   _kp_=_kq_;
                                 else
                                  var _kp_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                                var s$0=_kp_}
                              else
                               {var c$5=caml_compare(x2$0,x3);
                                if(0 === c$5)
                                 var _kr_=[0,x1$0,[0,x2$0,0]];
                                else
                                 if(0 <= c$5)
                                  var
                                   c$6=caml_compare(x1$0,x3),
                                   _ks_=
                                    0 === c$6
                                     ?[0,x1$0,[0,x2$0,0]]
                                     :0 <= c$6
                                       ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                                       :[0,x1$0,[0,x3,[0,x2$0,0]]],
                                   _kr_=_ks_;
                                 else
                                  var _kr_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                                var s$0=_kr_}
                             return [0,s$0,tl$1]}}}
                      var
                       n1=n >> 1,
                       n2=n - n1 | 0,
                       match=rev_sort(n1,l),
                       l2$0=match[2],
                       s1=match[1],
                       match$0=rev_sort(n2,l2$0),
                       tl$0=match$0[2],
                       s2=match$0[1],
                       l1=s1,
                       l2=s2,
                       accu=0;
                      for(;;)
                       {if(l1)
                         {if(l2)
                           {var
                             t2=l2[2],
                             h2=l2[1],
                             t1=l1[2],
                             h1=l1[1],
                             c=caml_compare(h1,h2);
                            if(0 === c)
                             {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                            if(0 < c){var accu$1=[0,h1,accu],l1=t1,accu=accu$1;continue}
                            var accu$2=[0,h2,accu],l2=t2,accu=accu$2;
                            continue}
                          var _kl_=rev_append(l1,accu)}
                        else
                         var _kl_=rev_append(l2,accu);
                        return [0,_kl_,tl$0]}},
                   rev_sort=
                    function(n,l)
                     {if(2 === n)
                       {if(l)
                         {var _kb_=l[2];
                          if(_kb_)
                           {var
                             tl=_kb_[2],
                             x2=_kb_[1],
                             x1=l[1],
                             c$0=caml_compare(x1,x2),
                             s=0 === c$0?[0,x1,0]:0 < c$0?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
                            return [0,s,tl]}}}
                      else
                       if(3 === n && l)
                        {var _kd_=l[2];
                         if(_kd_)
                          {var _ke_=_kd_[2];
                           if(_ke_)
                            {var
                              tl$1=_ke_[2],
                              x3=_ke_[1],
                              x2$0=_kd_[1],
                              x1$0=l[1],
                              c$1=caml_compare(x1$0,x2$0);
                             if(0 === c$1)
                              var
                               c$2=caml_compare(x2$0,x3),
                               _kf_=
                                0 === c$2
                                 ?[0,x2$0,0]
                                 :0 < c$2?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                               s$0=_kf_;
                             else
                              if(0 < c$1)
                               {var c$3=caml_compare(x2$0,x3);
                                if(0 === c$3)
                                 var _kg_=[0,x1$0,[0,x2$0,0]];
                                else
                                 if(0 < c$3)
                                  var _kg_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                                 else
                                  var
                                   c$4=caml_compare(x1$0,x3),
                                   _kh_=
                                    0 === c$4
                                     ?[0,x1$0,[0,x2$0,0]]
                                     :0 < c$4
                                       ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                                       :[0,x3,[0,x1$0,[0,x2$0,0]]],
                                   _kg_=_kh_;
                                var s$0=_kg_}
                              else
                               {var c$5=caml_compare(x1$0,x3);
                                if(0 === c$5)
                                 var _ki_=[0,x2$0,[0,x1$0,0]];
                                else
                                 if(0 < c$5)
                                  var _ki_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                                 else
                                  var
                                   c$6=caml_compare(x2$0,x3),
                                   _kj_=
                                    0 === c$6
                                     ?[0,x2$0,[0,x1$0,0]]
                                     :0 < c$6
                                       ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                                       :[0,x3,[0,x2$0,[0,x1$0,0]]],
                                   _ki_=_kj_;
                                var s$0=_ki_}
                             return [0,s$0,tl$1]}}}
                      var
                       n1=n >> 1,
                       n2=n - n1 | 0,
                       match=sort(n1,l),
                       l2$0=match[2],
                       s1=match[1],
                       match$0=sort(n2,l2$0),
                       tl$0=match$0[2],
                       s2=match$0[1],
                       l1=s1,
                       l2=s2,
                       accu=0;
                      for(;;)
                       {if(l1)
                         {if(l2)
                           {var
                             t2=l2[2],
                             h2=l2[1],
                             t1=l1[2],
                             h1=l1[1],
                             c=caml_compare(h1,h2);
                            if(0 === c)
                             {var accu$0=[0,h1,accu],l1=t1,l2=t2,accu=accu$0;continue}
                            if(0 <= c)
                             {var accu$1=[0,h2,accu],l2=t2,accu=accu$1;continue}
                            var accu$2=[0,h1,accu],l1=t1,accu=accu$2;
                            continue}
                          var _kc_=rev_append(l1,accu)}
                        else
                         var _kc_=rev_append(l2,accu);
                        return [0,_kc_,tl$0]}},
                   len=length(l),
                   _j3_=2 <= len?sort(len,l)[1]:l,
                   sub=
                    function(n,l)
                     {if(! (3 < n >>> 0))
                       switch(n)
                        {case 0:return [0,0,l];
                         case 1:
                          if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}
                          break;
                         case 2:
                          if(l)
                           {var _j__=l[2];
                            if(_j__)
                             {var l$4=_j__[2],x1=_j__[1],x0$0=l[1];
                              return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
                          break;
                         default:
                          if(l)
                           {var _j$_=l[2];
                            if(_j$_)
                             {var _ka_=_j$_[2];
                              if(_ka_)
                               {var l$5=_ka_[2],x2=_ka_[1],x1$0=_j$_[1],x0$1=l[1];
                                return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
                      var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
                      if(l$0)
                       {var
                         l$1=l$0[2],
                         mid=l$0[1],
                         match$0=sub((n - nl | 0) - 1 | 0,l$1),
                         l$2=match$0[2],
                         right=match$0[1];
                        return [0,create(left,mid,right),l$2]}
                      throw [0,Assert_failure,_F_]},
                   _j4_=sub(length(_j3_),_j3_)[1];
                 else
                  var
                   x4=_j1_[1],
                   _j4_=add(x4,add(_j2_,add(_j0_,add(_jY_,singleton(_jW_)))));
                else
                 var _j4_=add(_j2_,add(_j0_,add(_jY_,singleton(_jW_))))}
              else
               var _j4_=add(_j0_,add(_jY_,singleton(_jW_)))}
            else
             var _j4_=add(_jY_,singleton(_jW_))}
          else
           var _j4_=singleton(_jW_)}
        else
         var _j4_=v;
        return [2,_j4_]}}
    function meet(ctx,ty1,ty2)
     {var ty1$0=ty1,ty2$0=ty2;
      for(;;)
       {if(is_subtype(ctx,ty1$0,ty2$0))return ty1$0;
        if(is_subtype(ctx,ty2$0,ty1$0))return ty2$0;
        var switch$0=0;
        if(typeof ty1$0 === "number")
         switch$0 = 1;
        else
         switch(ty1$0[0])
          {case 1:
            var _jO_=ty1$0[1],switch$1=0,_jN_=ty1$0[2];
            if(typeof ty2$0 !== "number")
             switch(ty2$0[0])
              {case 1:
                var r2=ty2$0[2],p2=ty2$0[1],_jP_=length(p2);
                if(length(_jO_) === _jP_)
                 {var
                   meetParams=
                    map2
                     (function(_jT_,_jU_){return join$1(ctx,_jT_,_jU_)},_jO_,p2),
                   meetRet=meet(ctx,_jN_,r2);
                  return [1,meetParams,meetRet]}
                switch$1 = 1;
                break;
               case 2:switch$0 = 1;switch$1 = 1;break
               }
            break;
           case 2:
            var _jQ_=ty1$0[1];
            if(typeof ty2$0 !== "number" && 2 === ty2$0[0])
             {var
               f2=ty2$0[1],
               common=
                filter
                 (function(l)
                   {return exists(function(_jS_){return tyeq(l,_jS_)},f2)},
                  _jQ_);
              return simplifyUnion(common)}
            var singleTy=ty2$0,uTy=ty1$0;
            switch$0 = 2;
            break;
           case 3:
            var switch$2=0,_jR_=ty1$0[1];
            if(typeof ty2$0 !== "number")
             switch(ty2$0[0])
              {case 2:switch$0 = 1;switch$2 = 1;break;
               case 3:
                var
                 f2$0=ty2$0[1],
                 metFields=
                  union$0
                   (function(param,t1,t2){return [0,meet(ctx,t1,t2)]},
                    _jR_,
                    f2$0);
                return [3,metFields]
               }
            break;
           default:switch$0 = 1}
        var switch$3=0;
        switch(switch$0)
         {case 1:
           if(typeof ty2$0 !== "number" && 2 === ty2$0[0])
            {var singleTy=ty1$0,uTy=ty2$0;switch$3 = 1}
           break;
          case 0:break;
          default:switch$3 = 1}
        if(switch$3)
         {var ty2$1=[2,singleton(singleTy)],ty1$0=uTy,ty2$0=ty2$1;continue}
        return 1}}
    function exclude(ctx,tyB,tyE)
     {var tyB$0=tyB,tyE$0=tyE;
      for(;;)
       {if(is_subtype(ctx,tyB$0,tyE$0))return 1;
        var switch$0=0;
        if(typeof tyB$0 === "number")
         switch$0 = 1;
        else
         switch(tyB$0[0])
          {case 1:
            var _jG_=tyB$0[1],switch$1=0,_jF_=tyB$0[2];
            if(typeof tyE$0 !== "number")
             switch(tyE$0[0])
              {case 1:
                var rE=tyE$0[2],pE=tyE$0[1],_jH_=length(pE);
                if(length(_jG_) === _jH_)
                 {var
                   excParams=
                    map2
                     (function(_jL_,_jM_){return exclude(ctx,_jL_,_jM_)},_jG_,pE),
                   excRet=exclude(ctx,_jF_,rE);
                  return [1,excParams,excRet]}
                switch$1 = 1;
                break;
               case 2:switch$0 = 1;switch$1 = 1;break
               }
            break;
           case 2:
            var _jI_=tyB$0[1];
            if(typeof tyE$0 !== "number" && 2 === tyE$0[0])
             {var
               fE=tyE$0[1],
               filtered=
                filter
                 (function(l)
                   {return 1 - exists(function(_jK_){return tyeq(l,_jK_)},fE)},
                  _jI_);
              return simplifyUnion(filtered)}
            var tyE$1=[2,singleton(tyE$0)],tyE$0=tyE$1;
            continue;
           case 3:
            var switch$2=0,_jJ_=tyB$0[1];
            if(typeof tyE$0 !== "number")
             switch(tyE$0[0])
              {case 2:switch$0 = 1;switch$2 = 1;break;
               case 3:
                var
                 fE$0=tyE$0[1],
                 wittled=filter$0(function(n,param){return mem(n,fE$0)},_jJ_);
                return [3,wittled]
               }
            break;
           default:switch$0 = 1}
        if(switch$0 && typeof tyE$0 !== "number" && 2 === tyE$0[0])
         {var tyB$1=[2,singleton(tyB$0)],tyB$0=tyB$1;continue}
        return tyB$0}}
    function typecheck(ctx,expr)
     {switch(expr[0])
       {case 0:
         var n=expr[1];
         if(mem(n,ctx))
          {var match=find_opt(n,ctx);
           if(match)
            {var _jl_=match[1];
             if(0 === _jl_[0]){var ty=_jl_[2];return ty}
             var ty$0=_jl_[1];
             return ty$0}
           return failwith(caml_call1(sprintf(_dn_),n))}
         return failwith(symbol(_dW_,symbol(n,_dV_)));
        case 1:return _dX_;
        case 2:return _dY_;
        case 3:return _dZ_;
        case 4:
         var args=expr[2],n$0=expr[1],match$0=typecheck(ctx,n$0);
         if(typeof match$0 !== "number" && 1 === match$0[0])
          {var
            ret=match$0[2],
            params=match$0[1],
            argTys=map(function(_jE_){return typecheck(ctx,_jE_)},args),
            _ju_=length(argTys);
           if
            (length(params)
             ===
             _ju_
             &&
             for_all2
              (function(_jC_,_jD_){return is_subtype(ctx,_jC_,_jD_)},
               argTys,
               params))
            return ret;
           var
            _jn_=
             concat
              (_dM_,
               map2
                (function(p,t)
                  {var _jA_=string_of_ty(t),_jB_=string_of_expr(p);
                   return caml_call2(sprintf(_dL_),_jB_,_jA_)},
                 args,
                 argTys)),
            _jo_=string_of_expr(n$0);
           return failwith(caml_call2(sprintf(_dN_),_jo_,_jn_))}
         var _jm_=string_of_expr(n$0);
         return failwith(caml_call1(sprintf(_dK_),_jm_));
        case 5:
         var
          ty$1=expr[2],
          expr$0=expr[1],
          tyExpr=typecheck(ctx,expr$0),
          tyLeft=meet(ctx,tyExpr,ty$1),
          tyRight=exclude(ctx,tyExpr,ty$1);
         return [4,expr$0,tyLeft,tyRight];
        case 6:
         var right=expr[3],left=expr[2],cond=expr[1],t=typecheck(ctx,cond);
         if(typeof t !== "number")
          switch(t[0])
           {case 0:
             if(2 <= t[1])
              {var
                tyLeft$0=typecheck(ctx,left),
                tyRight$0=typecheck(ctx,right);
               return join$1(ctx,tyLeft$0,tyRight$0)}
             break;
            case 4:
             var _jv_=t[1];
             if(0 === _jv_[0])
              {var
                tyRight$1=t[3],
                tyLeft$1=t[2],
                n$1=_jv_[1],
                ctxLeft=add_var(n$1,tyLeft$1,ctx),
                tyLeft$2=typecheck(ctxLeft,left),
                ctxRight=add_var(n$1,tyRight$1,ctx),
                tyRight$2=typecheck(ctxRight,right);
               return join$1(ctx,tyLeft$2,tyRight$2)}
             var _jp_=string_of_expr(_jv_);
             return failwith(caml_call1(sprintf(_dP_),_jp_))
            }
         var _jq_=string_of_ty(t);
         return failwith(caml_call1(sprintf(_dQ_),_jq_));
        case 7:
         var _jx_=expr[2],_jw_=expr[1];
         if(_jx_){var t$0=_jx_[1];return t$0}
         var
          fieldTys=map$1(function(_jz_){return typecheck(ctx,_jz_)},_jw_),
          rcdty=[3,fieldTys];
         expr[2] = [0,rcdty];
         return rcdty;
        case 8:
         var field=expr[2],rcd=expr[1],t$1=typecheck(ctx,rcd);
         if(typeof t$1 !== "number")
          switch(t$1[0])
           {case 2:
             var
              fields=t$1[1],
              combinedProjTypes=
               map$0
                (function(param)
                  {if(typeof param !== "number" && 3 === param[0])
                    {var rcdFields=param[1];
                     if(mem(field,rcdFields))return find(field,rcdFields)}
                   return fail_proj_non_record(rcd,t$1)},
                 fields);
             return simplifyUnion(combinedProjTypes);
            case 3:
             var fields$0=t$1[1],match$1=find_opt(field,fields$0);
             if(match$1){var ty$2=match$1[1];return ty$2}
             var _jr_=string_of_expr(rcd);
             return failwith(caml_call2(sprintf(_dR_),field,_jr_))
            }
         return fail_proj_non_record(rcd,t$1);
        default:
         var rcd$0=expr[2],field$0=expr[1],ty$3=typecheck(ctx,rcd$0);
         if(typeof ty$3 !== "number")
          switch(ty$3[0])
           {case 2:
             var
              fields$1=ty$3[1],
              match$2=
               partition
                (function(variantTy)
                  {return is_subtype(ctx,variantTy,[3,singleton$0(field$0,0)])},
                 fields$1),
              right$0=match$2[2],
              left$0=match$2[1],
              _jy_=simplifyUnion(right$0);
             return [4,rcd$0,simplifyUnion(left$0),_jy_];
            case 3:
             var
              fields$2=ty$3[1],
              is=mem(field$0,fields$2),
              _js_=string_of_bool(is),
              _jt_=string_of_expr(rcd$0);
             return failwith(caml_call3(sprintf(_dT_),field$0,_jt_,_js_))
            }
         return [4,rcd$0,1,ty$3]}}
    function menhir_fail(param)
     {var fmt=fmt$0[1],_jk_=0;
      make_printf(function(acc){output_acc(oc,acc);return 0},_jk_,fmt);
      throw [0,Assert_failure,_et_]}
    function menhir_errorcase(menhir_env,menhir_stack,menhir_s)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s;
      for(;;)
       switch(menhir_s$0)
        {case 0:throw eRR;
         case 1:
          var
           menhir_s$1=menhir_stack$0[2],
           menhir_stack$1=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$1,
           menhir_s$0=menhir_s$1;
          continue;
         case 2:
          var
           menhir_s$2=menhir_stack$0[2],
           menhir_stack$2=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$2,
           menhir_s$0=menhir_s$2;
          continue;
         case 3:
          var
           menhir_s$3=menhir_stack$0[2],
           menhir_stack$3=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$3,
           menhir_s$0=menhir_s$3;
          continue;
         case 4:
          var
           menhir_s$4=menhir_stack$0[2],
           menhir_stack$4=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$4,
           menhir_s$0=menhir_s$4;
          continue;
         case 5:
          var
           menhir_s$5=menhir_stack$0[2],
           menhir_stack$5=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$5,
           menhir_s$0=menhir_s$5;
          continue;
         case 6:
          var
           match=menhir_stack$0[1],
           menhir_s$6=match[2],
           menhir_stack$6=match[1],
           menhir_stack$0=menhir_stack$6,
           menhir_s$0=menhir_s$6;
          continue;
         case 7:
          var
           menhir_s$7=menhir_stack$0[2],
           menhir_stack$7=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$7,
           menhir_s$0=menhir_s$7;
          continue;
         case 8:
          var
           menhir_s$8=menhir_stack$0[2],
           menhir_stack$8=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$8,
           menhir_s$0=menhir_s$8;
          continue;
         case 9:
          var
           menhir_s$9=menhir_stack$0[2],
           menhir_stack$9=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$9,
           menhir_s$0=menhir_s$9;
          continue;
         case 10:
          var
           menhir_s$10=menhir_stack$0[2],
           menhir_stack$10=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$10,
           menhir_s$0=menhir_s$10;
          continue;
         case 11:
          var
           menhir_s$11=menhir_stack$0[2],
           menhir_stack$11=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$11,
           menhir_s$0=menhir_s$11;
          continue;
         case 12:
          var
           menhir_s$12=menhir_stack$0[2],
           menhir_stack$12=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$12,
           menhir_s$0=menhir_s$12;
          continue;
         case 13:
          var
           menhir_s$13=menhir_stack$0[2],
           menhir_stack$13=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$13,
           menhir_s$0=menhir_s$13;
          continue;
         case 14:
          var
           menhir_s$14=menhir_stack$0[2],
           menhir_stack$14=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$14,
           menhir_s$0=menhir_s$14;
          continue;
         case 15:
          var
           menhir_s$15=menhir_stack$0[2],
           menhir_stack$15=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$15,
           menhir_s$0=menhir_s$15;
          continue;
         case 16:
          var
           menhir_s$16=menhir_stack$0[2],
           menhir_stack$16=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$16,
           menhir_s$0=menhir_s$16;
          continue;
         case 17:
          var
           menhir_s$17=menhir_stack$0[2],
           menhir_stack$17=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$17,
           menhir_s$0=menhir_s$17;
          continue;
         case 18:
          var
           menhir_s$18=menhir_stack$0[2],
           menhir_stack$18=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$18,
           menhir_s$0=menhir_s$18;
          continue;
         case 19:
          var
           menhir_s$19=menhir_stack$0[2],
           menhir_stack$19=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$19,
           menhir_s$0=menhir_s$19;
          continue;
         case 20:
          var
           menhir_s$20=menhir_stack$0[2],
           menhir_stack$20=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$20,
           menhir_s$0=menhir_s$20;
          continue;
         case 21:
          var
           menhir_s$21=menhir_stack$0[2],
           menhir_stack$21=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$21,
           menhir_s$0=menhir_s$21;
          continue;
         case 22:
          var
           menhir_s$22=menhir_stack$0[2],
           menhir_stack$22=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$22,
           menhir_s$0=menhir_s$22;
          continue;
         case 23:
          var
           menhir_s$23=menhir_stack$0[2],
           menhir_stack$23=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$23,
           menhir_s$0=menhir_s$23;
          continue;
         case 24:
          var
           menhir_s$24=menhir_stack$0[2],
           menhir_stack$24=menhir_stack$0[1],
           menhir_stack$0=menhir_stack$24,
           menhir_s$0=menhir_s$24;
          continue;
         default:throw eRR}}
    function menhir_goto_program(menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,v$0=v;
      for(;;)
       {if(2 <= menhir_s$0)return 25 <= menhir_s$0?v$0:menhir_fail(0);
        if(menhir_s$0)
         {var
           f=menhir_stack$0[3],
           menhir_s$1=menhir_stack$0[2],
           menhir_stack$1=menhir_stack$0[1],
           v$1=[0,[0,f,v$0[1]],v$0[2]],
           menhir_stack$0=menhir_stack$1,
           menhir_s$0=menhir_s$1,
           v$0=v$1;
          continue}
        var v$2=[0,v$0];
        return v$2}}
    function menhir_run71(menhir_env,menhir_stack,menhir_s)
     {return menhir_goto_program(menhir_env,menhir_stack,menhir_s,v$3)}
    function menhir_reduce34(counter,menhir_env,menhir_stack$2,menhir_s$2)
     {var menhir_stack=menhir_stack$2,menhir_s=menhir_s$2,v$0=v;
      for(;;)
       {var switcher=menhir_s - 10 | 0;
        if(! (2 < switcher >>> 0))
         switch(switcher)
          {case 0:
            var
             _2=menhir_stack[3],
             match=menhir_stack[1],
             menhir_s$0=match[2],
             menhir_stack$0=match[1],
             v$1=add(_2,v$0),
             menhir_stack=menhir_stack$0,
             menhir_s=menhir_s$0,
             v$0=v$1;
            continue;
           case 1:break;
           default:
            var
             _3=menhir_stack[3],
             match$0=menhir_stack[1],
             _1=match$0[3],
             menhir_s$1=match$0[2],
             menhir_stack$1=match$0[1],
             v$2=[2,add(_3,add(_1,v$0))];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_goto_Type
                      (counter$0,menhir_env,menhir_stack$1,menhir_s$1,v$2)}
            return caml_trampoline_return
                    (menhir_goto_Type,
                     [0,menhir_env,menhir_stack$1,menhir_s$1,v$2])}
        return menhir_fail(0)}}
    function menhir_run33(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 1:
          var _jf_=11;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run20(counter$4,menhir_env$0,menhir_stack$0,_jf_)}
          return caml_trampoline_return
                  (menhir_run20,[0,menhir_env$0,menhir_stack$0,_jf_]);
         case 2:
          var _jg_=11;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run21(counter$3,menhir_env$0,menhir_stack$0,_jg_)}
          return caml_trampoline_return
                  (menhir_run21,[0,menhir_env$0,menhir_stack$0,_jg_]);
         case 3:
          var _jh_=11;
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return menhir_run22(counter$2,menhir_env$0,menhir_stack$0,_jh_)}
          return caml_trampoline_return
                  (menhir_run22,[0,menhir_env$0,menhir_stack$0,_jh_]);
         case 8:
          var _ji_=11;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run23(counter$1,menhir_env$0,menhir_stack$0,_ji_)}
          return caml_trampoline_return
                  (menhir_run23,[0,menhir_env$0,menhir_stack$0,_ji_]);
         case 9:
          var _jj_=11;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run24(counter$0,menhir_env$0,menhir_stack$0,_jj_)}
          return caml_trampoline_return
                  (menhir_run24,[0,menhir_env$0,menhir_stack$0,_jj_])
         }
      if(menhir_env$0[4])throw [0,Assert_failure,_d0_];
      menhir_env$0[4] = 1;
      return menhir_errorcase(menhir_env$0,menhir_stack$0,11)}
    function menhir_goto_Type(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      switch(menhir_s)
       {case 3:
         if(menhir_env[4])throw [0,Assert_failure,_d1_];
         var tok=menhir_env[3];
         if(typeof tok === "number" && 9 === tok)
          {var menhir_env$0=menhir_discard(menhir_env),tok$0=menhir_env$0[3];
           if(typeof tok$0 === "number")
            switch(tok$0)
             {case 8:
               var _i6_=2;
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return menhir_run3$0
                         (counter$4,menhir_env$0,menhir_stack$0,_i6_)}
               return caml_trampoline_return
                       (menhir_run3$0,[0,menhir_env$0,menhir_stack$0,_i6_]);
              case 9:
               var _i7_=2;
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return menhir_run4$0
                         (counter$3,menhir_env$0,menhir_stack$0,_i7_)}
               return caml_trampoline_return
                       (menhir_run4$0,[0,menhir_env$0,menhir_stack$0,_i7_]);
              case 12:
               var _i8_=2;
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return menhir_run7$0
                         (counter$2,menhir_env$0,menhir_stack$0,_i8_)}
               return caml_trampoline_return
                       (menhir_run7$0,[0,menhir_env$0,menhir_stack$0,_i8_]);
              default:
               if(menhir_env$0[4])throw [0,Assert_failure,_d2_];
               menhir_env$0[4] = 1;
               return menhir_errorcase(menhir_env$0,menhir_stack$0,2)}
           else
            switch(tok$0[0])
             {case 0:
               var v$0=tok$0[1],_i9_=2;
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return menhir_run1$0
                         (counter$6,menhir_env$0,menhir_stack$0,_i9_,v$0)}
               return caml_trampoline_return
                       (menhir_run1$0,[0,menhir_env$0,menhir_stack$0,_i9_,v$0]);
              case 1:
               var v$1=tok$0[1],_i__=2;
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return menhir_run2$0
                         (counter$5,menhir_env$0,menhir_stack$0,_i__,v$1)}
               return caml_trampoline_return
                       (menhir_run2$0,[0,menhir_env$0,menhir_stack$0,_i__,v$1]);
              case 2:
               var v$2=tok$0[1],_i$_=2;
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return menhir_run8$0
                         (counter$1,menhir_env$0,menhir_stack$0,_i$_,v$2)}
               return caml_trampoline_return
                       (menhir_run8$0,[0,menhir_env$0,menhir_stack$0,_i$_,v$2]);
              default:
               var v$3=tok$0[1],_ja_=2;
               if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return menhir_run10$0
                         (counter$0,menhir_env$0,menhir_stack$0,_ja_,v$3)}
               return caml_trampoline_return
                       (menhir_run10$0,[0,menhir_env$0,menhir_stack$0,_ja_,v$3])}}
         if(menhir_env[4])throw [0,Assert_failure,_d3_];
         menhir_env[4] = 1;
         var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$1,menhir_s$0);
        case 5:
         if(menhir_env[4])throw [0,Assert_failure,_d4_];
         var tok$1=menhir_env[3];
         if(typeof tok$1 === "number")
          {if(5 === tok$1)
            {var
              ty=menhir_stack$0[3],
              match=menhir_stack$0[1],
              id=match[3],
              menhir_s$1=match[2],
              menhir_stack$2=match[1],
              v$4=[0,[0,id,ty],0];
             if(counter < 50)
              {var counter$10=counter + 1 | 0;
               return menhir_goto_Params
                       (counter$10,menhir_env,menhir_stack$2,menhir_s$1,v$4)}
             return caml_trampoline_return
                     (menhir_goto_Params,
                      [0,menhir_env,menhir_stack$2,menhir_s$1,v$4])}
           if(17 === tok$1)
            {var
              menhir_env$1=menhir_discard(menhir_env),
              tok$2=menhir_env$1[3];
             if(typeof tok$2 === "number")
              {if(5 === tok$2)
                {var _jb_=4;
                 if(counter < 50)
                  {var counter$9=counter + 1 | 0;
                   return menhir_reduce23
                           (counter$9,menhir_env$1,menhir_stack$0,_jb_)}
                 return caml_trampoline_return
                         (menhir_reduce23,[0,menhir_env$1,menhir_stack$0,_jb_])}}
             else
              if(2 === tok$2[0])
               {var v$5=tok$2[1],_jc_=4;
                if(counter < 50)
                 {var counter$8=counter + 1 | 0;
                  return menhir_run59
                          (counter$8,menhir_env$1,menhir_stack$0,_jc_,v$5)}
                return caml_trampoline_return
                        (menhir_run59,[0,menhir_env$1,menhir_stack$0,_jc_,v$5])}
             if(menhir_env$1[4])throw [0,Assert_failure,_d5_];
             menhir_env$1[4] = 1;
             return menhir_errorcase(menhir_env$1,menhir_stack$0,4)}}
         if(menhir_env[4])throw [0,Assert_failure,_d6_];
         menhir_env[4] = 1;
         var menhir_s$2=menhir_stack$0[2],menhir_stack$3=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$3,menhir_s$2);
        case 15:
         if(menhir_env[4])throw [0,Assert_failure,_d7_];
         var tok$3=menhir_env[3];
         if(typeof tok$3 === "number")
          {if(6 === tok$3)
            {var
              _3=menhir_stack$0[3],
              match$0=menhir_stack$0[1],
              _1=match$0[3],
              menhir_s$3=match$0[2],
              menhir_stack$4=match$0[1],
              v$6=[0,[0,_1,_3],0];
             if(counter < 50)
              {var counter$14=counter + 1 | 0;
               return menhir_goto_RcdType
                       (counter$14,menhir_env,menhir_stack$4,menhir_s$3,v$6)}
             return caml_trampoline_return
                     (menhir_goto_RcdType,
                      [0,menhir_env,menhir_stack$4,menhir_s$3,v$6])}
           if(17 === tok$3)
            {var
              menhir_env$2=menhir_discard(menhir_env),
              tok$4=menhir_env$2[3];
             if(typeof tok$4 === "number")
              {if(6 === tok$4)
                {var _jd_=14;
                 if(counter < 50)
                  {var counter$12=counter + 1 | 0;
                   return menhir_reduce29
                           (counter$12,menhir_env$2,menhir_stack$0,_jd_)}
                 return caml_trampoline_return
                         (menhir_reduce29,[0,menhir_env$2,menhir_stack$0,_jd_])}}
             else
              if(2 === tok$4[0])
               {var v$7=tok$4[1],_je_=14;
                if(counter < 50)
                 {var counter$11=counter + 1 | 0;
                  return menhir_run25
                          (counter$11,menhir_env$2,menhir_stack$0,_je_,v$7)}
                return caml_trampoline_return
                        (menhir_run25,[0,menhir_env$2,menhir_stack$0,_je_,v$7])}
             if(menhir_env$2[4])throw [0,Assert_failure,_d8_];
             menhir_env$2[4] = 1;
             return menhir_errorcase(menhir_env$2,menhir_stack$0,14)}}
         if(menhir_env[4])throw [0,Assert_failure,_d9_];
         menhir_env[4] = 1;
         var menhir_s$4=menhir_stack$0[2],menhir_stack$5=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$5,menhir_s$4);
        case 17:
         if(menhir_env[4])throw [0,Assert_failure,_d__];
         var tok$5=menhir_env[3];
         if(typeof tok$5 === "number" && 5 === tok$5)
          {var
            menhir_env$3=menhir_discard(menhir_env),
            _2=menhir_stack$0[3],
            match$1=menhir_stack$0[1],
            menhir_s$5=match$1[2],
            menhir_stack$6=match$1[1];
           if(counter < 50)
            {var counter$13=counter + 1 | 0;
             return menhir_goto_AtomicType
                     (counter$13,menhir_env$3,menhir_stack$6,menhir_s$5,_2)}
           return caml_trampoline_return
                   (menhir_goto_AtomicType,
                    [0,menhir_env$3,menhir_stack$6,menhir_s$5,_2])}
         if(menhir_env[4])throw [0,Assert_failure,_d$_];
         menhir_env[4] = 1;
         var menhir_s$6=menhir_stack$0[2],menhir_stack$7=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$7,menhir_s$6);
        case 18:
         var
          _3$0=menhir_stack$0[3],
          match$2=menhir_stack$0[1],
          _1$0=match$2[3],
          menhir_s$7=match$2[2],
          menhir_stack$8=match$2[1],
          v$8=[5,[0,_1$0],_3$0];
         if(counter < 50)
          {var counter$7=counter + 1 | 0;
           return menhir_goto_AtomicExpr
                   (counter$7,menhir_env,menhir_stack$8,menhir_s$7,v$8)}
         return caml_trampoline_return
                 (menhir_goto_AtomicExpr,
                  [0,menhir_env,menhir_stack$8,menhir_s$7,v$8]);
        default:return menhir_fail(0)}}
    function menhir_goto_RcdType(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,_2=v;
      for(;;)
       {var switcher=menhir_s$0 - 14 | 0;
        if(! (2 < switcher >>> 0))
         switch(switcher)
          {case 0:
            var
             _3=menhir_stack$0[3],
             match=menhir_stack$0[1],
             _1=match[3],
             menhir_s$1=match[2],
             menhir_stack$1=match[1],
             v$0=[0,[0,_1,_3],_2],
             menhir_stack$0=menhir_stack$1,
             menhir_s$0=menhir_s$1,
             _2=v$0;
            continue;
           case 1:break;
           default:
            if(menhir_env[4])throw [0,Assert_failure,_ea_];
            var tok=menhir_env[3];
            if(typeof tok === "number" && 6 === tok)
             {var
               menhir_env$0=menhir_discard(menhir_env),
               menhir_s$2=menhir_stack$0[2],
               menhir_stack$2=menhir_stack$0[1],
               v$1=[3,of_seq$0(to_seq(_2))];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return menhir_goto_AtomicType
                        (counter$0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1)}
              return caml_trampoline_return
                      (menhir_goto_AtomicType,
                       [0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1])}
            if(menhir_env[4])throw [0,Assert_failure,_eb_];
            menhir_env[4] = 1;
            return menhir_errorcase(menhir_env,menhir_stack$0,menhir_s$0)}
        return menhir_fail(0)}}
    function menhir_goto_RcdList(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,_2=v;
      for(;;)
       {if(7 === menhir_s$0)
         {var
           _3=menhir_stack$0[3],
           match=menhir_stack$0[1],
           _1=match[3],
           menhir_s$1=match[2],
           menhir_stack$1=match[1],
           v$0=[0,[0,_1,_3],_2],
           menhir_stack$0=menhir_stack$1,
           menhir_s$0=menhir_s$1,
           _2=v$0;
          continue}
        if(23 === menhir_s$0)
         {if(menhir_env[4])throw [0,Assert_failure,_ec_];
          var tok=menhir_env[3];
          if(typeof tok === "number" && 6 === tok)
           {var
             menhir_env$0=menhir_discard(menhir_env),
             menhir_s$2=menhir_stack$0[2],
             menhir_stack$2=menhir_stack$0[1],
             v$1=[7,of_seq$0(to_seq(_2)),0];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_goto_AtomicExpr
                      (counter$0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1)}
            return caml_trampoline_return
                    (menhir_goto_AtomicExpr,
                     [0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1])}
          if(menhir_env[4])throw [0,Assert_failure,_ed_];
          menhir_env[4] = 1;
          return menhir_errorcase(menhir_env,menhir_stack$0,menhir_s$0)}
        return menhir_fail(0)}}
    function menhir_goto_ArgList(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,_3=v;
      for(;;)
       {if(19 === menhir_s$0)
         {var
           expr=menhir_stack$0[3],
           menhir_s$1=menhir_stack$0[2],
           menhir_stack$1=menhir_stack$0[1],
           v$0=[0,expr,_3],
           menhir_stack$0=menhir_stack$1,
           menhir_s$0=menhir_s$1,
           _3=v$0;
          continue}
        if(20 === menhir_s$0)
         {if(menhir_env[4])throw [0,Assert_failure,_ee_];
          var tok=menhir_env[3];
          if(typeof tok === "number" && 5 === tok)
           {var
             menhir_env$0=menhir_discard(menhir_env),
             _1=menhir_stack$0[3],
             menhir_s$2=menhir_stack$0[2],
             menhir_stack$2=menhir_stack$0[1],
             v$1=[4,[0,_1],_3];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_goto_AtomicExpr
                      (counter$0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1)}
            return caml_trampoline_return
                    (menhir_goto_AtomicExpr,
                     [0,menhir_env$0,menhir_stack$2,menhir_s$2,v$1])}
          if(menhir_env[4])throw [0,Assert_failure,_ef_];
          menhir_env[4] = 1;
          return menhir_errorcase(menhir_env,menhir_stack$0,menhir_s$0)}
        return menhir_fail(0)}}
    function menhir_goto_AtomicType
     (counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      switch(menhir_s)
       {case 11:
         if(menhir_env[4])throw [0,Assert_failure,_ej_];
         var tok$1=menhir_env[3];
         if(typeof tok$1 === "number")
          switch(tok$1)
           {case 0:
             var _i2_=10;
             if(counter < 50)
              {var counter$6=counter + 1 | 0;
               return menhir_run33(counter$6,menhir_env,menhir_stack$0,_i2_)}
             return caml_trampoline_return
                     (menhir_run33,[0,menhir_env,menhir_stack$0,_i2_]);
            case 4:
            case 5:
            case 6:
            case 9:
            case 14:
            case 15:
            case 16:
            case 17:
             var _i3_=10;
             if(counter < 50)
              {var counter$8=counter + 1 | 0;
               return menhir_reduce34
                       (counter$8,menhir_env,menhir_stack$0,_i3_)}
             return caml_trampoline_return
                     (menhir_reduce34,[0,menhir_env,menhir_stack$0,_i3_])
            }
         if(menhir_env[4])throw [0,Assert_failure,_ek_];
         menhir_env[4] = 1;
         return menhir_errorcase(menhir_env,menhir_stack$0,10);
        case 13:
         if(menhir_env[4])throw [0,Assert_failure,_el_];
         var tok$2=menhir_env[3];
         if(typeof tok$2 === "number")
          switch(tok$2)
           {case 0:
             var _i4_=12;
             if(counter < 50)
              {var counter$7=counter + 1 | 0;
               return menhir_run33(counter$7,menhir_env,menhir_stack$0,_i4_)}
             return caml_trampoline_return
                     (menhir_run33,[0,menhir_env,menhir_stack$0,_i4_]);
            case 4:
            case 5:
            case 6:
            case 9:
            case 14:
            case 15:
            case 16:
            case 17:
             var _i5_=12;
             if(counter < 50)
              {var counter$9=counter + 1 | 0;
               return menhir_reduce34
                       (counter$9,menhir_env,menhir_stack$0,_i5_)}
             return caml_trampoline_return
                     (menhir_reduce34,[0,menhir_env,menhir_stack$0,_i5_])
            }
         if(menhir_env[4])throw [0,Assert_failure,_em_];
         menhir_env[4] = 1;
         return menhir_errorcase(menhir_env,menhir_stack$0,12);
        case 3:
        case 5:
        case 15:
        case 17:
        case 18:
         if(menhir_env[4])throw [0,Assert_failure,_eg_];
         var tok=menhir_env[3];
         if(typeof tok === "number")
          switch(tok)
           {case 0:
             var
              menhir_env$0=menhir_discard(menhir_env),
              tok$0=menhir_env$0[3];
             if(typeof tok$0 === "number")
              switch(tok$0)
               {case 1:
                 var _iX_=13;
                 if(counter < 50)
                  {var counter$4=counter + 1 | 0;
                   return menhir_run20
                           (counter$4,menhir_env$0,menhir_stack$0,_iX_)}
                 return caml_trampoline_return
                         (menhir_run20,[0,menhir_env$0,menhir_stack$0,_iX_]);
                case 2:
                 var _iY_=13;
                 if(counter < 50)
                  {var counter$3=counter + 1 | 0;
                   return menhir_run21
                           (counter$3,menhir_env$0,menhir_stack$0,_iY_)}
                 return caml_trampoline_return
                         (menhir_run21,[0,menhir_env$0,menhir_stack$0,_iY_]);
                case 3:
                 var _iZ_=13;
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return menhir_run22
                           (counter$2,menhir_env$0,menhir_stack$0,_iZ_)}
                 return caml_trampoline_return
                         (menhir_run22,[0,menhir_env$0,menhir_stack$0,_iZ_]);
                case 8:
                 var _i0_=13;
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return menhir_run23
                           (counter$1,menhir_env$0,menhir_stack$0,_i0_)}
                 return caml_trampoline_return
                         (menhir_run23,[0,menhir_env$0,menhir_stack$0,_i0_]);
                case 9:
                 var _i1_=13;
                 if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return menhir_run24
                           (counter$0,menhir_env$0,menhir_stack$0,_i1_)}
                 return caml_trampoline_return
                         (menhir_run24,[0,menhir_env$0,menhir_stack$0,_i1_])
                }
             if(menhir_env$0[4])throw [0,Assert_failure,_eh_];
             menhir_env$0[4] = 1;
             return menhir_errorcase(menhir_env$0,menhir_stack$0,13);
            case 4:
            case 5:
            case 6:
            case 9:
            case 14:
            case 15:
            case 16:
            case 17:
             var
              _1=menhir_stack$0[3],
              menhir_s$1=menhir_stack$0[2],
              menhir_stack$2=menhir_stack$0[1];
             if(counter < 50)
              {var counter$5=counter + 1 | 0;
               return menhir_goto_Type
                       (counter$5,menhir_env,menhir_stack$2,menhir_s$1,_1)}
             return caml_trampoline_return
                     (menhir_goto_Type,
                      [0,menhir_env,menhir_stack$2,menhir_s$1,_1])
            }
         if(menhir_env[4])throw [0,Assert_failure,_ei_];
         menhir_env[4] = 1;
         var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
         return menhir_errorcase(menhir_env,menhir_stack$1,menhir_s$0);
        default:return menhir_fail(0)}}
    function menhir_reduce29(counter,menhir_env,menhir_stack,menhir_s)
     {var v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_RcdType
                (counter$0,menhir_env,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_RcdType,[0,menhir_env,menhir_stack,menhir_s,v])}
    function menhir_run25(counter,menhir_env,menhir_stack,menhir_s,v)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s,v],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number" && 18 <= tok)
       {var menhir_env$1=menhir_discard(menhir_env$0),tok$0=menhir_env$1[3];
        if(typeof tok$0 === "number")
         switch(tok$0)
          {case 1:
            var _iS_=15;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run20(counter$4,menhir_env$1,menhir_stack$0,_iS_)}
            return caml_trampoline_return
                    (menhir_run20,[0,menhir_env$1,menhir_stack$0,_iS_]);
           case 2:
            var _iT_=15;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run21(counter$3,menhir_env$1,menhir_stack$0,_iT_)}
            return caml_trampoline_return
                    (menhir_run21,[0,menhir_env$1,menhir_stack$0,_iT_]);
           case 3:
            var _iU_=15;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run22(counter$2,menhir_env$1,menhir_stack$0,_iU_)}
            return caml_trampoline_return
                    (menhir_run22,[0,menhir_env$1,menhir_stack$0,_iU_]);
           case 8:
            var _iV_=15;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run23(counter$1,menhir_env$1,menhir_stack$0,_iV_)}
            return caml_trampoline_return
                    (menhir_run23,[0,menhir_env$1,menhir_stack$0,_iV_]);
           case 9:
            var _iW_=15;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run24(counter$0,menhir_env$1,menhir_stack$0,_iW_)}
            return caml_trampoline_return
                    (menhir_run24,[0,menhir_env$1,menhir_stack$0,_iW_])
           }
        if(menhir_env$1[4])throw [0,Assert_failure,_en_];
        menhir_env$1[4] = 1;
        return menhir_errorcase(menhir_env$1,menhir_stack$0,15)}
      if(menhir_env$0[4])throw [0,Assert_failure,_eo_];
      menhir_env$0[4] = 1;
      var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
      return menhir_errorcase(menhir_env$0,menhir_stack$1,menhir_s$0)}
    function menhir_goto_Params(counter,menhir_env,menhir_stack,menhir_s,v)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s,v$0=v;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0,v$0],
         switcher=menhir_s$0 - 4 | 0;
        if(! (2 < switcher >>> 0))
         switch(switcher)
          {case 0:
            var
             rest=menhir_stack$1[3],
             _iM_=menhir_stack$1[1],
             ty=_iM_[3],
             match=_iM_[1],
             id=match[3],
             menhir_s$1=match[2],
             menhir_stack$2=match[1],
             v$1=[0,[0,id,ty],rest],
             menhir_stack$0=menhir_stack$2,
             menhir_s$0=menhir_s$1,
             v$0=v$1;
            continue;
           case 1:break;
           default:
            if(menhir_env[4])throw [0,Assert_failure,_ep_];
            var tok=menhir_env[3];
            if(typeof tok === "number" && 5 === tok)
             {var
               menhir_env$0=menhir_discard(menhir_env),
               tok$0=menhir_env$0[3];
              if(typeof tok$0 === "number" && 18 <= tok$0)
               {var
                 menhir_env$1=menhir_discard(menhir_env$0),
                 tok$1=menhir_env$1[3];
                if(typeof tok$1 === "number")
                 switch(tok$1)
                  {case 1:
                    var _iN_=3;
                    if(counter < 50)
                     {var counter$4=counter + 1 | 0;
                      return menhir_run20
                              (counter$4,menhir_env$1,menhir_stack$1,_iN_)}
                    return caml_trampoline_return
                            (menhir_run20,[0,menhir_env$1,menhir_stack$1,_iN_]);
                   case 2:
                    var _iO_=3;
                    if(counter < 50)
                     {var counter$3=counter + 1 | 0;
                      return menhir_run21
                              (counter$3,menhir_env$1,menhir_stack$1,_iO_)}
                    return caml_trampoline_return
                            (menhir_run21,[0,menhir_env$1,menhir_stack$1,_iO_]);
                   case 3:
                    var _iP_=3;
                    if(counter < 50)
                     {var counter$2=counter + 1 | 0;
                      return menhir_run22
                              (counter$2,menhir_env$1,menhir_stack$1,_iP_)}
                    return caml_trampoline_return
                            (menhir_run22,[0,menhir_env$1,menhir_stack$1,_iP_]);
                   case 8:
                    var _iQ_=3;
                    if(counter < 50)
                     {var counter$1=counter + 1 | 0;
                      return menhir_run23
                              (counter$1,menhir_env$1,menhir_stack$1,_iQ_)}
                    return caml_trampoline_return
                            (menhir_run23,[0,menhir_env$1,menhir_stack$1,_iQ_]);
                   case 9:
                    var _iR_=3;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return menhir_run24
                              (counter$0,menhir_env$1,menhir_stack$1,_iR_)}
                    return caml_trampoline_return
                            (menhir_run24,[0,menhir_env$1,menhir_stack$1,_iR_])
                   }
                if(menhir_env$1[4])throw [0,Assert_failure,_eq_];
                menhir_env$1[4] = 1;
                return menhir_errorcase(menhir_env$1,menhir_stack$1,3)}
              if(menhir_env$0[4])throw [0,Assert_failure,_er_];
              menhir_env$0[4] = 1;
              var
               menhir_s$2=menhir_stack$1[2],
               menhir_stack$3=menhir_stack$1[1];
              return menhir_errorcase(menhir_env$0,menhir_stack$3,menhir_s$2)}
            if(menhir_env[4])throw [0,Assert_failure,_es_];
            menhir_env[4] = 1;
            var menhir_s$3=menhir_stack$1[2],menhir_stack$4=menhir_stack$1[1];
            return menhir_errorcase(menhir_env,menhir_stack$4,menhir_s$3)}
        return menhir_fail(0)}}
    function menhir_run14(counter,menhir_env,menhir_stack)
     {var menhir_env$0=menhir_discard(menhir_env),tok=menhir_env$0[3];
      if(typeof tok !== "number" && 2 === tok[0])
       {var
         v=tok[1],
         menhir_env$1=menhir_discard(menhir_env$0),
         _1=menhir_stack[3],
         menhir_s$0=menhir_stack[2],
         menhir_stack$1=menhir_stack[1],
         v$0=[8,_1,v];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return menhir_goto_AtomicExpr
                  (counter$0,menhir_env$1,menhir_stack$1,menhir_s$0,v$0)}
        return caml_trampoline_return
                (menhir_goto_AtomicExpr,
                 [0,menhir_env$1,menhir_stack$1,menhir_s$0,v$0])}
      if(menhir_env$0[4])throw [0,Assert_failure,_eL_];
      menhir_env$0[4] = 1;
      var menhir_s=menhir_stack[2],menhir_stack$0=menhir_stack[1];
      return menhir_errorcase(menhir_env$0,menhir_stack$0,menhir_s)}
    function menhir_reduce26(counter,menhir_env,menhir_stack,menhir_s)
     {var v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_RcdList
                (counter$0,menhir_env,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_RcdList,[0,menhir_env,menhir_stack,menhir_s,v])}
    function menhir_run5(counter,menhir_env,menhir_stack,menhir_s,v)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s,v],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number" && 18 <= tok)
       {var menhir_env$1=menhir_discard(menhir_env$0),tok$0=menhir_env$1[3];
        if(typeof tok$0 === "number")
         switch(tok$0)
          {case 8:
            var _iF_=22;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run3$0(counter$4,menhir_env$1,menhir_stack$0,_iF_)}
            return caml_trampoline_return
                    (menhir_run3$0,[0,menhir_env$1,menhir_stack$0,_iF_]);
           case 9:
            var _iG_=22;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run4$0(counter$3,menhir_env$1,menhir_stack$0,_iG_)}
            return caml_trampoline_return
                    (menhir_run4$0,[0,menhir_env$1,menhir_stack$0,_iG_]);
           case 12:
            var _iH_=22;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run7$0(counter$2,menhir_env$1,menhir_stack$0,_iH_)}
            return caml_trampoline_return
                    (menhir_run7$0,[0,menhir_env$1,menhir_stack$0,_iH_]);
           default:
            if(menhir_env$1[4])throw [0,Assert_failure,_eM_];
            menhir_env$1[4] = 1;
            return menhir_errorcase(menhir_env$1,menhir_stack$0,22)}
        else
         switch(tok$0[0])
          {case 0:
            var v$0=tok$0[1],_iI_=22;
            if(counter < 50)
             {var counter$6=counter + 1 | 0;
              return menhir_run1$0
                      (counter$6,menhir_env$1,menhir_stack$0,_iI_,v$0)}
            return caml_trampoline_return
                    (menhir_run1$0,[0,menhir_env$1,menhir_stack$0,_iI_,v$0]);
           case 1:
            var v$1=tok$0[1],_iJ_=22;
            if(counter < 50)
             {var counter$5=counter + 1 | 0;
              return menhir_run2$0
                      (counter$5,menhir_env$1,menhir_stack$0,_iJ_,v$1)}
            return caml_trampoline_return
                    (menhir_run2$0,[0,menhir_env$1,menhir_stack$0,_iJ_,v$1]);
           case 2:
            var v$2=tok$0[1],_iK_=22;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run8$0
                      (counter$1,menhir_env$1,menhir_stack$0,_iK_,v$2)}
            return caml_trampoline_return
                    (menhir_run8$0,[0,menhir_env$1,menhir_stack$0,_iK_,v$2]);
           default:
            var v$3=tok$0[1],_iL_=22;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run10$0
                      (counter$0,menhir_env$1,menhir_stack$0,_iL_,v$3)}
            return caml_trampoline_return
                    (menhir_run10$0,[0,menhir_env$1,menhir_stack$0,_iL_,v$3])}}
      if(menhir_env$0[4])throw [0,Assert_failure,_eN_];
      menhir_env$0[4] = 1;
      var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
      return menhir_errorcase(menhir_env$0,menhir_stack$1,menhir_s$0)}
    function menhir_reduce2(counter,menhir_env,menhir_stack,menhir_s)
     {var v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_ArgList
                (counter$0,menhir_env,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_ArgList,[0,menhir_env,menhir_stack,menhir_s,v])}
    function menhir_run20(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env);
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v$0)}
      return caml_trampoline_return
              (menhir_goto_AtomicType,
               [0,menhir_env$0,menhir_stack,menhir_s,v$0])}
    function menhir_run21(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env);
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v$1)}
      return caml_trampoline_return
              (menhir_goto_AtomicType,
               [0,menhir_env$0,menhir_stack,menhir_s,v$1])}
    function menhir_run22(counter,menhir_env,menhir_stack,menhir_s)
     {var menhir_env$0=menhir_discard(menhir_env);
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicType
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v$2)}
      return caml_trampoline_return
              (menhir_goto_AtomicType,
               [0,menhir_env$0,menhir_stack,menhir_s,v$2])}
    function menhir_run23(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         switch(tok)
          {case 1:
            var _iB_=17;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run20(counter$3,menhir_env$1,menhir_stack$1,_iB_)}
            return caml_trampoline_return
                    (menhir_run20,[0,menhir_env$1,menhir_stack$1,_iB_]);
           case 2:
            var _iC_=17;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run21(counter$2,menhir_env$1,menhir_stack$1,_iC_)}
            return caml_trampoline_return
                    (menhir_run21,[0,menhir_env$1,menhir_stack$1,_iC_]);
           case 3:
            var _iD_=17;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run22(counter$1,menhir_env$1,menhir_stack$1,_iD_)}
            return caml_trampoline_return
                    (menhir_run22,[0,menhir_env$1,menhir_stack$1,_iD_]);
           case 8:
            var
             menhir_env$0=menhir_env$1,
             menhir_stack$0=menhir_stack$1,
             menhir_s$0=17;
            continue;
           case 9:
            var _iE_=17;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run24(counter$0,menhir_env$1,menhir_stack$1,_iE_)}
            return caml_trampoline_return
                    (menhir_run24,[0,menhir_env$1,menhir_stack$1,_iE_])
           }
        if(menhir_env$1[4])throw [0,Assert_failure,_eO_];
        menhir_env$1[4] = 1;
        return menhir_errorcase(menhir_env$1,menhir_stack$1,17)}}
    function menhir_run24(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       {if(6 === tok)
         {var _iz_=16;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_reduce29(counter$1,menhir_env$0,menhir_stack$0,_iz_)}
          return caml_trampoline_return
                  (menhir_reduce29,[0,menhir_env$0,menhir_stack$0,_iz_])}}
      else
       if(2 === tok[0])
        {var v=tok[1],_iA_=16;
         if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return menhir_run25(counter$0,menhir_env$0,menhir_stack$0,_iA_,v)}
         return caml_trampoline_return
                 (menhir_run25,[0,menhir_env$0,menhir_stack$0,_iA_,v])}
      if(menhir_env$0[4])throw [0,Assert_failure,_eP_];
      menhir_env$0[4] = 1;
      return menhir_errorcase(menhir_env$0,menhir_stack$0,16)}
    function menhir_reduce23(counter,menhir_env,menhir_stack,menhir_s)
     {var v=0;
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_Params
                (counter$0,menhir_env,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_Params,[0,menhir_env,menhir_stack,menhir_s,v])}
    function menhir_run59(counter,menhir_env,menhir_stack,menhir_s,v)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s,v],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number" && 18 <= tok)
       {var menhir_env$1=menhir_discard(menhir_env$0),tok$0=menhir_env$1[3];
        if(typeof tok$0 === "number")
         switch(tok$0)
          {case 1:
            var _iu_=5;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run20(counter$4,menhir_env$1,menhir_stack$0,_iu_)}
            return caml_trampoline_return
                    (menhir_run20,[0,menhir_env$1,menhir_stack$0,_iu_]);
           case 2:
            var _iv_=5;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run21(counter$3,menhir_env$1,menhir_stack$0,_iv_)}
            return caml_trampoline_return
                    (menhir_run21,[0,menhir_env$1,menhir_stack$0,_iv_]);
           case 3:
            var _iw_=5;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run22(counter$2,menhir_env$1,menhir_stack$0,_iw_)}
            return caml_trampoline_return
                    (menhir_run22,[0,menhir_env$1,menhir_stack$0,_iw_]);
           case 8:
            var _ix_=5;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run23(counter$1,menhir_env$1,menhir_stack$0,_ix_)}
            return caml_trampoline_return
                    (menhir_run23,[0,menhir_env$1,menhir_stack$0,_ix_]);
           case 9:
            var _iy_=5;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run24(counter$0,menhir_env$1,menhir_stack$0,_iy_)}
            return caml_trampoline_return
                    (menhir_run24,[0,menhir_env$1,menhir_stack$0,_iy_])
           }
        if(menhir_env$1[4])throw [0,Assert_failure,_eQ_];
        menhir_env$1[4] = 1;
        return menhir_errorcase(menhir_env$1,menhir_stack$0,5)}
      if(menhir_env$0[4])throw [0,Assert_failure,_eR_];
      menhir_env$0[4] = 1;
      var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
      return menhir_errorcase(menhir_env$0,menhir_stack$1,menhir_s$0)}
    function menhir_goto_AtomicExpr
     (counter,menhir_env$4,menhir_stack$14,menhir_s$12,v$19)
     {var
       menhir_env$5=menhir_env$4,
       menhir_stack$15=menhir_stack$14,
       menhir_s$13=menhir_s$12,
       v$20=v$19;
      a:
      for(;;)
       {var menhir_stack$16=[0,menhir_stack$15,menhir_s$13,v$20];
        switch(menhir_s$13)
         {case 21:
           if(menhir_env$5[4])throw [0,Assert_failure,_eU_];
           var tok$10=menhir_env$5[3];
           if(typeof tok$10 === "number")
            {if(4 === tok$10)
              {var
                menhir_env$6=menhir_discard(menhir_env$5),
                tok$11=menhir_env$6[3];
               if(typeof tok$11 === "number")
                switch(tok$11)
                 {case 8:
                   var _in_=9;
                   if(counter < 50)
                    {var counter$20=counter + 1 | 0;
                     return menhir_run3$0
                             (counter$20,menhir_env$6,menhir_stack$16,_in_)}
                   return caml_trampoline_return
                           (menhir_run3$0,[0,menhir_env$6,menhir_stack$16,_in_]);
                  case 9:
                   var _io_=9;
                   if(counter < 50)
                    {var counter$16=counter + 1 | 0;
                     return menhir_run4$0
                             (counter$16,menhir_env$6,menhir_stack$16,_io_)}
                   return caml_trampoline_return
                           (menhir_run4$0,[0,menhir_env$6,menhir_stack$16,_io_]);
                  case 12:
                   var _ip_=9;
                   if(counter < 50)
                    {var counter$12=counter + 1 | 0;
                     return menhir_run7$0
                             (counter$12,menhir_env$6,menhir_stack$16,_ip_)}
                   return caml_trampoline_return
                           (menhir_run7$0,[0,menhir_env$6,menhir_stack$16,_ip_]);
                  default:
                   if(menhir_env$6[4])throw [0,Assert_failure,_eV_];
                   menhir_env$6[4] = 1;
                   return menhir_errorcase(menhir_env$6,menhir_stack$16,9)}
               else
                switch(tok$11[0])
                 {case 0:
                   var v$21=tok$11[1],_iq_=9;
                   if(counter < 50)
                    {var counter$28=counter + 1 | 0;
                     return menhir_run1$0
                             (counter$28,menhir_env$6,menhir_stack$16,_iq_,v$21)}
                   return caml_trampoline_return
                           (menhir_run1$0,[0,menhir_env$6,menhir_stack$16,_iq_,v$21]);
                  case 1:
                   var v$22=tok$11[1],_ir_=9;
                   if(counter < 50)
                    {var counter$24=counter + 1 | 0;
                     return menhir_run2$0
                             (counter$24,menhir_env$6,menhir_stack$16,_ir_,v$22)}
                   return caml_trampoline_return
                           (menhir_run2$0,[0,menhir_env$6,menhir_stack$16,_ir_,v$22]);
                  case 2:
                   var v$23=tok$11[1],_is_=9;
                   if(counter < 50)
                    {var counter$8=counter + 1 | 0;
                     return menhir_run8$0
                             (counter$8,menhir_env$6,menhir_stack$16,_is_,v$23)}
                   return caml_trampoline_return
                           (menhir_run8$0,[0,menhir_env$6,menhir_stack$16,_is_,v$23]);
                  default:
                   var v$24=tok$11[1],_it_=9;
                   if(counter < 50)
                    {var counter$3=counter + 1 | 0;
                     return menhir_run10$0
                             (counter$3,menhir_env$6,menhir_stack$16,_it_,v$24)}
                   return caml_trampoline_return
                           (menhir_run10$0,[0,menhir_env$6,menhir_stack$16,_it_,v$24])}}
             if(16 === tok$10)
              {if(counter < 50)
                {var counter$32=counter + 1 | 0;
                 return menhir_run14(counter$32,menhir_env$5,menhir_stack$16)}
               return caml_trampoline_return
                       (menhir_run14,[0,menhir_env$5,menhir_stack$16])}}
           if(menhir_env$5[4])throw [0,Assert_failure,_eW_];
           menhir_env$5[4] = 1;
           var
            menhir_s$16=menhir_stack$16[2],
            menhir_stack$19=menhir_stack$16[1];
           return menhir_errorcase(menhir_env$5,menhir_stack$19,menhir_s$16);
          case 0:
          case 1:
          case 2:
          case 8:
          case 9:
          case 19:
          case 20:
          case 22:
          case 24:
          case 25:
           if(menhir_env$5[4])throw [0,Assert_failure,_eS_];
           var tok$9=menhir_env$5[3];
           if(typeof tok$9 === "number")
            {var switch$0=0;
             if(17 <= tok$9)
              {if(! (18 <= tok$9))switch$0 = 1}
             else
              if(5 <= tok$9)
               {var switcher=tok$9 - 5 | 0;
                switch(switcher)
                 {case 11:
                   if(counter < 50)
                    {var counter$33=counter + 1 | 0;
                     return menhir_run14(counter$33,menhir_env$5,menhir_stack$16)}
                   return caml_trampoline_return
                           (menhir_run14,[0,menhir_env$5,menhir_stack$16]);
                  case 0:
                  case 1:
                  case 9:
                  case 10:switch$0 = 1;break
                  }}
             if(switch$0)
              {var
                _1$0=menhir_stack$16[3],
                menhir_s$15=menhir_stack$16[2],
                menhir_stack$18=menhir_stack$16[1],
                menhir_stack=menhir_stack$18,
                menhir_s=menhir_s$15,
                v=_1$0;
               for(;;)
                {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
                 switch(menhir_s)
                  {case 2:
                    if(menhir_env$5[4])throw [0,Assert_failure,_ew_];
                    var tok$0=menhir_env$5[3];
                    if(typeof tok$0 === "number" && 6 === tok$0)
                     {var
                       menhir_env=menhir_discard(menhir_env$5),
                       e$0=menhir_stack$0[3],
                       _hV_=menhir_stack$0[1],
                       ty=_hV_[3],
                       _hW_=_hV_[1],
                       p=_hW_[3],
                       _hX_=_hW_[1],
                       name=_hX_[2],
                       match=_hX_[1],
                       menhir_s$2=match[2],
                       menhir_stack$3=match[1],
                       v$1=[0,name,p,ty,e$0],
                       menhir_stack$4=[0,menhir_stack$3,menhir_s$2,v$1];
                      if(menhir_env[4])throw [0,Assert_failure,_ex_];
                      var tok$1=menhir_env[3];
                      if(typeof tok$1 === "number")
                       switch(tok$1)
                        {case 8:
                          var _hY_=1;
                          if(counter < 50)
                           {var counter$17=counter + 1 | 0;
                            return menhir_run3$0
                                    (counter$17,menhir_env,menhir_stack$4,_hY_)}
                          return caml_trampoline_return
                                  (menhir_run3$0,[0,menhir_env,menhir_stack$4,_hY_]);
                         case 9:
                          var _hZ_=1;
                          if(counter < 50)
                           {var counter$13=counter + 1 | 0;
                            return menhir_run4$0
                                    (counter$13,menhir_env,menhir_stack$4,_hZ_)}
                          return caml_trampoline_return
                                  (menhir_run4$0,[0,menhir_env,menhir_stack$4,_hZ_]);
                         case 12:
                          var _h0_=1;
                          if(counter < 50)
                           {var counter$9=counter + 1 | 0;
                            return menhir_run7$0
                                    (counter$9,menhir_env,menhir_stack$4,_h0_)}
                          return caml_trampoline_return
                                  (menhir_run7$0,[0,menhir_env,menhir_stack$4,_h0_]);
                         case 13:
                          var _h1_=1;
                          if(counter < 50)
                           {var counter$4=counter + 1 | 0;
                            return menhir_run56$0
                                    (counter$4,menhir_env,menhir_stack$4,_h1_)}
                          return caml_trampoline_return
                                  (menhir_run56$0,[0,menhir_env,menhir_stack$4,_h1_]);
                         case 14:return menhir_run71(menhir_env,menhir_stack$4,1);
                         default:
                          if(menhir_env[4])throw [0,Assert_failure,_ey_];
                          menhir_env[4] = 1;
                          return menhir_errorcase(menhir_env,menhir_stack$4,1)}
                      else
                       switch(tok$1[0])
                        {case 0:
                          var v$2=tok$1[1],_h2_=1;
                          if(counter < 50)
                           {var counter$25=counter + 1 | 0;
                            return menhir_run1$0
                                    (counter$25,menhir_env,menhir_stack$4,_h2_,v$2)}
                          return caml_trampoline_return
                                  (menhir_run1$0,[0,menhir_env,menhir_stack$4,_h2_,v$2]);
                         case 1:
                          var v$3=tok$1[1],_h3_=1;
                          if(counter < 50)
                           {var counter$21=counter + 1 | 0;
                            return menhir_run2$0
                                    (counter$21,menhir_env,menhir_stack$4,_h3_,v$3)}
                          return caml_trampoline_return
                                  (menhir_run2$0,[0,menhir_env,menhir_stack$4,_h3_,v$3]);
                         case 2:
                          var v$4=tok$1[1],_h4_=1;
                          if(counter < 50)
                           {var counter$5=counter + 1 | 0;
                            return menhir_run8$0
                                    (counter$5,menhir_env,menhir_stack$4,_h4_,v$4)}
                          return caml_trampoline_return
                                  (menhir_run8$0,[0,menhir_env,menhir_stack$4,_h4_,v$4]);
                         default:
                          var v$5=tok$1[1],_h5_=1;
                          if(counter < 50)
                           {var counter$0=counter + 1 | 0;
                            return menhir_run10$0
                                    (counter$0,menhir_env,menhir_stack$4,_h5_,v$5)}
                          return caml_trampoline_return
                                  (menhir_run10$0,[0,menhir_env,menhir_stack$4,_h5_,v$5])}}
                    if(menhir_env$5[4])throw [0,Assert_failure,_ez_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$3=menhir_stack$0[2],
                     menhir_stack$5=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$5,menhir_s$3);
                   case 8:
                    var
                     _6=menhir_stack$0[3],
                     _h6_=menhir_stack$0[1],
                     _4=_h6_[3],
                     _h7_=_h6_[1],
                     _2=_h7_[3],
                     match$0=_h7_[1],
                     menhir_s$4=match$0[2],
                     menhir_stack$6=match$0[1],
                     v$6=[6,_2,_4,_6],
                     menhir_stack=menhir_stack$6,
                     menhir_s=menhir_s$4,
                     v=v$6;
                    continue;
                   case 9:
                    if(menhir_env$5[4])throw [0,Assert_failure,_eA_];
                    var tok$2=menhir_env$5[3];
                    if(typeof tok$2 === "number" && 15 === tok$2)
                     {var
                       menhir_env$0=menhir_discard(menhir_env$5),
                       tok$3=menhir_env$0[3];
                      if(typeof tok$3 === "number")
                       switch(tok$3)
                        {case 8:
                          var _h8_=8;
                          if(counter < 50)
                           {var counter$18=counter + 1 | 0;
                            return menhir_run3$0
                                    (counter$18,menhir_env$0,menhir_stack$0,_h8_)}
                          return caml_trampoline_return
                                  (menhir_run3$0,[0,menhir_env$0,menhir_stack$0,_h8_]);
                         case 9:
                          var _h9_=8;
                          if(counter < 50)
                           {var counter$14=counter + 1 | 0;
                            return menhir_run4$0
                                    (counter$14,menhir_env$0,menhir_stack$0,_h9_)}
                          return caml_trampoline_return
                                  (menhir_run4$0,[0,menhir_env$0,menhir_stack$0,_h9_]);
                         case 12:
                          var _h__=8;
                          if(counter < 50)
                           {var counter$10=counter + 1 | 0;
                            return menhir_run7$0
                                    (counter$10,menhir_env$0,menhir_stack$0,_h__)}
                          return caml_trampoline_return
                                  (menhir_run7$0,[0,menhir_env$0,menhir_stack$0,_h__]);
                         default:
                          if(menhir_env$0[4])throw [0,Assert_failure,_eB_];
                          menhir_env$0[4] = 1;
                          return menhir_errorcase(menhir_env$0,menhir_stack$0,8)}
                      else
                       switch(tok$3[0])
                        {case 0:
                          var v$7=tok$3[1],_h$_=8;
                          if(counter < 50)
                           {var counter$26=counter + 1 | 0;
                            return menhir_run1$0
                                    (counter$26,menhir_env$0,menhir_stack$0,_h$_,v$7)}
                          return caml_trampoline_return
                                  (menhir_run1$0,[0,menhir_env$0,menhir_stack$0,_h$_,v$7]);
                         case 1:
                          var v$8=tok$3[1],_ia_=8;
                          if(counter < 50)
                           {var counter$22=counter + 1 | 0;
                            return menhir_run2$0
                                    (counter$22,menhir_env$0,menhir_stack$0,_ia_,v$8)}
                          return caml_trampoline_return
                                  (menhir_run2$0,[0,menhir_env$0,menhir_stack$0,_ia_,v$8]);
                         case 2:
                          var v$9=tok$3[1],_ib_=8;
                          if(counter < 50)
                           {var counter$6=counter + 1 | 0;
                            return menhir_run8$0
                                    (counter$6,menhir_env$0,menhir_stack$0,_ib_,v$9)}
                          return caml_trampoline_return
                                  (menhir_run8$0,[0,menhir_env$0,menhir_stack$0,_ib_,v$9]);
                         default:
                          var v$10=tok$3[1],_ic_=8;
                          if(counter < 50)
                           {var counter$1=counter + 1 | 0;
                            return menhir_run10$0
                                    (counter$1,menhir_env$0,menhir_stack$0,_ic_,v$10)}
                          return caml_trampoline_return
                                  (menhir_run10$0,[0,menhir_env$0,menhir_stack$0,_ic_,v$10])}}
                    if(menhir_env$5[4])throw [0,Assert_failure,_eC_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$5=menhir_stack$0[2],
                     menhir_stack$7=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$7,menhir_s$5);
                   case 22:
                    if(menhir_env$5[4])throw [0,Assert_failure,_eG_];
                    var tok$6=menhir_env$5[3];
                    if(typeof tok$6 === "number")
                     {if(6 === tok$6)
                       {var
                         _3=menhir_stack$0[3],
                         match$1=menhir_stack$0[1],
                         _1=match$1[3],
                         menhir_s$8=match$1[2],
                         menhir_stack$10=match$1[1],
                         v$16=[0,[0,_1,_3],0];
                        if(counter < 50)
                         {var counter$35=counter + 1 | 0;
                          return menhir_goto_RcdList
                                  (counter$35,menhir_env$5,menhir_stack$10,menhir_s$8,v$16)}
                        return caml_trampoline_return
                                (menhir_goto_RcdList,
                                 [0,menhir_env$5,menhir_stack$10,menhir_s$8,v$16])}
                      if(17 === tok$6)
                       {var
                         menhir_env$2=menhir_discard(menhir_env$5),
                         tok$7=menhir_env$2[3];
                        if(typeof tok$7 === "number")
                         {if(6 === tok$7)
                           {var _il_=7;
                            if(counter < 50)
                             {var counter$31=counter + 1 | 0;
                              return menhir_reduce26
                                      (counter$31,menhir_env$2,menhir_stack$0,_il_)}
                            return caml_trampoline_return
                                    (menhir_reduce26,[0,menhir_env$2,menhir_stack$0,_il_])}}
                        else
                         if(2 === tok$7[0])
                          {var v$17=tok$7[1],_im_=7;
                           if(counter < 50)
                            {var counter$30=counter + 1 | 0;
                             return menhir_run5
                                     (counter$30,menhir_env$2,menhir_stack$0,_im_,v$17)}
                           return caml_trampoline_return
                                   (menhir_run5,[0,menhir_env$2,menhir_stack$0,_im_,v$17])}
                        if(menhir_env$2[4])throw [0,Assert_failure,_eH_];
                        menhir_env$2[4] = 1;
                        return menhir_errorcase(menhir_env$2,menhir_stack$0,7)}}
                    if(menhir_env$5[4])throw [0,Assert_failure,_eI_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$9=menhir_stack$0[2],
                     menhir_stack$11=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$11,menhir_s$9);
                   case 24:
                    if(menhir_env$5[4])throw [0,Assert_failure,_eJ_];
                    var tok$8=menhir_env$5[3];
                    if(typeof tok$8 === "number" && 5 === tok$8)
                     {var
                       menhir_env$3=menhir_discard(menhir_env$5),
                       v$18=menhir_stack$0[3],
                       match$2=menhir_stack$0[1],
                       menhir_s$10=match$2[2],
                       menhir_stack$12=match$2[1],
                       menhir_env$5=menhir_env$3,
                       menhir_stack$15=menhir_stack$12,
                       menhir_s$13=menhir_s$10,
                       v$20=v$18;
                      continue a}
                    if(menhir_env$5[4])throw [0,Assert_failure,_eK_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$11=menhir_stack$0[2],
                     menhir_stack$13=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$13,menhir_s$11);
                   case 19:
                   case 20:
                    if(menhir_env$5[4])throw [0,Assert_failure,_eD_];
                    var tok$4=menhir_env$5[3];
                    if(typeof tok$4 === "number")
                     {if(5 === tok$4)
                       {var
                         expr=menhir_stack$0[3],
                         menhir_s$6=menhir_stack$0[2],
                         menhir_stack$8=menhir_stack$0[1],
                         v$11=[0,expr,0];
                        if(counter < 50)
                         {var counter$34=counter + 1 | 0;
                          return menhir_goto_ArgList
                                  (counter$34,menhir_env$5,menhir_stack$8,menhir_s$6,v$11)}
                        return caml_trampoline_return
                                (menhir_goto_ArgList,
                                 [0,menhir_env$5,menhir_stack$8,menhir_s$6,v$11])}
                      if(17 === tok$4)
                       {var
                         menhir_env$1=menhir_discard(menhir_env$5),
                         tok$5=menhir_env$1[3];
                        if(typeof tok$5 === "number")
                         switch(tok$5)
                          {case 5:
                            var _id_=19;
                            if(counter < 50)
                             {var counter$29=counter + 1 | 0;
                              return menhir_reduce2
                                      (counter$29,menhir_env$1,menhir_stack$0,_id_)}
                            return caml_trampoline_return
                                    (menhir_reduce2,[0,menhir_env$1,menhir_stack$0,_id_]);
                           case 8:
                            var _ie_=19;
                            if(counter < 50)
                             {var counter$19=counter + 1 | 0;
                              return menhir_run3$0
                                      (counter$19,menhir_env$1,menhir_stack$0,_ie_)}
                            return caml_trampoline_return
                                    (menhir_run3$0,[0,menhir_env$1,menhir_stack$0,_ie_]);
                           case 9:
                            var _if_=19;
                            if(counter < 50)
                             {var counter$15=counter + 1 | 0;
                              return menhir_run4$0
                                      (counter$15,menhir_env$1,menhir_stack$0,_if_)}
                            return caml_trampoline_return
                                    (menhir_run4$0,[0,menhir_env$1,menhir_stack$0,_if_]);
                           case 12:
                            var _ig_=19;
                            if(counter < 50)
                             {var counter$11=counter + 1 | 0;
                              return menhir_run7$0
                                      (counter$11,menhir_env$1,menhir_stack$0,_ig_)}
                            return caml_trampoline_return
                                    (menhir_run7$0,[0,menhir_env$1,menhir_stack$0,_ig_]);
                           default:
                            if(menhir_env$1[4])throw [0,Assert_failure,_eE_];
                            menhir_env$1[4] = 1;
                            return menhir_errorcase(menhir_env$1,menhir_stack$0,19)}
                        else
                         switch(tok$5[0])
                          {case 0:
                            var v$12=tok$5[1],_ih_=19;
                            if(counter < 50)
                             {var counter$27=counter + 1 | 0;
                              return menhir_run1$0
                                      (counter$27,menhir_env$1,menhir_stack$0,_ih_,v$12)}
                            return caml_trampoline_return
                                    (menhir_run1$0,[0,menhir_env$1,menhir_stack$0,_ih_,v$12]);
                           case 1:
                            var v$13=tok$5[1],_ii_=19;
                            if(counter < 50)
                             {var counter$23=counter + 1 | 0;
                              return menhir_run2$0
                                      (counter$23,menhir_env$1,menhir_stack$0,_ii_,v$13)}
                            return caml_trampoline_return
                                    (menhir_run2$0,[0,menhir_env$1,menhir_stack$0,_ii_,v$13]);
                           case 2:
                            var v$14=tok$5[1],_ij_=19;
                            if(counter < 50)
                             {var counter$7=counter + 1 | 0;
                              return menhir_run8$0
                                      (counter$7,menhir_env$1,menhir_stack$0,_ij_,v$14)}
                            return caml_trampoline_return
                                    (menhir_run8$0,[0,menhir_env$1,menhir_stack$0,_ij_,v$14]);
                           default:
                            var v$15=tok$5[1],_ik_=19;
                            if(counter < 50)
                             {var counter$2=counter + 1 | 0;
                              return menhir_run10$0
                                      (counter$2,menhir_env$1,menhir_stack$0,_ik_,v$15)}
                            return caml_trampoline_return
                                    (menhir_run10$0,[0,menhir_env$1,menhir_stack$0,_ik_,v$15])}}}
                    if(menhir_env$5[4])throw [0,Assert_failure,_eF_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$7=menhir_stack$0[2],
                     menhir_stack$9=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$9,menhir_s$7);
                   case 0:
                   case 1:
                   case 25:
                    if(menhir_env$5[4])throw [0,Assert_failure,_eu_];
                    var tok=menhir_env$5[3];
                    if(typeof tok === "number" && 14 === tok)
                     {var
                       e=menhir_stack$0[3],
                       menhir_s$0=menhir_stack$0[2],
                       menhir_stack$1=menhir_stack$0[1],
                       v$0=[0,0,[0,e]];
                      return menhir_goto_program
                              (menhir_env$5,menhir_stack$1,menhir_s$0,v$0)}
                    if(menhir_env$5[4])throw [0,Assert_failure,_ev_];
                    menhir_env$5[4] = 1;
                    var
                     menhir_s$1=menhir_stack$0[2],
                     menhir_stack$2=menhir_stack$0[1];
                    return menhir_errorcase
                            (menhir_env$5,menhir_stack$2,menhir_s$1);
                   default:return menhir_fail(0)}}}}
           if(menhir_env$5[4])throw [0,Assert_failure,_eT_];
           menhir_env$5[4] = 1;
           var
            menhir_s$14=menhir_stack$16[2],
            menhir_stack$17=menhir_stack$16[1];
           return menhir_errorcase(menhir_env$5,menhir_stack$17,menhir_s$14);
          default:return menhir_fail(0)}}}
    function menhir_run1$0(counter,menhir_env,menhir_stack,menhir_s,_1)
     {var menhir_env$0=menhir_discard(menhir_env),v=[2,_1];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AtomicExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run2$0(counter,menhir_env,menhir_stack,menhir_s,_1)
     {var menhir_env$0=menhir_discard(menhir_env),v=[1,_1];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AtomicExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run3$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         switch(tok)
          {case 8:
            var
             menhir_env$0=menhir_env$1,
             menhir_stack$0=menhir_stack$1,
             menhir_s$0=24;
            continue;
           case 9:
            var _hP_=24;
            if(counter < 50)
             {var counter$3=counter + 1 | 0;
              return menhir_run4$0(counter$3,menhir_env$1,menhir_stack$1,_hP_)}
            return caml_trampoline_return
                    (menhir_run4$0,[0,menhir_env$1,menhir_stack$1,_hP_]);
           case 12:
            var _hQ_=24;
            if(counter < 50)
             {var counter$2=counter + 1 | 0;
              return menhir_run7$0(counter$2,menhir_env$1,menhir_stack$1,_hQ_)}
            return caml_trampoline_return
                    (menhir_run7$0,[0,menhir_env$1,menhir_stack$1,_hQ_]);
           default:
            if(menhir_env$1[4])throw [0,Assert_failure,_eX_];
            menhir_env$1[4] = 1;
            return menhir_errorcase(menhir_env$1,menhir_stack$1,24)}
        else
         switch(tok[0])
          {case 0:
            var v=tok[1],_hR_=24;
            if(counter < 50)
             {var counter$5=counter + 1 | 0;
              return menhir_run1$0
                      (counter$5,menhir_env$1,menhir_stack$1,_hR_,v)}
            return caml_trampoline_return
                    (menhir_run1$0,[0,menhir_env$1,menhir_stack$1,_hR_,v]);
           case 1:
            var v$0=tok[1],_hS_=24;
            if(counter < 50)
             {var counter$4=counter + 1 | 0;
              return menhir_run2$0
                      (counter$4,menhir_env$1,menhir_stack$1,_hS_,v$0)}
            return caml_trampoline_return
                    (menhir_run2$0,[0,menhir_env$1,menhir_stack$1,_hS_,v$0]);
           case 2:
            var v$1=tok[1],_hT_=24;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return menhir_run8$0
                      (counter$1,menhir_env$1,menhir_stack$1,_hT_,v$1)}
            return caml_trampoline_return
                    (menhir_run8$0,[0,menhir_env$1,menhir_stack$1,_hT_,v$1]);
           default:
            var v$2=tok[1],_hU_=24;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return menhir_run10$0
                      (counter$0,menhir_env$1,menhir_stack$1,_hU_,v$2)}
            return caml_trampoline_return
                    (menhir_run10$0,[0,menhir_env$1,menhir_stack$1,_hU_,v$2])}}}
    function menhir_run4$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       {if(6 === tok)
         {var _hN_=23;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_reduce26(counter$1,menhir_env$0,menhir_stack$0,_hN_)}
          return caml_trampoline_return
                  (menhir_reduce26,[0,menhir_env$0,menhir_stack$0,_hN_])}}
      else
       if(2 === tok[0])
        {var v=tok[1],_hO_=23;
         if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return menhir_run5(counter$0,menhir_env$0,menhir_stack$0,_hO_,v)}
         return caml_trampoline_return
                 (menhir_run5,[0,menhir_env$0,menhir_stack$0,_hO_,v])}
      if(menhir_env$0[4])throw [0,Assert_failure,_eY_];
      menhir_env$0[4] = 1;
      return menhir_errorcase(menhir_env$0,menhir_stack$0,23)}
    function menhir_run7$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 8:
          var _hH_=21;
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return menhir_run3$0(counter$3,menhir_env$0,menhir_stack$0,_hH_)}
          return caml_trampoline_return
                  (menhir_run3$0,[0,menhir_env$0,menhir_stack$0,_hH_]);
         case 9:
          var _hI_=21;
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return menhir_run4$0(counter$2,menhir_env$0,menhir_stack$0,_hI_)}
          return caml_trampoline_return
                  (menhir_run4$0,[0,menhir_env$0,menhir_stack$0,_hI_]);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_eZ_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack$0,21)}
      else
       switch(tok[0])
        {case 0:
          var v=tok[1],_hJ_=21;
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return menhir_run1$0(counter$5,menhir_env$0,menhir_stack$0,_hJ_,v)}
          return caml_trampoline_return
                  (menhir_run1$0,[0,menhir_env$0,menhir_stack$0,_hJ_,v]);
         case 1:
          var v$0=tok[1],_hK_=21;
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return menhir_run2$0
                    (counter$4,menhir_env$0,menhir_stack$0,_hK_,v$0)}
          return caml_trampoline_return
                  (menhir_run2$0,[0,menhir_env$0,menhir_stack$0,_hK_,v$0]);
         case 2:
          var v$1=tok[1],_hL_=21;
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return menhir_run8$0
                    (counter$1,menhir_env$0,menhir_stack$0,_hL_,v$1)}
          return caml_trampoline_return
                  (menhir_run8$0,[0,menhir_env$0,menhir_stack$0,_hL_,v$1]);
         default:
          var v$2=tok[1],_hM_=21;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return menhir_run10$0
                    (counter$0,menhir_env$0,menhir_stack$0,_hM_,v$2)}
          return caml_trampoline_return
                  (menhir_run10$0,[0,menhir_env$0,menhir_stack$0,_hM_,v$2])}}
    function menhir_run8$0(counter,menhir_env,menhir_stack,menhir_s,v)
     {var
       menhir_env$0=menhir_env,
       menhir_stack$0=menhir_stack,
       menhir_s$0=menhir_s,
       v$0=v;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0,v$0],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok=menhir_env$1[3];
        if(typeof tok === "number")
         switch(tok)
          {case 8:
            var
             menhir_env$2=menhir_discard(menhir_env$1),
             tok$0=menhir_env$2[3];
            if(typeof tok$0 === "number")
             switch(tok$0)
              {case 5:
                var _hv_=20;
                if(counter < 50)
                 {var counter$13=counter + 1 | 0;
                  return menhir_reduce2
                          (counter$13,menhir_env$2,menhir_stack$1,_hv_)}
                return caml_trampoline_return
                        (menhir_reduce2,[0,menhir_env$2,menhir_stack$1,_hv_]);
               case 8:
                var _hw_=20;
                if(counter < 50)
                 {var counter$3=counter + 1 | 0;
                  return menhir_run3$0
                          (counter$3,menhir_env$2,menhir_stack$1,_hw_)}
                return caml_trampoline_return
                        (menhir_run3$0,[0,menhir_env$2,menhir_stack$1,_hw_]);
               case 9:
                var _hx_=20;
                if(counter < 50)
                 {var counter$2=counter + 1 | 0;
                  return menhir_run4$0
                          (counter$2,menhir_env$2,menhir_stack$1,_hx_)}
                return caml_trampoline_return
                        (menhir_run4$0,[0,menhir_env$2,menhir_stack$1,_hx_]);
               case 12:
                var _hy_=20;
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return menhir_run7$0
                          (counter$1,menhir_env$2,menhir_stack$1,_hy_)}
                return caml_trampoline_return
                        (menhir_run7$0,[0,menhir_env$2,menhir_stack$1,_hy_]);
               default:
                if(menhir_env$2[4])throw [0,Assert_failure,_e1_];
                menhir_env$2[4] = 1;
                return menhir_errorcase(menhir_env$2,menhir_stack$1,20)}
            else
             switch(tok$0[0])
              {case 0:
                var v$2=tok$0[1],_hz_=20;
                if(counter < 50)
                 {var counter$5=counter + 1 | 0;
                  return menhir_run1$0
                          (counter$5,menhir_env$2,menhir_stack$1,_hz_,v$2)}
                return caml_trampoline_return
                        (menhir_run1$0,[0,menhir_env$2,menhir_stack$1,_hz_,v$2]);
               case 1:
                var v$3=tok$0[1],_hA_=20;
                if(counter < 50)
                 {var counter$4=counter + 1 | 0;
                  return menhir_run2$0
                          (counter$4,menhir_env$2,menhir_stack$1,_hA_,v$3)}
                return caml_trampoline_return
                        (menhir_run2$0,[0,menhir_env$2,menhir_stack$1,_hA_,v$3]);
               case 2:
                var
                 v$4=tok$0[1],
                 menhir_env$0=menhir_env$2,
                 menhir_stack$0=menhir_stack$1,
                 menhir_s$0=20,
                 v$0=v$4;
                continue;
               default:
                var v$5=tok$0[1],_hB_=20;
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return menhir_run10$0
                          (counter$0,menhir_env$2,menhir_stack$1,_hB_,v$5)}
                return caml_trampoline_return
                        (menhir_run10$0,[0,menhir_env$2,menhir_stack$1,_hB_,v$5])}
           case 10:
            var
             menhir_env$3=menhir_discard(menhir_env$1),
             tok$1=menhir_env$3[3];
            if(typeof tok$1 === "number")
             switch(tok$1)
              {case 1:
                var _hC_=18;
                if(counter < 50)
                 {var counter$12=counter + 1 | 0;
                  return menhir_run20
                          (counter$12,menhir_env$3,menhir_stack$1,_hC_)}
                return caml_trampoline_return
                        (menhir_run20,[0,menhir_env$3,menhir_stack$1,_hC_]);
               case 2:
                var _hD_=18;
                if(counter < 50)
                 {var counter$11=counter + 1 | 0;
                  return menhir_run21
                          (counter$11,menhir_env$3,menhir_stack$1,_hD_)}
                return caml_trampoline_return
                        (menhir_run21,[0,menhir_env$3,menhir_stack$1,_hD_]);
               case 3:
                var _hE_=18;
                if(counter < 50)
                 {var counter$10=counter + 1 | 0;
                  return menhir_run22
                          (counter$10,menhir_env$3,menhir_stack$1,_hE_)}
                return caml_trampoline_return
                        (menhir_run22,[0,menhir_env$3,menhir_stack$1,_hE_]);
               case 8:
                var _hF_=18;
                if(counter < 50)
                 {var counter$9=counter + 1 | 0;
                  return menhir_run23
                          (counter$9,menhir_env$3,menhir_stack$1,_hF_)}
                return caml_trampoline_return
                        (menhir_run23,[0,menhir_env$3,menhir_stack$1,_hF_]);
               case 9:
                var _hG_=18;
                if(counter < 50)
                 {var counter$8=counter + 1 | 0;
                  return menhir_run24
                          (counter$8,menhir_env$3,menhir_stack$1,_hG_)}
                return caml_trampoline_return
                        (menhir_run24,[0,menhir_env$3,menhir_stack$1,_hG_])
               }
            if(menhir_env$3[4])throw [0,Assert_failure,_e2_];
            menhir_env$3[4] = 1;
            return menhir_errorcase(menhir_env$3,menhir_stack$1,18);
           case 11:
            var
             menhir_env$4=menhir_discard(menhir_env$1),
             tok$2=menhir_env$4[3];
            if(typeof tok$2 !== "number" && 2 === tok$2[0])
             {var
               v$6=tok$2[1],
               menhir_env$5=menhir_discard(menhir_env$4),
               _1$0=menhir_stack$1[3],
               menhir_s$4=menhir_stack$1[2],
               menhir_stack$5=menhir_stack$1[1],
               v$7=[9,_1$0,[0,v$6]];
              if(counter < 50)
               {var counter$6=counter + 1 | 0;
                return menhir_goto_AtomicExpr
                        (counter$6,menhir_env$5,menhir_stack$5,menhir_s$4,v$7)}
              return caml_trampoline_return
                      (menhir_goto_AtomicExpr,
                       [0,menhir_env$5,menhir_stack$5,menhir_s$4,v$7])}
            if(menhir_env$4[4])throw [0,Assert_failure,_e3_];
            menhir_env$4[4] = 1;
            var menhir_s$3=menhir_stack$1[2],menhir_stack$4=menhir_stack$1[1];
            return menhir_errorcase(menhir_env$4,menhir_stack$4,menhir_s$3);
           case 4:
           case 5:
           case 6:
           case 14:
           case 15:
           case 16:
           case 17:
            var
             _1=menhir_stack$1[3],
             menhir_s$2=menhir_stack$1[2],
             menhir_stack$3=menhir_stack$1[1],
             v$1=[0,_1];
            if(counter < 50)
             {var counter$7=counter + 1 | 0;
              return menhir_goto_AtomicExpr
                      (counter$7,menhir_env$1,menhir_stack$3,menhir_s$2,v$1)}
            return caml_trampoline_return
                    (menhir_goto_AtomicExpr,
                     [0,menhir_env$1,menhir_stack$3,menhir_s$2,v$1])
           }
        if(menhir_env$1[4])throw [0,Assert_failure,_e0_];
        menhir_env$1[4] = 1;
        var menhir_s$1=menhir_stack$1[2],menhir_stack$2=menhir_stack$1[1];
        return menhir_errorcase(menhir_env$1,menhir_stack$2,menhir_s$1)}}
    function menhir_run56$0(counter,menhir_env,menhir_stack,menhir_s)
     {var
       menhir_stack$0=[0,menhir_stack,menhir_s],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok !== "number" && 2 === tok[0])
       {var
         v=tok[1],
         menhir_stack$2=[0,menhir_stack$0,v],
         menhir_env$1=menhir_discard(menhir_env$0),
         tok$0=menhir_env$1[3];
        if(typeof tok$0 === "number" && 8 === tok$0)
         {var menhir_env$2=menhir_discard(menhir_env$1),tok$1=menhir_env$2[3];
          if(typeof tok$1 === "number")
           {if(5 === tok$1)
             {var _ht_=6;
              if(counter < 50)
               {var counter$1=counter + 1 | 0;
                return menhir_reduce23
                        (counter$1,menhir_env$2,menhir_stack$2,_ht_)}
              return caml_trampoline_return
                      (menhir_reduce23,[0,menhir_env$2,menhir_stack$2,_ht_])}}
          else
           if(2 === tok$1[0])
            {var v$0=tok$1[1],_hu_=6;
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return menhir_run59
                       (counter$0,menhir_env$2,menhir_stack$2,_hu_,v$0)}
             return caml_trampoline_return
                     (menhir_run59,[0,menhir_env$2,menhir_stack$2,_hu_,v$0])}
          if(menhir_env$2[4])throw [0,Assert_failure,_e5_];
          menhir_env$2[4] = 1;
          return menhir_errorcase(menhir_env$2,menhir_stack$2,6)}
        if(menhir_env$1[4])throw [0,Assert_failure,_e6_];
        menhir_env$1[4] = 1;
        var
         match=menhir_stack$2[1],
         menhir_s$1=match[2],
         menhir_stack$3=match[1];
        return menhir_errorcase(menhir_env$1,menhir_stack$3,menhir_s$1)}
      if(menhir_env$0[4])throw [0,Assert_failure,_e4_];
      menhir_env$0[4] = 1;
      var menhir_s$0=menhir_stack$0[2],menhir_stack$1=menhir_stack$0[1];
      return menhir_errorcase(menhir_env$0,menhir_stack$1,menhir_s$0)}
    function menhir_run10$0(counter,menhir_env,menhir_stack,menhir_s,_1)
     {var menhir_env$0=menhir_discard(menhir_env),v=[3,_1];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return menhir_goto_AtomicExpr
                (counter$0,menhir_env$0,menhir_stack,menhir_s,v)}
      return caml_trampoline_return
              (menhir_goto_AtomicExpr,
               [0,menhir_env$0,menhir_stack,menhir_s,v])}
    function menhir_run1(menhir_env,menhir_stack,menhir_s,_1)
     {return caml_trampoline
              (menhir_run1$0(0,menhir_env,menhir_stack,menhir_s,_1))}
    function menhir_run2(menhir_env,menhir_stack,menhir_s,_1)
     {return caml_trampoline
              (menhir_run2$0(0,menhir_env,menhir_stack,menhir_s,_1))}
    function menhir_run3(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run3$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run4(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run4$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run7(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run7$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run8(menhir_env,menhir_stack,menhir_s,v)
     {return caml_trampoline
              (menhir_run8$0(0,menhir_env,menhir_stack,menhir_s,v))}
    function menhir_run56(menhir_env,menhir_stack,menhir_s)
     {return caml_trampoline
              (menhir_run56$0(0,menhir_env,menhir_stack,menhir_s))}
    function menhir_run10(menhir_env,menhir_stack,menhir_s,_1)
     {return caml_trampoline
              (menhir_run10$0(0,menhir_env,menhir_stack,menhir_s,_1))}
    function menhir_discard(menhir_env)
     {var
       lexer=menhir_env[1],
       lexbuf=menhir_env[2],
       tok=caml_call1(lexer,lexbuf);
      return [0,lexer,lexbuf,tok,0]}
    function program(lexer,lexbuf)
     {var
       menhir_env=[0,lexer,lexbuf,0,0],
       menhir_stack=[0,0,menhir_env[2][12]],
       menhir_env$0=menhir_discard(menhir_env),
       tok=menhir_env$0[3];
      if(typeof tok === "number")
       switch(tok)
        {case 8:return menhir_run3(menhir_env$0,menhir_stack,25);
         case 9:return menhir_run4(menhir_env$0,menhir_stack,25);
         case 12:return menhir_run7(menhir_env$0,menhir_stack,25);
         case 13:return menhir_run56(menhir_env$0,menhir_stack,25);
         case 14:return menhir_run71(menhir_env$0,menhir_stack,25);
         default:
          if(menhir_env$0[4])throw [0,Assert_failure,_e7_];
          menhir_env$0[4] = 1;
          return menhir_errorcase(menhir_env$0,menhir_stack,25)}
      else
       switch(tok[0])
        {case 0:
          var v=tok[1];return menhir_run1(menhir_env$0,menhir_stack,25,v);
         case 1:
          var v$0=tok[1];return menhir_run2(menhir_env$0,menhir_stack,25,v$0);
         case 2:
          var v$1=tok[1];return menhir_run8(menhir_env$0,menhir_stack,25,v$1);
         default:
          var v$2=tok[1];return menhir_run10(menhir_env$0,menhir_stack,25,v$2)}}
    var SyntaxError=[248,_e8_,caml_fresh_oo_id(0)];
    function next_line(lexbuf)
     {var pos=lexbuf[12];
      lexbuf[12] = [0,pos[1],pos[2] + 1 | 0,lexbuf[6],pos[4]];
      return 0}
    function read$0(counter,lexbuf)
     {a:
      for(;;)
       {var ocaml_lex_state$3=11;
        for(;;)
         {var
           ocaml_lex_state$4=
            engine(ocaml_lex_tables,ocaml_lex_state$3,lexbuf);
          if(26 < ocaml_lex_state$4 >>> 0)
           {caml_call1(lexbuf[1],lexbuf);
            var ocaml_lex_state$3=ocaml_lex_state$4;
            continue}
          switch(ocaml_lex_state$4)
           {case 0:continue a;
            case 1:next_line(lexbuf);continue a;
            case 2:
             var b=sub_lexeme(lexbuf,lexbuf[5],lexbuf[6]);
             return [1,caml_int_of_string(b)];
            case 3:
             var strbuf=create$1(100);
             b:
             for(;;)
              {var ocaml_lex_state$1=4;
               for(;;)
                {var
                  ocaml_lex_state$2=
                   engine(ocaml_lex_tables,ocaml_lex_state$1,lexbuf);
                 if(4 < ocaml_lex_state$2 >>> 0)
                  {caml_call1(lexbuf[1],lexbuf);
                   var ocaml_lex_state$1=ocaml_lex_state$2;
                   continue}
                 switch(ocaml_lex_state$2)
                  {case 0:return 14;
                   case 1:
                    var q=sub_lexeme(lexbuf,lexbuf[5],lexbuf[5] + 2 | 0);
                    add_string(strbuf,q);
                    continue b;
                   case 2:
                    var
                     s$0=contents(strbuf),
                     _ho_=function(x){return x},
                     s=symbol(_dj_,symbol(s$0,_di_)),
                     i=[0,0],
                     len=caml_ml_string_length(s),
                     next=
                      function(param)
                       {if(len <= i[1])throw End_of_file;
                        var c=caml_string_get(s,i[1]);
                        i[1]++;
                        return c},
                     ib=create$2(1,next),
                     str=fmt[2],
                     fmt$0=fmt[1],
                     apply=
                      function(f,args)
                       {var f$0=f,args$0=args;
                        for(;;)
                         {if(args$0)
                           {var
                             r=args$0[2],
                             x=args$0[1],
                             f$1=caml_call1(f$0,x),
                             f$0=f$1,
                             args$0=r;
                            continue}
                          return f$0}},
                     k=
                      function(readers,f)
                       {reset_token(ib);
                        try
                         {var _hs_=[0,make_scanf(ib,fmt$0,readers)],_hr_=_hs_}
                        catch(exc)
                         {exc = caml_wrap_exception(exc);
                          var switch$0=0;
                          if
                           (exc[1]
                            !==
                            Scan_failure
                            &&
                            exc[1]
                            !==
                            Failure
                            &&
                            exc
                            !==
                            End_of_file)
                           {if(exc[1] !== Invalid_argument)throw exc;
                            var
                             msg=exc[2],
                             _hq_=
                              invalid_arg
                               (symbol(msg,symbol(_dh_,symbol(escaped(str),_dg_))));
                            switch$0 = 1}
                          if(! switch$0)var _hq_=[1,exc];
                          var _hr_=_hq_}
                        if(0 === _hr_[0]){var args=_hr_[1];return apply(f,args)}
                        var exc=_hr_[1];
                        return ef(ib,exc)};
                    return [0,caml_call1(take_format_readers(k,fmt$0),_ho_)];
                   case 3:
                    var lcp=lexbuf[12];
                    if(lcp !== dummy_pos)
                     lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]];
                    add_char(strbuf,10);
                    continue b;
                   default:
                    var c=sub_lexeme_char(lexbuf,lexbuf[5]);
                    add_char(strbuf,c);
                    continue b}}}
            case 4:
             var
              param=sub_lexeme(lexbuf,lexbuf[5],lexbuf[6]),
              _hp_=
               caml_string_notequal(param,_d_)
                ?caml_string_notequal(param,_e_)?invalid_arg(_f_):1
                :0;
             return [3,_hp_];
            case 5:return 7;
            case 6:return 13;
            case 7:return 12;
            case 8:return 4;
            case 9:return 15;
            case 10:return 10;
            case 11:return 11;
            case 12:return 3;
            case 13:return 2;
            case 14:return 1;
            case 15:
             var id=sub_lexeme(lexbuf,lexbuf[5],lexbuf[6]);return [2,id];
            case 16:return 8;
            case 17:return 5;
            case 18:return 9;
            case 19:return 6;
            case 20:return 17;
            case 21:return 18;
            case 22:return 0;
            case 23:return 16;
            case 24:
             b:
             for(;;)
              {var ocaml_lex_state=0;
               for(;;)
                {var
                  ocaml_lex_state$0=
                   engine(ocaml_lex_tables,ocaml_lex_state,lexbuf);
                 if(0 === ocaml_lex_state$0)
                  {next_line(lexbuf);
                   if(counter < 50)
                    {var counter$0=counter + 1 | 0;
                     return read$0(counter$0,lexbuf)}
                   return caml_trampoline_return(read$0,[0,lexbuf])}
                 if(1 === ocaml_lex_state$0)continue b;
                 caml_call1(lexbuf[1],lexbuf);
                 var ocaml_lex_state=ocaml_lex_state$0;
                 continue}}
            case 25:return 14;
            default:
             var c$0=sub_lexeme_char(lexbuf,lexbuf[5]);
             throw [0,SyntaxError,symbol(_e9_,make$0(1,c$0))]}}}}
    function read(lexbuf){return caml_trampoline(read$0(0,lexbuf))}
    var No_rule_applies=[248,_e__,caml_fresh_oo_id(0)];
    function f(bod,x,y)
     {switch(bod[0])
       {case 0:var n=bod[1];if(caml_string_equal(n,x))return y;break;
        case 4:
         var
          args=bod[2],
          fn=bod[1],
          _hl_=map(function(a){return f(a,x,y)},args);
         return [4,f(fn,x,y),_hl_];
        case 5:var ty=bod[2],e=bod[1];return [5,f(e,x,y),ty];
        case 6:
         var
          right=bod[3],
          left=bod[2],
          cond=bod[1],
          _hm_=f(right,x,y),
          _hn_=f(left,x,y);
         return [6,f(cond,x,y),_hn_,_hm_];
        case 7:
         var fields=bod[1],ty$0=bod[2];
         return [7,map$1(function(v){return f(v,x,y)},fields),ty$0];
        case 8:var key=bod[2],rcd=bod[1];return [8,f(rcd,x,y),key];
        case 9:var rcd$0=bod[2],key$0=bod[1];return [9,key$0,f(rcd$0,x,y)]
        }
      return bod}
    function p(t)
     {switch(t[0]){case 1:case 2:case 3:case 7:return 1;default:return 0}}
    function small_step(ctx,t)
     {switch(t[0])
       {case 4:
         var _hc_=t[1];
         if(0 === _hc_[0])
          {var args=t[2],fn=_hc_[1],param=args;
           for(;;)
            {if(param)
              {var l=param[2],a=param[1],_hb_=p(a);
               if(_hb_){var param=l;continue}
               var _hd_=_hb_}
             else
              var _hd_=1;
             if(_hd_)
              {var match=find_opt(fn,ctx);
               if(match)
                {var _he_=match[1];
                 if(0 === _he_[0])
                  {var
                    match$0=_he_[1],
                    body=match$0[4],
                    params=match$0[2],
                    l1$1=map(function(_hk_){return _hk_[1]},params),
                    accu=body,
                    l1=l1$1,
                    l2=args;
                   for(;;)
                    {if(l1)
                      {if(l2)
                        {var
                          l2$0=l2[2],
                          a2=l2[1],
                          l1$0=l1[2],
                          a1=l1[1],
                          accu$0=f(accu,a1,a2),
                          accu=accu$0,
                          l1=l1$0,
                          l2=l2$0;
                         continue}}
                     else
                      if(! l2)return accu;
                     return invalid_arg(_o_)}}}
               throw No_rule_applies}
             break}}
         var
          args$0=t[2],
          lower_single=
           function(seq)
            {if(seq)
              {var a=seq[1],rest=seq[2];
               if(p(a)){var rest$0=seq[2];return [0,a,lower_single(rest$0)]}
               return [0,small_step(ctx,a),rest]}
             return 0};
         return [4,_hc_,lower_single(args$0)];
        case 5:
         var e=t[1],ty=t[2];
         if(p(e))
          {var tyE=typecheck(ctx,e),switch$0=0;
           if(typeof ty !== "number" && 2 === ty[0])
            {var u=ty[1],res=exists(function(_hj_){return tyeq(tyE,_hj_)},u);
             switch$0 = 1}
           if(! switch$0)var res=tyeq(tyE,ty);
           return [3,res]}
         var ty$0=t[2];
         return [5,small_step(ctx,e),ty$0];
        case 6:
         var _hf_=t[1];
         if(3 === _hf_[0])
          {if(_hf_[1]){var left$0=t[2];return left$0}
           var right$0=t[3];
           return right$0}
         var right=t[3],left=t[2];
         return [6,small_step(ctx,_hf_),left,right];
        case 8:
         var _hg_=t[1];
         if(7 === _hg_[0])
          {var fields=_hg_[1],key$0=t[2];return find(key$0,fields)}
         var key=t[2];
         return [8,small_step(ctx,_hg_),key];
        case 9:
         var _hh_=t[1],_hi_=t[2];
         if(7 === _hi_[0]){var fields$0=_hi_[1];return [3,mem(_hh_,fields$0)]}
         var rcd=t[2];
         return [9,_hh_,small_step(ctx,rcd)];
        default:throw No_rule_applies}}
    function eval$0(ctx,t)
     {try
       {var t$0=small_step(ctx,t),_g$_=eval$0(ctx,t$0);return _g$_}
      catch(_ha_)
       {_ha_ = caml_wrap_exception(_ha_);
        if(_ha_ === No_rule_applies)return t;
        throw _ha_}}
    function emptyScope(param){return [0,0,0]}
    var all_idents=[0,0];
    function registerIdent(t,ident)
     {t[1][1] = [0,ident,t[1][1]];
      all_idents[1] = [0,ident,all_idents[1]];
      return 0}
    function freshIdent(t,hint)
     {var n=0;
      a:
      for(;;)
       {var
         x=[0,-895044912,symbol(hint,caml_string_of_jsbytes("" + n))],
         param=all_idents[1];
        for(;;)
         {if(param)
           {var l=param[2],a=param[1],_g9_=0 === caml_compare(a,x)?1:0;
            if(! _g9_){var param=l;continue}
            var _g__=_g9_}
          else
           var _g__=0;
          if(_g__){var n$0=n + 1 | 0,n=n$0;continue a}
          registerIdent(t,x);
          return x}}}
    function typeTagRcd(t,rcdty)
     {var param=t[3];
      for(;;)
       {if(param)
         {var l=param[2],match=param[1],b=match[2],a=match[1];
          if(0 !== caml_compare(a,rcdty)){var param=l;continue}
          var match$0=[0,b]}
        else
         var match$0=0;
        if(match$0){var match$1=match$0[1],name=match$1[1];return name}
        var ident=freshIdent(t,_fa_),tag=[0,3900609,t[2]];
        t[2] = t[2] + 1 | 0;
        t[3] = [0,[0,rcdty,[0,ident,tag]],t[3]];
        return ident}}
    function typeTag(t,ty)
     {if(typeof ty !== "number")
       switch(ty[0])
        {case 0:
          switch(ty[1])
           {case 0:return _fc_;case 1:return _fd_;default:return _fe_}
         case 2:
          var v=ty[1],_g7_=of_seq(to_seq$0(v));
          return concat_map(function(_g8_){return typeTag(t,_g8_)},_g7_);
         case 3:return [0,typeTagRcd(t,ty),0]
         }
      var _g6_=string_of_ty(ty);
      return failwith(caml_call1(sprintf(_fb_),_g6_))}
    function codegen_expr(st,expr)
     {switch(expr[0])
       {case 0:var n=expr[1];return [0,0,[0,-895044912,n]];
        case 1:
         var n$0=expr[1],e=[0,3900609,n$0];
         return [0,0,[0,747848894,[0,_fg_,[0,e,0]]]];
        case 2:
         var s=expr[1],e$0=[0,-976970511,s];
         return [0,0,[0,747848894,[0,_fh_,[0,e$0,0]]]];
        case 3:
         var b=expr[1],e$1=[0,737456202,b];
         return [0,0,[0,747848894,[0,_fi_,[0,e$1,0]]]];
        case 4:
         var
          args=expr[2],
          n$1=expr[1],
          match=codegen_expr(st,n$1),
          call=match[2],
          stmts=match[1],
          _g2_=[0,stmts,0],
          match$0=
           fold_right
            (function(arg,param)
              {var
                cArgs=param[2],
                stmts=param[1],
                match=codegen_expr(st,arg),
                cA=match[2],
                stmts1=match[1];
               return [0,append(stmts1,stmts),[0,cA,cArgs]]},
             args,
             _g2_),
          args$0=match$0[2],
          stmts$0=match$0[1];
         return [0,stmts$0,[0,747848894,[0,call,args$0]]];
        case 5:
         var
          ty=expr[2],
          e$2=expr[1],
          match$1=codegen_expr(st,e$2),
          e$3=match$1[2],
          stmts$1=match$1[1],
          tags=typeTag(st,ty),
          tagsV=freshIdent(st,_fm_),
          tagsDecl=
           [0,759135370,[0,759135370,[0,tagsTy,tagsV,[0,[0,951901561,tags]]]]],
          is_tag=
           [0,
            747848894,
            [0,_fn_,[0,e$3,[0,tagsV,[0,[0,3900609,length(tags)],0]]]]],
          stmts2=[0,tagsDecl,0];
         return [0,append(stmts$1,stmts2),is_tag];
        case 6:
         var
          right=expr[3],
          left=expr[2],
          cond=expr[1],
          outV=freshIdent(st,_fp_),
          match$2=codegen_expr(st,cond),
          cCond=match$2[2],
          condStmts=match$2[1],
          match$3=codegen_expr(st,left),
          cLeft=match$3[2],
          stmtsL=match$3[1],
          outLeft=[0,10140239,[0,outV,cLeft]],
          blockLeft=append(stmtsL,[0,outLeft,0]),
          match$4=codegen_expr(st,right),
          cRight=match$4[2],
          stmtsR=match$4[1],
          outRight=[0,10140239,[0,outV,cRight]],
          blockRight=append(stmtsR,[0,outRight,0]),
          cIfSeq=
           append
            ([0,[0,759135370,[0,759135370,[0,922502080,outV,0]]],0],
             append(condStmts,[0,[0,16381,[0,cCond,blockLeft,blockRight]],0]));
         return [0,cIfSeq,outV];
        case 7:
         var _g4_=expr[2],_g3_=expr[1];
         if(_g4_)
          {var
            rcdty=_g4_[1],
            fls=of_seq(to_seq$1(_g3_)),
            match$5=
             fold_right
              (function(param,_g5_)
                {var
                  r=_g5_[2],
                  stmts=_g5_[1],
                  value=param[2],
                  field=param[1],
                  cField=[0,-976970511,field],
                  match=codegen_expr(st,value),
                  cValue=match[2],
                  stmts1=match[1];
                 return [0,append(stmts1,stmts),[0,[0,cField,cValue],r]]},
               fls,
               _fq_),
            rcd=match$5[2],
            stmts$2=match$5[1],
            ty$0=typeTagRcd(st,rcdty),
            _g1_=
             concat_map
              (function(param){var b=param[2],a=param[1];return [0,a,[0,b,0]]},
               rcd);
           return [0,
                   stmts$2,
                   [0,
                    747848894,
                    [0,_fj_,[0,ty$0,[0,[0,3900609,length(rcd)],_g1_]]]]]}
         return failwith(_fr_);
        case 8:
         var
          field=expr[2],
          rcd$0=expr[1],
          match$6=codegen_expr(st,rcd$0),
          cRcd=match$6[2],
          stmts$3=match$6[1];
         return [0,
                 stmts$3,
                 [0,747848894,[0,_fk_,[0,cRcd,[0,[0,-976970511,field],0]]]]];
        default:
         var
          rcd$1=expr[2],
          field$0=expr[1],
          match$7=codegen_expr(st,rcd$1),
          cRcd$0=match$7[2],
          stmts$4=match$7[1];
         return [0,
                 stmts$4,
                 [0,
                  747848894,
                  [0,_fo_,[0,cRcd$0,[0,[0,-976970511,field$0],0]]]]]}}
    function lines(s)
     {var
       r=[0,0],
       j=[0,caml_ml_string_length(s)],
       _gX_=caml_ml_string_length(s) - 1 | 0;
      if(! (_gX_ < 0))
       {var i=_gX_;
        for(;;)
         {if(caml_string_unsafe_get(s,i) === 10)
           {var _gZ_=r[1];
            r[1] = [0,sub$0(s,i + 1 | 0,(j[1] - i | 0) - 1 | 0),_gZ_];
            j[1] = i}
          var _g0_=i - 1 | 0;
          if(0 !== i){var i=_g0_;continue}
          break}}
      var _gY_=r[1];
      return [0,sub$0(s,0,j[1]),_gY_]}
    function emit_cTy(param)
     {if(typeof param === "number")
       return 748194550 <= param
               ?922502080 <= param?_fs_:_ft_
               :4198970 <= param?_fu_:_fv_;
      var _gT_=param[1];
      if(3257921 === _gT_)
       {var t=param[2],_gU_=emit_cTy(t);return caml_call1(sprintf(_fw_),_gU_)}
      if(4004302 <= _gT_)
       {var t$0=param[2],_gV_=emit_cTy(t$0);
        return caml_call1(sprintf(_fx_),_gV_)}
      var t$1=param[2],_gW_=emit_cTy(t$1);
      return caml_call1(sprintf(_fy_),_gW_)}
    function emit_cExpr(e)
     {var _gM_=e[1];
      if(3900609 <= _gM_)
       {if(747848894 <= _gM_)
         {if(951901561 <= _gM_)
           {var es=e[2],_gN_=concat(_fz_,map(emit_cExpr,es));
            return caml_call1(sprintf(_fA_),_gN_)}
          var
           match=e[2],
           args=match[2],
           n=match[1],
           _gO_=concat(_fB_,map(emit_cExpr,args)),
           _gP_=emit_cExpr(n);
          return caml_call2(sprintf(_fC_),_gP_,_gO_)}
        if(737456202 <= _gM_)return e[2]?_fD_:_fE_;
        var n$0=e[2];
        return caml_string_of_jsbytes("" + n$0)}
      if(-976376203 === _gM_)
       {var
         fields=e[2],
         _gQ_=
          concat
           (_fG_,
            map
             (function(param)
               {var e=param[2],n=param[1],_gS_=emit_cExpr(e);
                return caml_call2(sprintf(_fF_),n,_gS_)},
              fields));
        return caml_call1(sprintf(_fH_),_gQ_)}
      if(-895044912 <= _gM_){var s=e[2];return s}
      var s$0=e[2],_gR_=escaped(s$0);
      return caml_call1(sprintf(_fI_),_gR_)}
    function emit_cDecl(param)
     {var match=param[2],e=match[3],n=match[2],ty=match[1];
      function pHeader(t)
       {if(typeof t !== "number" && 3257921 === t[1])
         {var t$0=t[2],_gL_=pHeader(t$0);
          return caml_call1(sprintf(_fK_),_gL_)}
        var _gJ_=emit_cExpr(n),_gK_=emit_cTy(t);
        return caml_call2(sprintf(_fJ_),_gK_,_gJ_)}
      var header=pHeader(ty);
      if(e)
       var e$0=e[1],_gI_=emit_cExpr(e$0),init=caml_call1(sprintf(_fL_),_gI_);
      else
       var init=_fN_;
      return caml_call2(sprintf(_fM_),header,init)}
    function emit_cStmt(indent,s$0)
     {var s=caml_create_bytes(indent),_gv_=indent - 1 | 0,_gu_=0;
      if(! (_gv_ < 0))
       {var i=_gu_;
        for(;;)
         {caml_bytes_unsafe_set(s,i,32);
          var _gw_=i + 1 | 0;
          if(_gv_ !== i){var i=_gw_;continue}
          break}}
      var indentS=caml_string_of_bytes(s),_gx_=s$0[1];
      if(10140239 === _gx_)
       var
        match=s$0[2],
        e2=match[2],
        e1=match[1],
        _gy_=emit_cExpr(e2),
        _gz_=emit_cExpr(e1),
        parts=[0,caml_call2(sprintf(_fO_),_gz_,_gy_),0];
      else
       if(759135370 <= _gx_)
        if(1036130512 <= _gx_)
         var
          e=s$0[2],
          _gA_=emit_cExpr(e),
          parts=[0,caml_call1(sprintf(_fQ_),_gA_),0];
        else
         var
          d=s$0[2],
          _gB_=emit_cDecl(d),
          parts=[0,caml_call1(sprintf(_fR_),_gB_),0];
       else
        if(193204797 <= _gx_)
         var
          e$0=s$0[2],
          _gC_=emit_cExpr(e$0),
          parts=[0,caml_call1(sprintf(_fS_),_gC_),0];
        else
         var
          match$0=s$0[2],
          right=match$0[3],
          left=match$0[2],
          cond=match$0[1],
          bLeft=map(function(_gH_){return emit_cStmt(indent,_gH_)},left),
          bRight=map(function(_gG_){return emit_cStmt(indent,_gG_)},right),
          _gD_=append(_fU_,append(concat_map(lines,bRight),_fT_)),
          _gE_=append(concat_map(lines,bLeft),_gD_),
          _gF_=emit_cExpr(cond),
          parts=append([0,caml_call1(sprintf(_fV_),_gF_),0],_gE_);
      return concat(_fP_,map(function(s){return symbol(indentS,s)},parts))}
    function emit_cTop(param)
     {if(759135370 <= param[1])
       {var decl=param[2],_go_=emit_cDecl(decl);
        return caml_call1(sprintf(_fW_),_go_)}
      var
       match=param[2],
       block=match[4],
       params=match[3],
       name=match[2],
       ty=match[1],
       _gp_=2,
       block$0=map(function(_gt_){return emit_cStmt(_gp_,_gt_)},block),
       params$0=map(emit_cDecl,params),
       _gq_=concat(_fX_,params$0),
       _gr_=emit_cExpr(name),
       _gs_=emit_cTy(ty),
       header=caml_call3(sprintf(_fY_),_gs_,_gr_,_gq_);
      return concat
              (_fZ_,append([0,header,concat_map(lines,block$0)],[0,footer,0]))}
    function codegen_c(fns,expr)
     {var
       state=[0,emptyScope(0),100,0],
       cFns=
        map
         (function(param)
           {var
             body=param[4],
             params=param[2],
             name=param[1],
             fnIdent=[0,-895044912,name];
            registerIdent(state,fnIdent);
            var _gm_=emptyScope(0);
            state[1] = [0,_gm_[1],[0,state[1]]];
            var
             params$0=
              map
               (function(param)
                 {var p=param[1],pIdent=[0,-895044912,p];
                  registerIdent(state,pIdent);
                  return [0,759135370,[0,922502080,pIdent,0]]},
                params),
             match=codegen_expr(state,body),
             bodyExpr=match[2],
             stmts=match[1],
             body$0=append(stmts,[0,[0,1036130512,bodyExpr],0]),
             _gn_=state[1][2];
            if(_gn_){var s=_gn_[1];state[1] = s}else failwith(_e$_);
            return [0,15720,[0,922502080,fnIdent,params$0,body$0]]},
          fns);
      if(expr)
       var
        expr$0=expr[1],
        match=codegen_expr(state,expr$0),
        cExpr=match[2],
        stmts1=match[1],
        match$0=codegen_expr(state,_f0_),
        exprVar=match$0[2],
        stmts2=match$0[1],
        cMain=
         [0,
          15720,
          [0,
           3654863,
           mainN,
           0,
           append
            (stmts1,
             append
              (stmts2,
               [0,
                [0,759135370,[0,759135370,[0,922502080,exprVar,[0,cExpr]]]],
                [0,[0,193204797,[0,747848894,[0,_fl_,[0,exprVar,0]]]],0]]))]],
        main=[0,cMain,0];
      else
       var main=0;
      var
       _gl_=state[3],
       tagVars=
        map
         (function(param)
           {var match=param[2],v=match[2],name=match[1];
            return [0,
                    759135370,
                    [0,
                     759135370,
                     [0,ty,name,[0,[0,-976376203,[0,[0,_ff_,v],0]]]]]]},
          _gl_),
       toplevels=append(tagVars,append(cFns,main));
      return concat(_f1_,map(emit_cTop,toplevels))}
    var
     global=joo_global_object,
     object_constructor=global.Object,
     array_length=global.Array,
     Error=[248,_f2_,caml_fresh_oo_id(0)],
     error_constr=global.Error,
     exn=[0,Error,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_string_of_jsbytes("jsError"),slot);
    function raise_js_error(exn){throw exn}
    register_printer
     (function(param)
       {if(param[1] === Error)
         {var e=param[2];return [0,caml_string_of_jsstring(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length
                ?0
                :[0,caml_string_of_jsstring(e.toString())]});
    function string_of_position(lexbuf)
     {var
       pos=lexbuf[12],
       _gi_=(pos[4] - pos[3] | 0) + 1 | 0,
       _gj_=pos[2],
       _gk_=pos[1];
      return caml_call3(sprintf(_f3_),_gk_,_gj_,_gi_)}
    function pr_binding(what,ty)
     {var _gh_=string_of_ty(ty);return caml_call2(sprintf(_f4_),what,_gh_)}
    function process_fn(param,fn)
     {var
       name$1=fn[1],
       bindings=param[2],
       ctx$0=param[1],
       body=fn[4],
       retTy=fn[3],
       params=fn[2],
       name$0=fn[1],
       ctx=
        fold_left$0
         (function(e,param){var t=param[2],p=param[1];return add_var(p,t,e)},
          ctx$0,
          params),
       bodyTy=typecheck(ctx,body),
       paramTys=map(function(_gg_){return _gg_[2]},params);
      if(is_subtype(ctx,bodyTy,retTy))
       var ty=[1,paramTys,retTy];
      else
       var
        real=[1,paramTys,bodyTy],
        expected=[1,paramTys,retTy],
        _gd_=string_of_ty(real),
        _ge_=string_of_ty(expected),
        ty=failwith(caml_call3(sprintf(_dO_),name$0,_ge_,_gd_));
      var
       bind=pr_binding(name$1,ty),
       _gf_=append(bindings,[0,bind,0]),
       name=fn[1];
      return [0,add$0(name,[0,fn,ty],ctx$0),_gf_]}
    function t5(param,program$0)
     {try
       {var
         program$1=caml_string_of_jsstring(program$0),
         lexbuf=from_string(_f5_,program$1);
        try
         {var match=program(read,lexbuf)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === SyntaxError)
           {var msg=exn[2],_ga_=string_of_position(lexbuf);
            throw [0,Failure,caml_call2(sprintf(_f6_),msg,_ga_)]}
          var _gb_=string_of_position(lexbuf);
          throw [0,Failure,caml_call1(sprintf(_f7_),_gb_)]}
        var expr=match[2],fns=match[1];
        clear_parser(0);
        var
         match$0=fold_left$0(process_fn,[0,m,0],fns),
         bindings=match$0[2],
         ctx=match$0[1];
        if(expr)
         var
          e=expr[1],
          ety=typecheck(ctx,e),
          evaled=eval$0(ctx,e),
          ebind=pr_binding(string_of_expr(evaled),ety),
          expr$0=[0,e],
          expr$1=expr$0,
          bindings$0=append(bindings,[0,ebind,0]);
        else
         var expr$1=0,bindings$0=bindings;
        var
         codegen=codegen_c(fns,expr$1),
         bindings$1=concat(_f8_,bindings$0),
         _gc_=
          {"bindings":caml_jsstring_of_string(bindings$1),
           "codegen":caml_jsstring_of_string(codegen)};
        return _gc_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Failure)
         {var msg$0=exn[2];
          return caml_call1
                  (raise_js_error,
                   new error_constr(caml_jsstring_of_string(msg$0)))}
        throw exn}}
    var
     obj={"langNarrow":caml_js_wrap_meth_callback(t5)},
     keys=object_constructor.keys(obj);
    keys.forEach
     (caml_js_wrap_callback
       (function(key,param,_f$_)
         {var x=obj[key];return caml_js_export_var(0)[key] = x}));
    function iter(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          try
           {caml_ml_flush(a)}
          catch(_f__)
           {_f__ = caml_wrap_exception(_f__);
            if(_f__[1] !== Sys_error)throw _f__;
            var _f9_=_f__}
          var param$0=l;
          continue}
        return 0}}
    iter(caml_ml_out_channels_list(0));
    return}
  (function(){return this}()));

//# sourceMappingURL=lang_narrow.map
